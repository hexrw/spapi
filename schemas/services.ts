/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/service/v1/serviceJobs/{serviceJobId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Gets details of service job indicated by the provided `serviceJobID`.
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 20 | 40 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api). */
        get: operations["getServiceJobByServiceJobId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service/v1/serviceJobs/{serviceJobId}/cancellations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Cancels the service job indicated by the service job identifier specified.
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 5 | 20 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api). */
        put: operations["cancelServiceJobByServiceJobId"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service/v1/serviceJobs/{serviceJobId}/completions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Completes the service job indicated by the service job identifier specified.
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 5 | 20 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api). */
        put: operations["completeServiceJobByServiceJobId"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service/v1/serviceJobs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Gets service job details for the specified filter query.
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 10 | 40 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api). */
        get: operations["getServiceJobs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service/v1/serviceJobs/{serviceJobId}/appointments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Adds an appointment to the service job indicated by the service job identifier specified.
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 5 | 20 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api). */
        post: operations["addAppointmentForServiceJobByServiceJobId"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service/v1/serviceJobs/{serviceJobId}/appointments/{appointmentId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Reschedules an appointment for the service job indicated by the service job identifier specified.
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 5 | 20 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api). */
        post: operations["rescheduleAppointmentForServiceJobByServiceJobId"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service/v1/serviceJobs/{serviceJobId}/appointments/{appointmentId}/resources": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Assigns new resource(s) or overwrite/update the existing one(s) to a service job appointment.
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 1 | 2 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api). */
        put: operations["assignAppointmentResources"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service/v1/serviceJobs/{serviceJobId}/appointments/{appointmentId}/fulfillment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Updates the appointment fulfillment data related to a given `jobID` and `appointmentID`.
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 5 | 20 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api). */
        put: operations["setAppointmentFulfillmentData"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service/v1/serviceResources/{resourceId}/capacity/range": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Provides capacity slots in a format similar to availability records.
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 5 | 20 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api). */
        post: operations["getRangeSlotCapacity"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service/v1/serviceResources/{resourceId}/capacity/fixed": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Provides capacity in fixed-size slots.
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 5 | 20 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api). */
        post: operations["getFixedSlotCapacity"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service/v1/serviceResources/{resourceId}/schedules": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Update the schedule of the given resource.
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 5 | 20 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api). */
        put: operations["updateSchedule"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service/v1/reservation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a reservation.
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 5 | 20 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api). */
        post: operations["createReservation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service/v1/reservation/{reservationId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Update a reservation.
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 5 | 20 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api). */
        put: operations["updateReservation"];
        post?: never;
        /** @description Cancel a reservation.
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 5 | 20 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api). */
        delete: operations["cancelReservation"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service/v1/serviceJobs/{serviceJobId}/appointmentSlots": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Gets appointment slots for the service associated with the service job id specified.
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 5 | 20 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api). */
        get: operations["getAppointmmentSlotsByJobId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service/v1/appointmentSlots": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Gets appointment slots as per the service context specified.
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 20 | 40 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api). */
        get: operations["getAppointmentSlots"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service/v1/documents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Creates an upload destination.
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 5 | 20 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api). */
        post: operations["createServiceDocumentUploadDestination"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description The response schema for the `getServiceJobByServiceJobId` operation. */
        GetServiceJobByServiceJobIdResponse: {
            payload?: components["schemas"]["ServiceJob"];
            errors?: components["schemas"]["ErrorList"];
        };
        /** @description Response schema for the `cancelServiceJobByServiceJobId` operation. */
        CancelServiceJobByServiceJobIdResponse: {
            errors?: components["schemas"]["ErrorList"];
        };
        /** @description Response schema for the `completeServiceJobByServiceJobId` operation. */
        CompleteServiceJobByServiceJobIdResponse: {
            errors?: components["schemas"]["ErrorList"];
        };
        /** @description Response schema for the `getServiceJobs` operation. */
        GetServiceJobsResponse: {
            payload?: components["schemas"]["JobListing"];
            errors?: components["schemas"]["ErrorList"];
        };
        /** @description Response schema for the `addAppointmentForServiceJobByServiceJobId` and `rescheduleAppointmentForServiceJobByServiceJobId` operations. */
        SetAppointmentResponse: {
            appointmentId?: components["schemas"]["AppointmentId"];
            warnings?: components["schemas"]["WarningList"];
            errors?: components["schemas"]["ErrorList"];
        };
        /** @description Response schema for the `assignAppointmentResources` operation. */
        AssignAppointmentResourcesResponse: {
            /** @description The payload for the `assignAppointmentResource` operation. */
            payload?: {
                warnings?: components["schemas"]["WarningList"];
            };
            errors?: components["schemas"]["ErrorList"];
        };
        /** @description Request schema for the `assignAppointmentResources` operation. */
        AssignAppointmentResourcesRequest: {
            resources: components["schemas"]["AppointmentResources"];
        };
        /** @description The payload for the `getServiceJobs` operation. */
        JobListing: {
            /** @description Total result size of the query result. */
            totalResultSize?: number;
            /** @description A generated string used to pass information to your next request. If `nextPageToken` is returned, pass the value of `nextPageToken` to the `pageToken` to get next results. */
            nextPageToken?: string;
            /** @description A generated string used to pass information to your next request. If `previousPageToken` is returned, pass the value of `previousPageToken` to the `pageToken` to get previous page results. */
            previousPageToken?: string;
            /** @description List of job details for the given input. */
            jobs?: components["schemas"]["ServiceJob"][];
        };
        /** @description The job details of a service. */
        ServiceJob: {
            /**
             * Format: date-time
             * @description The date and time of the creation of the job in ISO 8601 format.
             */
            createTime?: string;
            serviceJobId?: components["schemas"]["ServiceJobId"];
            /**
             * @description The status of the service job.
             * @enum {string}
             */
            serviceJobStatus?: "NOT_SERVICED" | "CANCELLED" | "COMPLETED" | "PENDING_SCHEDULE" | "NOT_FULFILLABLE" | "HOLD" | "PAYMENT_DECLINED";
            scopeOfWork?: components["schemas"]["ScopeOfWork"];
            seller?: components["schemas"]["Seller"];
            serviceJobProvider?: components["schemas"]["ServiceJobProvider"];
            /** @description A list of appointment windows preferred by the buyer. Included only if the buyer selected appointment windows when creating the order. */
            preferredAppointmentTimes?: components["schemas"]["AppointmentTime"][];
            /** @description A list of appointments. */
            appointments?: components["schemas"]["Appointment"][];
            serviceOrderId?: components["schemas"]["OrderId"];
            /** @description The marketplace identifier. */
            marketplaceId?: string;
            /** @description The Amazon-defined identifier for the region scope. */
            storeId?: string;
            buyer?: components["schemas"]["Buyer"];
            /** @description A list of items associated with the service job. */
            associatedItems?: components["schemas"]["AssociatedItem"][];
            serviceLocation?: components["schemas"]["ServiceLocation"];
        };
        /** @description Amazon identifier for the service job. */
        ServiceJobId: string;
        /** @description The Amazon-defined identifier for an order placed by the buyer, in 3-7-7 format. */
        OrderId: string;
        /** @description The scope of work for the order. */
        ScopeOfWork: {
            /** @description The Amazon Standard Identification Number (ASIN) of the service job. */
            asin?: string;
            /** @description The title of the service job. */
            title?: string;
            /** @description The number of service jobs. */
            quantity?: number;
            /** @description A list of skills required to perform the job. */
            requiredSkills?: string[];
        };
        /** @description Information about the seller of the service job. */
        Seller: {
            /** @description The identifier of the seller of the service job. */
            sellerId?: string;
        };
        /** @description Information about the service job provider. */
        ServiceJobProvider: {
            /** @description The identifier of the service job provider. */
            serviceJobProviderId?: string;
        };
        /** @description Information about the buyer. */
        Buyer: {
            /** @description The identifier of the buyer. */
            buyerId?: string;
            /** @description The name of the buyer. */
            name?: string;
            /** @description The phone number of the buyer. */
            phone?: string;
            /** @description When true, the service is for an Amazon Prime buyer. */
            isPrimeMember?: boolean;
        };
        /** @description The time of the appointment window. */
        AppointmentTime: {
            /**
             * Format: date-time
             * @description The date and time of the start of the appointment window in ISO 8601 format.
             */
            startTime: string;
            /** @description The duration of the appointment window, in minutes. */
            durationInMinutes: number;
        };
        /** @description The appointment identifier. */
        AppointmentId: string;
        /** @description The details of an appointment. */
        Appointment: {
            appointmentId?: components["schemas"]["AppointmentId"];
            /**
             * @description The status of the appointment.
             * @enum {string}
             */
            appointmentStatus?: "ACTIVE" | "CANCELLED" | "COMPLETED";
            appointmentTime?: components["schemas"]["AppointmentTime"];
            /** @description A list of technicians assigned to the service job. */
            assignedTechnicians?: components["schemas"]["Technician"][];
            rescheduledAppointmentId?: components["schemas"]["AppointmentId"];
            poa?: components["schemas"]["Poa"];
        };
        /** @description A technician who is assigned to perform the service job in part or in full. */
        Technician: {
            /** @description The technician identifier. */
            technicianId?: string;
            /** @description The name of the technician. */
            name?: string;
        };
        /** @description Proof of Appointment (POA) details. */
        Poa: {
            appointmentTime?: components["schemas"]["AppointmentTime"];
            /** @description A list of technicians. */
            technicians?: components["schemas"]["Technician"][];
            /** @description The identifier of the technician who uploaded the POA. */
            uploadingTechnician?: string;
            /**
             * Format: date-time
             * @description The date and time when the POA was uploaded in ISO 8601 format.
             */
            uploadTime?: string;
            /**
             * @description The type of POA uploaded.
             * @enum {string}
             */
            poaType?: "NO_SIGNATURE_DUMMY_POS" | "CUSTOMER_SIGNATURE" | "DUMMY_RECEIPT" | "POA_RECEIPT";
        };
        /** @description Information about an item associated with the service job. */
        AssociatedItem: {
            /** @description The Amazon Standard Identification Number (ASIN) of the item. */
            asin?: string;
            /** @description The title of the item. */
            title?: string;
            /** @description The total number of items included in the order. */
            quantity?: number;
            orderId?: components["schemas"]["OrderId"];
            /**
             * @description The status of the item.
             * @enum {string}
             */
            itemStatus?: "ACTIVE" | "CANCELLED" | "SHIPPED" | "DELIVERED";
            /** @description The brand name of the item. */
            brandName?: string;
            itemDelivery?: components["schemas"]["ItemDelivery"];
        };
        /** @description Delivery information for the item. */
        ItemDelivery: {
            /**
             * Format: date-time
             * @description The date and time of the latest Estimated Delivery Date (EDD) of all the items with an EDD. In ISO 8601 format.
             */
            estimatedDeliveryDate?: string;
            itemDeliveryPromise?: components["schemas"]["ItemDeliveryPromise"];
        };
        /** @description Promised delivery information for the item. */
        ItemDeliveryPromise: {
            /**
             * Format: date-time
             * @description The date and time of the start of the promised delivery window in ISO 8601 format.
             */
            startTime?: string;
            /**
             * Format: date-time
             * @description The date and time of the end of the promised delivery window in ISO 8601 format.
             */
            endTime?: string;
        };
        /** @description Information about the location of the service job. */
        ServiceLocation: {
            /**
             * @description The location of the service job.
             * @enum {string}
             */
            serviceLocationType?: "IN_HOME" | "IN_STORE" | "ONLINE";
            address?: components["schemas"]["Address"];
        };
        /** @description The shipping address for the service job. */
        Address: {
            /** @description The name of the person, business, or institution. */
            name: string;
            /** @description The first line of the address. */
            addressLine1: string;
            /** @description Additional address information, if required. */
            addressLine2?: string;
            /** @description Additional address information, if required. */
            addressLine3?: string;
            /** @description The city. */
            city?: string;
            /** @description The county. */
            county?: string;
            /** @description The district. */
            district?: string;
            /** @description The state or region. */
            stateOrRegion?: string;
            /** @description The postal code. This can contain letters, digits, spaces, and/or punctuation. */
            postalCode?: string;
            /** @description The two digit country code, in ISO 3166-1 alpha-2 format. */
            countryCode?: string;
            /** @description The phone number. */
            phone?: string;
        };
        /** @description Input for add appointment operation. */
        AddAppointmentRequest: {
            appointmentTime: components["schemas"]["AppointmentTimeInput"];
        };
        /** @description Input for rescheduled appointment operation. */
        RescheduleAppointmentRequest: {
            appointmentTime: components["schemas"]["AppointmentTimeInput"];
            rescheduleReasonCode: components["schemas"]["RescheduleReasonCode"];
        };
        /** @description The input appointment time details. */
        AppointmentTimeInput: {
            /**
             * Format: date-time
             * @description The date, time in UTC for the start time of an appointment in ISO 8601 format.
             */
            startTime: string;
            /** @description The duration of an appointment in minutes. */
            durationInMinutes?: number;
        };
        /** @description The appointment reschedule reason code. */
        RescheduleReasonCode: string;
        /** @description A list of error responses returned when a request is unsuccessful. */
        ErrorList: components["schemas"]["Error"][];
        /** @description Error response returned when the request is unsuccessful. */
        Error: {
            /** @description An error code that identifies the type of error that occurred. */
            code: string;
            /** @description A message that describes the error condition in a human-readable form. */
            message: string;
            /** @description Additional details that can help the caller understand or fix the issue. */
            details?: string;
            /**
             * @description The type of error.
             * @enum {string}
             */
            errorLevel?: "ERROR" | "WARNING";
        };
        /** @description A list of warnings returned in the sucessful execution response of an API request. */
        WarningList: components["schemas"]["Warning"][];
        /** @description Warning returned when the request is successful, but there are important callouts based on which API clients should take defined actions. */
        Warning: {
            /** @description An warning code that identifies the type of warning that occurred. */
            code: string;
            /** @description A message that describes the warning condition in a human-readable form. */
            message: string;
            /** @description Additional details that can help the caller understand or address the warning. */
            details?: string;
        };
        /** @description The error response schema for the `getRangeSlotCapacity` operation. */
        RangeSlotCapacityErrors: {
            errors?: components["schemas"]["ErrorList"];
        };
        /** @description Response schema for the `getRangeSlotCapacity` operation. */
        RangeSlotCapacity: {
            /** @description Resource Identifier. */
            resourceId?: string;
            /** @description Array of range capacities where each entry is for a specific capacity type. */
            capacities?: components["schemas"]["RangeCapacity"][];
            /** @description Next page token, if there are more pages. */
            nextPageToken?: string;
        };
        /** @description Range capacity entity where each entry has a capacity type and corresponding slots. */
        RangeCapacity: {
            capacityType?: components["schemas"]["CapacityType"];
            /** @description Array of capacity slots in range slot format. */
            slots?: components["schemas"]["RangeSlot"][];
        };
        /** @description Capacity slots represented in a format similar to availability rules. */
        RangeSlot: {
            /**
             * Format: date-time
             * @description Start date time of slot in ISO 8601 format with precision of seconds.
             */
            startDateTime?: string;
            /**
             * Format: date-time
             * @description End date time of slot in ISO 8601 format with precision of seconds.
             */
            endDateTime?: string;
            /**
             * Format: int32
             * @description Capacity of the slot.
             */
            capacity?: number;
        };
        /** @description The error response schema for the `getFixedSlotCapacity` operation. */
        FixedSlotCapacityErrors: {
            errors?: components["schemas"]["ErrorList"];
        };
        /** @description Response schema for the `getFixedSlotCapacity` operation. */
        FixedSlotCapacity: {
            /** @description Resource Identifier. */
            resourceId?: string;
            /**
             * Format: int32
             * @description The duration of each slot which is returned. This value will be a multiple of 5 and fall in the following range: 5 <= `slotDuration` <= 360.
             */
            slotDuration?: number;
            /** @description Array of capacity slots in fixed slot format. */
            capacities?: components["schemas"]["FixedSlot"][];
            /** @description Next page token, if there are more pages. */
            nextPageToken?: string;
        };
        /** @description In this slot format each slot only has the requested capacity types. This slot size is as specified by slot duration. */
        FixedSlot: {
            /**
             * Format: date-time
             * @description Start date time of slot in ISO 8601 format with precision of seconds.
             */
            startDateTime?: string;
            /**
             * Format: int32
             * @description Scheduled capacity corresponding to the slot. This capacity represents the originally allocated capacity as per resource schedule.
             */
            scheduledCapacity?: number;
            /**
             * Format: int32
             * @description Available capacity corresponding to the slot. This capacity represents the capacity available for allocation to reservations.
             */
            availableCapacity?: number;
            /**
             * Format: int32
             * @description Encumbered capacity corresponding to the slot. This capacity represents the capacity allocated for Amazon Jobs/Appointments/Orders.
             */
            encumberedCapacity?: number;
            /**
             * Format: int32
             * @description Reserved capacity corresponding to the slot. This capacity represents the capacity made unavailable due to events like Breaks/Leaves/Lunch.
             */
            reservedCapacity?: number;
        };
        /** @description Response schema for the `updateSchedule` operation. */
        UpdateScheduleResponse: {
            /** @description Contains the `UpdateScheduleRecords` for which the error/warning has occurred. */
            payload?: components["schemas"]["UpdateScheduleRecord"][];
            errors?: components["schemas"]["ErrorList"];
        };
        /** @description Input for set appointment fulfillment data operation. */
        SetAppointmentFulfillmentDataRequest: {
            fulfillmentTime?: components["schemas"]["FulfillmentTime"];
            appointmentResources?: components["schemas"]["AppointmentResources"];
            fulfillmentDocuments?: components["schemas"]["FulfillmentDocuments"];
        };
        /** @description Input for fulfillment time details */
        FulfillmentTime: {
            /**
             * Format: date-time
             * @description The date, time in UTC of the fulfillment start time in ISO 8601 format.
             */
            startTime?: string;
            /**
             * Format: date-time
             * @description The date, time in UTC of the fulfillment end time in ISO 8601 format.
             */
            endTime?: string;
        };
        /** @description List of documents captured during service appointment fulfillment. */
        FulfillmentDocuments: components["schemas"]["FulfillmentDocument"][];
        /** @description Document that captured during service appointment fulfillment that portrays proof of completion */
        FulfillmentDocument: {
            /** @description The identifier of the upload destination. Get this value by calling the `createServiceDocumentUploadDestination` operation of the Services API. */
            uploadDestinationId?: string;
            /** @description Sha256 hash of the file content. This value is used to determine if the file has been corrupted or tampered with during transit. */
            contentSha256?: string;
        };
        /** @description List of resources that performs or performed job appointment fulfillment. */
        AppointmentResources: components["schemas"]["AppointmentResource"][];
        /** @description The resource that performs or performed appointment fulfillment. */
        AppointmentResource: {
            /** @description The resource identifier. */
            resourceId?: string;
        };
        /** @description Response schema for the `createReservation` operation. */
        CreateReservationResponse: {
            payload?: components["schemas"]["CreateReservationRecord"];
            errors?: components["schemas"]["ErrorList"];
        };
        /** @description Response schema for the `updateReservation` operation. */
        UpdateReservationResponse: {
            payload?: components["schemas"]["UpdateReservationRecord"];
            errors?: components["schemas"]["ErrorList"];
        };
        /** @description Response schema for the `cancelReservation` operation. */
        CancelReservationResponse: {
            errors?: components["schemas"]["ErrorList"];
        };
        /**
         * @description The day of the week.
         * @enum {string}
         */
        DayOfWeek: "MONDAY" | "TUESDAY" | "WEDNESDAY" | "THURSDAY" | "FRIDAY" | "SATURDAY" | "SUNDAY";
        /** @description Repeated occurrence of an event in a time range. */
        Recurrence: {
            /**
             * Format: date-time
             * @description End time of the recurrence.
             */
            endTime: string;
            /** @description Days of the week when recurrence is valid. If the schedule is valid every Monday, input will only contain `MONDAY` in the list. */
            daysOfWeek?: components["schemas"]["DayOfWeek"][];
            /** @description Days of the month when recurrence is valid. */
            daysOfMonth?: number[];
        };
        /** @description `AvailabilityRecord` to represent the capacity of a resource over a time range. */
        AvailabilityRecord: {
            /**
             * Format: date-time
             * @description Denotes the time from when the resource is available in a day in ISO-8601 format.
             */
            startTime: string;
            /**
             * Format: date-time
             * @description Denotes the time till when the resource is available in a day in ISO-8601 format.
             */
            endTime: string;
            recurrence?: components["schemas"]["Recurrence"];
            /** @description Signifies the capacity of a resource which is available. */
            capacity?: number;
        };
        /** @description List of `AvailabilityRecord`s to represent the capacity of a resource over a time range. */
        AvailabilityRecords: components["schemas"]["AvailabilityRecord"][];
        /** @description Reservation object reduces the capacity of a resource. */
        Reservation: {
            /** @description Unique identifier for a reservation. If present, it is treated as an update reservation request and will update the corresponding reservation. Otherwise, it is treated as a new create reservation request. */
            reservationId?: string;
            /**
             * @description Type of reservation.
             * @enum {string}
             */
            type: "APPOINTMENT" | "TRAVEL" | "VACATION" | "BREAK" | "TRAINING";
            availability: components["schemas"]["AvailabilityRecord"];
        };
        /** @description `UpdateScheduleRecord` entity contains the `AvailabilityRecord` if there is an error/warning while performing the requested operation on it. */
        UpdateScheduleRecord: {
            availability?: components["schemas"]["AvailabilityRecord"];
            warnings?: components["schemas"]["WarningList"];
            errors?: components["schemas"]["ErrorList"];
        };
        /** @description `CreateReservationRecord` entity contains the `Reservation` if there is an error/warning while performing the requested operation on it, otherwise it will contain the new `reservationId`. */
        CreateReservationRecord: {
            reservation?: components["schemas"]["Reservation"];
            warnings?: components["schemas"]["WarningList"];
            errors?: components["schemas"]["ErrorList"];
        };
        /** @description `UpdateReservationRecord` entity contains the `Reservation` if there is an error/warning while performing the requested operation on it, otherwise it will contain the new `reservationId`. */
        UpdateReservationRecord: {
            reservation?: components["schemas"]["Reservation"];
            warnings?: components["schemas"]["WarningList"];
            errors?: components["schemas"]["ErrorList"];
        };
        /** @description Request schema for the `getRangeSlotCapacity` operation. This schema is used to define the time range and capacity types that are being queried. */
        RangeSlotCapacityQuery: {
            /** @description An array of capacity types which are being requested. Default value is `[SCHEDULED_CAPACITY]`. */
            capacityTypes?: components["schemas"]["CapacityType"][];
            /**
             * Format: date-time
             * @description Start date time from which the capacity slots are being requested in ISO 8601 format.
             */
            startDateTime: string;
            /**
             * Format: date-time
             * @description End date time up to which the capacity slots are being requested in ISO 8601 format.
             */
            endDateTime: string;
        };
        /** @description Request schema for the `getFixedSlotCapacity` operation. This schema is used to define the time range, capacity types and slot duration which are being queried. */
        FixedSlotCapacityQuery: {
            /** @description An array of capacity types which are being requested. Default value is `[SCHEDULED_CAPACITY]`. */
            capacityTypes?: components["schemas"]["CapacityType"][];
            /**
             * Format: int32
             * @description Size in which slots are being requested. This value should be a multiple of 5 and fall in the range: 5 <= `slotDuration` <= 360.
             */
            slotDuration?: number;
            /**
             * Format: date-time
             * @description Start date time from which the capacity slots are being requested in ISO 8601 format.
             */
            startDateTime: string;
            /**
             * Format: date-time
             * @description End date time up to which the capacity slots are being requested in ISO 8601 format.
             */
            endDateTime: string;
        };
        /** @description Request schema for the `updateSchedule` operation. */
        UpdateScheduleRequest: {
            schedules: components["schemas"]["AvailabilityRecords"];
        };
        /**
         * @description Type of capacity
         * @enum {string}
         */
        CapacityType: "SCHEDULED_CAPACITY" | "AVAILABLE_CAPACITY" | "ENCUMBERED_CAPACITY" | "RESERVED_CAPACITY";
        /** @description Request schema for the `createReservation` operation. */
        CreateReservationRequest: {
            /** @description Resource (store) identifier. */
            resourceId: string;
            reservation: components["schemas"]["Reservation"];
        };
        /** @description Request schema for the `updateReservation` operation. */
        UpdateReservationRequest: {
            /** @description Resource (store) identifier. */
            resourceId: string;
            reservation: components["schemas"]["Reservation"];
        };
        /** @description The response of fetching appointment slots based on service context. */
        GetAppointmentSlotsResponse: {
            payload?: components["schemas"]["AppointmentSlotReport"];
            errors?: components["schemas"]["ErrorList"];
        };
        /** @description Availability information as per the service context queried. */
        AppointmentSlotReport: {
            /**
             * @description Defines the type of slots.
             * @enum {string}
             */
            schedulingType?: "REAL_TIME_SCHEDULING" | "NON_REAL_TIME_SCHEDULING";
            /**
             * Format: date-time
             * @description Start Time from which the appointment slots are generated in ISO 8601 format.
             */
            startTime?: string;
            /**
             * Format: date-time
             * @description End Time up to which the appointment slots are generated in ISO 8601 format.
             */
            endTime?: string;
            /** @description A list of time windows along with associated capacity in which the service can be performed. */
            appointmentSlots?: components["schemas"]["AppointmentSlot"][];
        };
        /** @description A time window along with associated capacity in which the service can be performed. */
        AppointmentSlot: {
            /**
             * Format: date-time
             * @description Time window start time in ISO 8601 format.
             */
            startTime?: string;
            /**
             * Format: date-time
             * @description Time window end time in ISO 8601 format.
             */
            endTime?: string;
            /** @description Number of resources for which a slot can be reserved. */
            capacity?: number;
        };
        /** @description Input for to be uploaded document. */
        ServiceUploadDocument: {
            /**
             * @description The content type of the to-be-uploaded file
             * @enum {string}
             */
            contentType: "TIFF" | "JPG" | "PNG" | "JPEG" | "GIF" | "PDF";
            /**
             * Format: int64
             * @description The content length of the to-be-uploaded file
             */
            contentLength: number;
            /** @description An MD5 hash of the content to be submitted to the upload destination. This value is used to determine if the data has been corrupted or tampered with during transit. */
            contentMD5?: string;
        };
        /** @description The response schema for the `createServiceDocumentUploadDestination` operation. */
        CreateServiceDocumentUploadDestination: {
            payload?: components["schemas"]["ServiceDocumentUploadDestination"];
            errors?: components["schemas"]["ErrorList"];
        };
        /** @description Information about an upload destination. */
        ServiceDocumentUploadDestination: {
            /** @description The unique identifier to be used by APIs that reference the upload destination. */
            uploadDestinationId: string;
            /** @description The URL to which to upload the file. */
            url: string;
            encryptionDetails: components["schemas"]["EncryptionDetails"];
            /** @description The headers to include in the upload request. */
            headers?: Record<string, never>;
        };
        /** @description Encryption details for required client-side encryption and decryption of document contents. */
        EncryptionDetails: {
            /**
             * @description The encryption standard required to encrypt or decrypt the document contents.
             * @enum {string}
             */
            standard: "AES";
            /** @description The vector to encrypt or decrypt the document contents using Cipher Block Chaining (CBC). */
            initializationVector: string;
            /** @description The encryption key used to encrypt or decrypt the document contents. */
            key: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getServiceJobByServiceJobId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A service job identifier. */
                serviceJobId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success response. */
            200: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetServiceJobByServiceJobIdResponse"];
                };
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetServiceJobByServiceJobIdResponse"];
                };
            };
            /** @description Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetServiceJobByServiceJobIdResponse"];
                };
            };
            /** @description The resource specified does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetServiceJobByServiceJobIdResponse"];
                };
            };
            /** @description The request size exceeded the maximum accepted size. */
            413: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetServiceJobByServiceJobIdResponse"];
                };
            };
            /** @description The request payload is in an unsupported format. */
            415: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetServiceJobByServiceJobIdResponse"];
                };
            };
            /** @description Unprocessable Entity. Unable to process the contained instructions. */
            422: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetServiceJobByServiceJobIdResponse"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetServiceJobByServiceJobIdResponse"];
                };
            };
            /** @description An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetServiceJobByServiceJobIdResponse"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetServiceJobByServiceJobIdResponse"];
                };
            };
        };
    };
    cancelServiceJobByServiceJobId: {
        parameters: {
            query: {
                /** @description A cancel reason code that specifies the reason for cancelling a service job. */
                cancellationReasonCode: string;
            };
            header?: never;
            path: {
                /** @description An Amazon defined service job identifier. */
                serviceJobId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success response. */
            200: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CancelServiceJobByServiceJobIdResponse"];
                };
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CancelServiceJobByServiceJobIdResponse"];
                };
            };
            /** @description Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CancelServiceJobByServiceJobIdResponse"];
                };
            };
            /** @description The resource specified does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CancelServiceJobByServiceJobIdResponse"];
                };
            };
            /** @description The request size exceeded the maximum accepted size. */
            413: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CancelServiceJobByServiceJobIdResponse"];
                };
            };
            /** @description The request payload is in an unsupported format. */
            415: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CancelServiceJobByServiceJobIdResponse"];
                };
            };
            /** @description Unprocessable Entity. Unable to process the contained instructions. */
            422: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CancelServiceJobByServiceJobIdResponse"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CancelServiceJobByServiceJobIdResponse"];
                };
            };
            /** @description An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CancelServiceJobByServiceJobIdResponse"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CancelServiceJobByServiceJobIdResponse"];
                };
            };
        };
    };
    completeServiceJobByServiceJobId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description An Amazon defined service job identifier. */
                serviceJobId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success response. */
            200: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CompleteServiceJobByServiceJobIdResponse"];
                };
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CompleteServiceJobByServiceJobIdResponse"];
                };
            };
            /** @description Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CompleteServiceJobByServiceJobIdResponse"];
                };
            };
            /** @description The resource specified does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CompleteServiceJobByServiceJobIdResponse"];
                };
            };
            /** @description The request size exceeded the maximum accepted size. */
            413: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CompleteServiceJobByServiceJobIdResponse"];
                };
            };
            /** @description The request payload is in an unsupported format. */
            415: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CompleteServiceJobByServiceJobIdResponse"];
                };
            };
            /** @description Unprocessable Entity. Unable to process the contained instructions. */
            422: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CompleteServiceJobByServiceJobIdResponse"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CompleteServiceJobByServiceJobIdResponse"];
                };
            };
            /** @description An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CompleteServiceJobByServiceJobIdResponse"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CompleteServiceJobByServiceJobIdResponse"];
                };
            };
        };
    };
    getServiceJobs: {
        parameters: {
            query: {
                /** @description List of service order ids for the query you want to perform.Max values supported 20. */
                serviceOrderIds?: string[];
                /** @description A list of one or more job status by which to filter the list of jobs. */
                serviceJobStatus?: ("NOT_SERVICED" | "CANCELLED" | "COMPLETED" | "PENDING_SCHEDULE" | "NOT_FULFILLABLE" | "HOLD" | "PAYMENT_DECLINED")[];
                /** @description String returned in the response of your previous request. */
                pageToken?: string;
                /** @description A non-negative integer that indicates the maximum number of jobs to return in the list, Value must be 1 - 20. Default 20. */
                pageSize?: number;
                /** @description Sort fields on which you want to sort the output. */
                sortField?: "JOB_DATE" | "JOB_STATUS";
                /** @description Sort order for the query you want to perform. */
                sortOrder?: "ASC" | "DESC";
                /** @description A date used for selecting jobs created at or after a specified time. Must be in ISO 8601 format. Required if `LastUpdatedAfter` is not specified. Specifying both `CreatedAfter` and `LastUpdatedAfter` returns an error. */
                createdAfter?: string;
                /** @description A date used for selecting jobs created at or before a specified time. Must be in ISO 8601 format. */
                createdBefore?: string;
                /** @description A date used for selecting jobs updated at or after a specified time. Must be in ISO 8601 format. Required if `createdAfter` is not specified. Specifying both `CreatedAfter` and `LastUpdatedAfter` returns an error. */
                lastUpdatedAfter?: string;
                /** @description A date used for selecting jobs updated at or before a specified time. Must be in ISO 8601 format. */
                lastUpdatedBefore?: string;
                /** @description A date used for filtering jobs schedules at or after a specified time. Must be in ISO 8601 format. Schedule end date should not be earlier than schedule start date. */
                scheduleStartDate?: string;
                /** @description A date used for filtering jobs schedules at or before a specified time. Must be in ISO 8601 format. Schedule end date should not be earlier than schedule start date. */
                scheduleEndDate?: string;
                /** @description Used to select jobs that were placed in the specified marketplaces. */
                marketplaceIds: string[];
                /** @description List of Amazon Standard Identification Numbers (ASIN) of the items. Max values supported is 20. */
                asins?: string[];
                /** @description A defined set of related knowledge, skills, experience, tools, materials, and work processes common to service delivery for a set of products and/or service scenarios. Max values supported is 20. */
                requiredSkills?: string[];
                /** @description List of Amazon-defined identifiers for the region scope. Max values supported is 50. */
                storeIds?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success response. */
            200: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetServiceJobsResponse"];
                };
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetServiceJobsResponse"];
                };
            };
            /** @description Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetServiceJobsResponse"];
                };
            };
            /** @description The resource specified does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetServiceJobsResponse"];
                };
            };
            /** @description The request size exceeded the maximum accepted size. */
            413: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetServiceJobsResponse"];
                };
            };
            /** @description The request payload is in an unsupported format. */
            415: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetServiceJobsResponse"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetServiceJobsResponse"];
                };
            };
            /** @description An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetServiceJobsResponse"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetServiceJobsResponse"];
                };
            };
        };
    };
    addAppointmentForServiceJobByServiceJobId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description An Amazon defined service job identifier. */
                serviceJobId: string;
            };
            cookie?: never;
        };
        /** @description Add appointment operation input details. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["AddAppointmentRequest"];
            };
        };
        responses: {
            /** @description Success response. */
            200: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SetAppointmentResponse"];
                };
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SetAppointmentResponse"];
                };
            };
            /** @description Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SetAppointmentResponse"];
                };
            };
            /** @description The resource specified does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SetAppointmentResponse"];
                };
            };
            /** @description The request size exceeded the maximum accepted size. */
            413: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SetAppointmentResponse"];
                };
            };
            /** @description The request payload is in an unsupported format. */
            415: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SetAppointmentResponse"];
                };
            };
            /** @description Unprocessable Entity. Unable to process the contained instructions. */
            422: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SetAppointmentResponse"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SetAppointmentResponse"];
                };
            };
            /** @description Encountered an unexpected condition which prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SetAppointmentResponse"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SetAppointmentResponse"];
                };
            };
        };
    };
    rescheduleAppointmentForServiceJobByServiceJobId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description An Amazon defined service job identifier. */
                serviceJobId: string;
                /** @description An existing appointment identifier for the Service Job. */
                appointmentId: string;
            };
            cookie?: never;
        };
        /** @description Reschedule appointment operation input details. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["RescheduleAppointmentRequest"];
            };
        };
        responses: {
            /** @description Success response. */
            200: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SetAppointmentResponse"];
                };
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SetAppointmentResponse"];
                };
            };
            /** @description Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SetAppointmentResponse"];
                };
            };
            /** @description The resource specified does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SetAppointmentResponse"];
                };
            };
            /** @description The request size exceeded the maximum accepted size. */
            413: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SetAppointmentResponse"];
                };
            };
            /** @description The request payload is in an unsupported format. */
            415: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SetAppointmentResponse"];
                };
            };
            /** @description Unprocessable Entity. Unable to process the contained instructions. */
            422: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SetAppointmentResponse"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SetAppointmentResponse"];
                };
            };
            /** @description Encountered an unexpected condition which prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SetAppointmentResponse"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SetAppointmentResponse"];
                };
            };
        };
    };
    assignAppointmentResources: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description An Amazon-defined service job identifier. Get this value by calling the `getServiceJobs` operation of the Services API. */
                serviceJobId: string;
                /** @description An Amazon-defined identifier of active service job appointment. */
                appointmentId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AssignAppointmentResourcesRequest"];
            };
        };
        responses: {
            /** @description Success response. */
            200: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AssignAppointmentResourcesResponse"];
                };
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AssignAppointmentResourcesResponse"];
                };
            };
            /** @description Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AssignAppointmentResourcesResponse"];
                };
            };
            /** @description The resource specified does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AssignAppointmentResourcesResponse"];
                };
            };
            /** @description The request size exceeded the maximum accepted size. */
            413: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AssignAppointmentResourcesResponse"];
                };
            };
            /** @description The request payload is in an unsupported format. */
            415: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AssignAppointmentResourcesResponse"];
                };
            };
            /** @description Unprocessable Entity. Unable to process the contained instructions. */
            422: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AssignAppointmentResourcesResponse"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AssignAppointmentResourcesResponse"];
                };
            };
            /** @description An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AssignAppointmentResourcesResponse"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AssignAppointmentResourcesResponse"];
                };
            };
        };
    };
    setAppointmentFulfillmentData: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description An Amazon-defined service job identifier. Get this value by calling the `getServiceJobs` operation of the Services API. */
                serviceJobId: string;
                /** @description An Amazon-defined identifier of active service job appointment. */
                appointmentId: string;
            };
            cookie?: never;
        };
        /** @description Appointment fulfillment data collection details. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["SetAppointmentFulfillmentDataRequest"];
            };
        };
        responses: {
            /** @description Success response. */
            204: {
                headers: {
                    /** @description Unique request reference id. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description 403 can be caused for reasons like Access Denied, Unauthorized, Expired Token, Invalid Signature or Resource Not Found. */
            403: {
                headers: {
                    /** @description Unique request reference id. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description The resource specified does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference id. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description The request size exceeded the maximum accepted size. */
            413: {
                headers: {
                    /** @description Unique request reference id. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description The entity of the request is in a format not supported by the requested resource. */
            415: {
                headers: {
                    /** @description Unique request reference id. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description Unprocessable Entity. Unable to process the contained instructions. */
            422: {
                headers: {
                    /** @description Unique request reference id. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference id. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description Encountered an unexpected condition which prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference id. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference id. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
        };
    };
    getRangeSlotCapacity: {
        parameters: {
            query: {
                /** @description An identifier for the marketplace in which the resource operates. */
                marketplaceIds: string[];
                /** @description Next page token returned in the response of your previous request. */
                nextPageToken?: string;
            };
            header?: never;
            path: {
                /** @description Resource Identifier. */
                resourceId: string;
            };
            cookie?: never;
        };
        /** @description Request body. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["RangeSlotCapacityQuery"];
            };
        };
        responses: {
            /** @description Success response. */
            200: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RangeSlotCapacity"];
                };
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RangeSlotCapacityErrors"];
                };
            };
            /** @description The request's Authorization header is not formatted correctly or does not contain a valid token. */
            401: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RangeSlotCapacityErrors"];
                };
            };
            /** @description Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RangeSlotCapacityErrors"];
                };
            };
            /** @description The resource specified does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RangeSlotCapacityErrors"];
                };
            };
            /** @description The request size exceeded the maximum accepted size. */
            413: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RangeSlotCapacityErrors"];
                };
            };
            /** @description The request payload is in an unsupported format. */
            415: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RangeSlotCapacityErrors"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RangeSlotCapacityErrors"];
                };
            };
            /** @description An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RangeSlotCapacityErrors"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RangeSlotCapacityErrors"];
                };
            };
        };
    };
    getFixedSlotCapacity: {
        parameters: {
            query: {
                /** @description An identifier for the marketplace in which the resource operates. */
                marketplaceIds: string[];
                /** @description Next page token returned in the response of your previous request. */
                nextPageToken?: string;
            };
            header?: never;
            path: {
                /** @description Resource Identifier. */
                resourceId: string;
            };
            cookie?: never;
        };
        /** @description Request body. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["FixedSlotCapacityQuery"];
            };
        };
        responses: {
            /** @description Success response. */
            200: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FixedSlotCapacity"];
                };
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FixedSlotCapacityErrors"];
                };
            };
            /** @description The request's Authorization header is not formatted correctly or does not contain a valid token. */
            401: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FixedSlotCapacityErrors"];
                };
            };
            /** @description Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FixedSlotCapacityErrors"];
                };
            };
            /** @description The resource specified does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FixedSlotCapacityErrors"];
                };
            };
            /** @description The request size exceeded the maximum accepted size. */
            413: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FixedSlotCapacityErrors"];
                };
            };
            /** @description The request payload is in an unsupported format. */
            415: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FixedSlotCapacityErrors"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FixedSlotCapacityErrors"];
                };
            };
            /** @description An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FixedSlotCapacityErrors"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FixedSlotCapacityErrors"];
                };
            };
        };
    };
    updateSchedule: {
        parameters: {
            query: {
                /** @description An identifier for the marketplace in which the resource operates. */
                marketplaceIds: string[];
            };
            header?: never;
            path: {
                /** @description Resource (store) Identifier */
                resourceId: string;
            };
            cookie?: never;
        };
        /** @description Schedule details */
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateScheduleRequest"];
            };
        };
        responses: {
            /** @description Success response. */
            200: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateScheduleResponse"];
                };
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateScheduleResponse"];
                };
            };
            /** @description Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateScheduleResponse"];
                };
            };
            /** @description The resource specified does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateScheduleResponse"];
                };
            };
            /** @description The request size exceeded the maximum accepted size. */
            413: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateScheduleResponse"];
                };
            };
            /** @description The request payload is in an unsupported format. */
            415: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateScheduleResponse"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateScheduleResponse"];
                };
            };
            /** @description Encountered an unexpected condition which prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateScheduleResponse"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateScheduleResponse"];
                };
            };
        };
    };
    createReservation: {
        parameters: {
            query: {
                /** @description An identifier for the marketplace in which the resource operates. */
                marketplaceIds: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Reservation details */
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateReservationRequest"];
            };
        };
        responses: {
            /** @description Success response. */
            200: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateReservationResponse"];
                };
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateReservationResponse"];
                };
            };
            /** @description Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateReservationResponse"];
                };
            };
            /** @description The resource specified does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateReservationResponse"];
                };
            };
            /** @description The request size exceeded the maximum accepted size. */
            413: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateReservationResponse"];
                };
            };
            /** @description The request payload is in an unsupported format. */
            415: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateReservationResponse"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateReservationResponse"];
                };
            };
            /** @description Encountered an unexpected condition which prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateReservationResponse"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateReservationResponse"];
                };
            };
        };
    };
    updateReservation: {
        parameters: {
            query: {
                /** @description An identifier for the marketplace in which the resource operates. */
                marketplaceIds: string[];
            };
            header?: never;
            path: {
                /** @description Reservation Identifier */
                reservationId: string;
            };
            cookie?: never;
        };
        /** @description Reservation details */
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateReservationRequest"];
            };
        };
        responses: {
            /** @description Success response. */
            200: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateReservationResponse"];
                };
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateReservationResponse"];
                };
            };
            /** @description Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateReservationResponse"];
                };
            };
            /** @description The reservation specified does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateReservationResponse"];
                };
            };
            /** @description The request size exceeded the maximum accepted size. */
            413: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateReservationResponse"];
                };
            };
            /** @description The request payload is in an unsupported format. */
            415: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateReservationResponse"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateReservationResponse"];
                };
            };
            /** @description Encountered an unexpected condition which prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateReservationResponse"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateReservationResponse"];
                };
            };
        };
    };
    cancelReservation: {
        parameters: {
            query: {
                /** @description An identifier for the marketplace in which the resource operates. */
                marketplaceIds: string[];
            };
            header?: never;
            path: {
                /** @description Reservation Identifier */
                reservationId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success response. */
            204: {
                headers: {
                    /** @description Unique request reference id. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CancelReservationResponse"];
                };
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    /** @description Unique request reference id. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CancelReservationResponse"];
                };
            };
            /** @description 403 can be caused for reasons like Access Denied, Unauthorized, Expired Token, Invalid Signature or Resource Not Found. */
            403: {
                headers: {
                    /** @description Unique request reference id. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CancelReservationResponse"];
                };
            };
            /** @description The reservation specified does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference id. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CancelReservationResponse"];
                };
            };
            /** @description The request size exceeded the maximum accepted size. */
            413: {
                headers: {
                    /** @description Unique request reference id. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CancelReservationResponse"];
                };
            };
            /** @description The entity of the request is in a format not supported by the requested resource. */
            415: {
                headers: {
                    /** @description Unique request reference id. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CancelReservationResponse"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference id. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CancelReservationResponse"];
                };
            };
            /** @description Encountered an unexpected condition which prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference id. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CancelReservationResponse"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference id. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CancelReservationResponse"];
                };
            };
        };
    };
    getAppointmmentSlotsByJobId: {
        parameters: {
            query: {
                /** @description An identifier for the marketplace in which the resource operates. */
                marketplaceIds: string[];
                /** @description A time from which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If `startTime` is provided, `endTime` should also be provided. Default value is as per business configuration. */
                startTime?: string;
                /** @description A time up to which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If `endTime` is provided, `startTime` should also be provided. Default value is as per business configuration. Maximum range of appointment slots can be 90 days. */
                endTime?: string;
            };
            header?: never;
            path: {
                /** @description A service job identifier to retrive appointment slots for associated service. */
                serviceJobId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success response. */
            200: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAppointmentSlotsResponse"];
                };
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAppointmentSlotsResponse"];
                };
            };
            /** @description Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAppointmentSlotsResponse"];
                };
            };
            /** @description The resource specified does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAppointmentSlotsResponse"];
                };
            };
            /** @description The request payload is in an unsupported format. */
            415: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAppointmentSlotsResponse"];
                };
            };
            /** @description Unprocessable Entity. Unable to process the contained instructions. */
            422: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAppointmentSlotsResponse"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAppointmentSlotsResponse"];
                };
            };
            /** @description An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAppointmentSlotsResponse"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAppointmentSlotsResponse"];
                };
            };
        };
    };
    getAppointmentSlots: {
        parameters: {
            query: {
                /** @description ASIN associated with the service. */
                asin: string;
                /** @description Store identifier defining the region scope to retrive appointment slots. */
                storeId: string;
                /** @description An identifier for the marketplace for which appointment slots are queried */
                marketplaceIds: string[];
                /** @description A time from which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If `startTime` is provided, `endTime` should also be provided. Default value is as per business configuration. */
                startTime?: string;
                /** @description A time up to which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If `endTime` is provided, `startTime` should also be provided. Default value is as per business configuration. Maximum range of appointment slots can be 90 days. */
                endTime?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success response. */
            200: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAppointmentSlotsResponse"];
                };
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAppointmentSlotsResponse"];
                };
            };
            /** @description Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAppointmentSlotsResponse"];
                };
            };
            /** @description The resource specified does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAppointmentSlotsResponse"];
                };
            };
            /** @description The request payload is in an unsupported format. */
            415: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAppointmentSlotsResponse"];
                };
            };
            /** @description Unprocessable Entity. Unable to process the contained instructions. */
            422: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAppointmentSlotsResponse"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAppointmentSlotsResponse"];
                };
            };
            /** @description An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAppointmentSlotsResponse"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAppointmentSlotsResponse"];
                };
            };
        };
    };
    createServiceDocumentUploadDestination: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Upload document operation input details. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["ServiceUploadDocument"];
            };
        };
        responses: {
            /** @description Successfully created an upload destination for the given resource. */
            200: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-requestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateServiceDocumentUploadDestination"];
                };
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    /** @description Unique request reference id. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateServiceDocumentUploadDestination"];
                };
            };
            /** @description Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateServiceDocumentUploadDestination"];
                };
            };
            /** @description The resource specified does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference id. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateServiceDocumentUploadDestination"];
                };
            };
            /** @description The request size exceeded the maximum accepted size. */
            413: {
                headers: {
                    /** @description Unique request reference id. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateServiceDocumentUploadDestination"];
                };
            };
            /** @description The request's Content-Type header is invalid. */
            415: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-requestid"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateServiceDocumentUploadDestination"];
                };
            };
            /** @description Unprocessable Entity. Unable to process the contained instructions. */
            422: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateServiceDocumentUploadDestination"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference ID. */
                    "x-amzn-requestid"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateServiceDocumentUploadDestination"];
                };
            };
            /** @description An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateServiceDocumentUploadDestination"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference id. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateServiceDocumentUploadDestination"];
                };
            };
        };
    };
}
