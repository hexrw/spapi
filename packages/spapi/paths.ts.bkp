/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/authorization/v1/authorizationCode": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Returns the Login with Amazon (LWA) authorization code for an existing Amazon MWS authorization.
         * @description With the getAuthorizationCode operation, you can request a Login With Amazon (LWA) authorization code that will allow you to call a Selling Partner API on behalf of a seller who has already authorized you to call Amazon Marketplace Web Service (Amazon MWS). You specify a developer ID, an MWS auth token, and a seller ID. Taken together, these represent the Amazon MWS authorization that the seller previously granted you. The operation returns an LWA authorization code that can be exchanged for a refresh token and access token representing authorization to call the Selling Partner API on the seller's behalf. By using this API, sellers who have already authorized you for Amazon MWS do not need to re-authorize you for the Selling Partner API.
         *     **Usage Plan:**
         *     | Rate (requests per second) | Burst | | ---- | ---- | | 1 | 5 |
         *
         *     For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
         */
        get: operations["getAuthorizationCode"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/catalog/2022-04-01/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * searchCatalogItems
         * @description Search for and return a list of Amazon catalog items and associated information either by identifier or by keywords.
         *
         *     **Usage Plans:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 2 | 2 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may observe higher rate and burst values than those shown here. For more information, refer to the [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         */
        get: operations["searchCatalogItems"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/catalog/2022-04-01/items/{asin}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Retrieves details for an item in the Amazon catalog.
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 2 | 2 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may observe higher rate and burst values than those shown here. For more information, refer to the [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api). */
        get: operations["getCatalogItem"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/finances/v0/financialEventGroups": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Returns financial event groups for a given date range.
         * @description Returns financial event groups for a given date range. It may take up to 48 hours for orders to appear in your financial events.
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 0.5 | 30 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         */
        get: operations["listFinancialEventGroups"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/finances/v0/financialEventGroups/{eventGroupId}/financialEvents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns all financial events for the specified financial event group. It may take up to 48 hours for orders to appear in your financial events.
         *
         *     **Note:** This operation will only retrieve group's data for the past two years. If a request is submitted for data spanning more than two years, an empty response is returned.
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 0.5 | 30 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). */
        get: operations["listFinancialEventsByGroupId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/finances/v0/orders/{orderId}/financialEvents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns all financial events for the specified order. It may take up to 48 hours for orders to appear in your financial events.
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 0.5 | 30 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). */
        get: operations["listFinancialEventsByOrderId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/finances/v0/financialEvents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns financial events for the specified data range. It may take up to 48 hours for orders to appear in your financial events.
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 0.5 | 30 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). */
        get: operations["listFinancialEvents"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/listings/2021-08-01/items/{sellerId}/{sku}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * getListingsItem
         * @description Returns details about a listings item for a selling partner.
         *
         *     **Note:** The parameters associated with this operation may contain special characters that must be encoded to successfully call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 5 | 10 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         */
        get: operations["getListingsItem"];
        /** @description Creates a new or fully-updates an existing listings item for a selling partner.
         *
         *     **Note:** The parameters associated with this operation may contain special characters that must be encoded to successfully call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 5 | 10 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). */
        put: operations["putListingsItem"];
        post?: never;
        /** @description Delete a listings item for a selling partner.
         *
         *     **Note:** The parameters associated with this operation may contain special characters that must be encoded to successfully call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 5 | 10 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). */
        delete: operations["deleteListingsItem"];
        options?: never;
        head?: never;
        /** @description Partially update (patch) a listings item for a selling partner. Only top-level listings item attributes can be patched. Patching nested attributes is not supported.
         *
         *     **Note:** The parameters associated with this operation may contain special characters that must be encoded to successfully call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 5 | 10 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). */
        patch: operations["patchListingsItem"];
        trace?: never;
    };
    "/listings/2021-08-01/restrictions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns listing restrictions for an item in the Amazon Catalog.
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 5 | 10 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api). */
        get: operations["getListingsRestrictions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notifications/v1/subscriptions/{notificationType}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * getSubscription
         * @description Returns information about subscriptions of the specified notification type. You can use this API to get subscription information when you do not have a subscription identifier.
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 1 | 5 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         */
        get: operations["getSubscription"];
        put?: never;
        /**
         * createSubscription
         * @description Creates a subscription for the specified notification type to be delivered to the specified destination. Before you can subscribe, you must first create the destination by calling the createDestination operation.
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 1 | 5 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         */
        post: operations["createSubscription"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notifications/v1/subscriptions/{notificationType}/{subscriptionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * getSubscriptionById
         * @description Returns information about a subscription for the specified notification type. The getSubscriptionById API is grantless. For more information, see [Grantless operations](doc:grantless-operations) in the Selling Partner API Developer Guide.
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 1 | 5 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         */
        get: operations["getSubscriptionById"];
        put?: never;
        post?: never;
        /**
         * deleteSubscriptionById
         * @description Deletes the subscription indicated by the subscription identifier and notification type that you specify. The subscription identifier can be for any subscription associated with your application. After you successfully call this operation, notifications will stop being sent for the associated subscription. The deleteSubscriptionById API is grantless. For more information, see [Grantless operations](doc:grantless-operations) in the Selling Partner API Developer Guide.
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 1 | 5 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         */
        delete: operations["deleteSubscriptionById"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notifications/v1/destinations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * getDestinations
         * @description Returns information about all destinations. The getDestinations API is grantless. For more information, see [Grantless operations](doc:grantless-operations) in the Selling Partner API Developer Guide.
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 1 | 5 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         */
        get: operations["getDestinations"];
        put?: never;
        /**
         * createDestination
         * @description Creates a destination resource to receive notifications. The createDestination API is grantless. For more information, see [Grantless operations](doc:grantless-operations) in the Selling Partner API Developer Guide.
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 1 | 5 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         */
        post: operations["createDestination"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/notifications/v1/destinations/{destinationId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * getDestination
         * @description Returns information about the destination that you specify. The getDestination API is grantless. For more information, see [Grantless operations](doc:grantless-operations) in the Selling Partner API Developer Guide.
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 1 | 5 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         */
        get: operations["getDestination"];
        put?: never;
        post?: never;
        /**
         * deleteDestination
         * @description Deletes the destination that you specify. The deleteDestination API is grantless. For more information, see [Grantless operations](doc:grantless-operations) in the Selling Partner API Developer Guide.
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 1 | 5 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
         */
        delete: operations["deleteDestination"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orders/v0/orders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns orders created or updated during the time frame indicated by the specified parameters. You can also apply a range of filtering criteria to narrow the list of orders returned. If NextToken is present, that will be used to retrieve the orders instead of other criteria.
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 0.0167 | 20 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api). */
        get: operations["getOrders"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orders/v0/orders/{orderId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns the order that you specify.
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 0.0167 | 20 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api). */
        get: operations["getOrder"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orders/v0/orders/{orderId}/buyerInfo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns buyer information for the order that you specify.
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 0.0167 | 20 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api). */
        get: operations["getOrderBuyerInfo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orders/v0/orders/{orderId}/address": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns the shipping address for the order that you specify.
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 0.0167 | 20 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api). */
        get: operations["getOrderAddress"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orders/v0/orders/{orderId}/orderItems": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns detailed order item information for the order that you specify. If NextToken is provided, it's used to retrieve the next page of order items.
         *
         *     __Note__: When an order is in the Pending state (the order has been placed but payment has not been authorized), the getOrderItems operation does not return information about pricing, taxes, shipping charges, gift status or promotions for the order items in the order. After an order leaves the Pending state (this occurs when payment has been authorized) and enters the Unshipped, Partially Shipped, or Shipped state, the getOrderItems operation returns information about pricing, taxes, shipping charges, gift status and promotions for the order items in the order.
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 0.5 | 30 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api). */
        get: operations["getOrderItems"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orders/v0/orders/{orderId}/orderItems/buyerInfo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns buyer information for the order items in the order that you specify.
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 0.5 | 30 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api). */
        get: operations["getOrderItemsBuyerInfo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orders/v0/orders/{orderId}/shipment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Update the shipment status for an order that you specify.
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 5 | 15 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api). */
        post: operations["updateShipmentStatus"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orders/v0/orders/{orderId}/regulatedInfo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns regulated information for the order that you specify.
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 0.5 | 30 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api). */
        get: operations["getOrderRegulatedInfo"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Updates (approves or rejects) the verification status of an order containing regulated products.
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 0.5 | 30 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api). */
        patch: operations["updateVerificationStatus"];
        trace?: never;
    };
    "/orders/v0/orders/{orderId}/shipmentConfirmation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Updates the shipment confirmation status for a specified order.
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 2 | 10 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api). */
        post: operations["confirmShipment"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/products/fees/v0/listings/{SellerSKU}/feesEstimate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Returns the estimated fees for the item indicated by the specified seller SKU in the marketplace specified in the request body.
         *
         *     **Note:** The parameters associated with this operation may contain special characters that require URL encoding to call the API. To avoid errors with SKUs when encoding URLs, refer to [URL Encoding](https://developer-docs.amazon.com/sp-api/docs/url-encoding).
         *
         *     You can call `getMyFeesEstimateForSKU` for an item on behalf of a selling partner before the selling partner sets the item's price. The selling partner can then take any estimated fees into account. Each fees estimate request must include an original identifier. This identifier is included in the fees estimate so that you can correlate a fees estimate with the original request.
         *
         *     **Note:** This identifier value is used to identify an estimate. Actual costs may vary. Search "fees" in [Seller Central](https://sellercentral.amazon.com/) and consult the store-specific fee schedule for the most up-to-date information.
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 1 | 2 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api). */
        post: operations["getMyFeesEstimateForSKU"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/products/fees/v0/items/{Asin}/feesEstimate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Returns the estimated fees for the item indicated by the specified ASIN in the marketplace specified in the request body.
         *
         *     You can call `getMyFeesEstimateForASIN` for an item on behalf of a selling partner before the selling partner sets the item's price. The selling partner can then take estimated fees into account. Each fees request must include an original identifier. This identifier is included in the fees estimate so you can correlate a fees estimate with the original request.
         *
         *     **Note:** This identifier value is used to identify an estimate. Actual costs may vary. Search "fees" in [Seller Central](https://sellercentral.amazon.com/) and consult the store-specific fee schedule for the most up-to-date information.
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 1 | 2 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api). */
        post: operations["getMyFeesEstimateForASIN"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/products/fees/v0/feesEstimate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Returns the estimated fees for a list of products.
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 0.5 | 1 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api). */
        post: operations["getMyFeesEstimates"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/batches/products/pricing/2022-05-01/offer/featuredOfferExpectedPrice": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Returns the set of responses that correspond to the batched list of up to 40 requests defined in the request body. The response for each successful (HTTP status code 200) request in the set includes the computed listing price at or below which a seller can expect to become the featured offer (before applicable promotions). This is called the featured offer expected price (FOEP). Featured offer is not guaranteed, because competing offers may change, and different offers may be featured based on other factors, including fulfillment capabilities to a specific customer. The response to an unsuccessful request includes the available error text.
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 0.033 | 1 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api). */
        post: operations["getFeaturedOfferExpectedPriceBatch"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reports/2021-06-30/reports": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns report details for the reports that match the filters that you specify.
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 0.0222 | 10 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). */
        get: operations["getReports"];
        put?: never;
        /** @description Creates a report.
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 0.0167 | 15 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). */
        post: operations["createReport"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reports/2021-06-30/reports/{reportId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * getReport
         * @description Returns report details (including the reportDocumentId, if available) for the report that you specify.
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 2 | 15 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api).
         */
        get: operations["getReport"];
        put?: never;
        post?: never;
        /** @description Cancels the report that you specify. Only reports with processingStatus=IN_QUEUE can be cancelled. Cancelled reports are returned in subsequent calls to the getReport and getReports operations.
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 0.0222 | 10 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). */
        delete: operations["cancelReport"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reports/2021-06-30/schedules": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns report schedule details that match the filters that you specify.
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 0.0222 | 10 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). */
        get: operations["getReportSchedules"];
        put?: never;
        /** @description Creates a report schedule. If a report schedule with the same report type and marketplace IDs already exists, it will be cancelled and replaced with this one.
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 0.0222 | 10 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). */
        post: operations["createReportSchedule"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reports/2021-06-30/schedules/{reportScheduleId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns report schedule details for the report schedule that you specify.
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 0.0222 | 10 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). */
        get: operations["getReportSchedule"];
        put?: never;
        post?: never;
        /** @description Cancels the report schedule that you specify.
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 0.0222 | 10 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). */
        delete: operations["cancelReportSchedule"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/reports/2021-06-30/documents/{reportDocumentId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns the information required for retrieving a report document's contents.
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 0.0167 | 15 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). */
        get: operations["getReportDocument"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sales/v1/orderMetrics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns aggregated order metrics for given interval, broken down by granularity, for given buyer type.
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | .5 | 15 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api). */
        get: operations["getOrderMetrics"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/sellers/v1/marketplaceParticipations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns a list of marketplaces that the seller submitting the request can sell in and information about the seller's participation in those marketplaces.
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 0.016 | 15 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). */
        get: operations["getMarketplaceParticipations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service/v1/serviceJobs/{serviceJobId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Gets details of service job indicated by the provided `serviceJobID`.
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 20 | 40 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api). */
        get: operations["getServiceJobByServiceJobId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service/v1/serviceJobs/{serviceJobId}/cancellations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Cancels the service job indicated by the service job identifier specified.
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 5 | 20 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api). */
        put: operations["cancelServiceJobByServiceJobId"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service/v1/serviceJobs/{serviceJobId}/completions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Completes the service job indicated by the service job identifier specified.
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 5 | 20 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api). */
        put: operations["completeServiceJobByServiceJobId"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service/v1/serviceJobs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Gets service job details for the specified filter query.
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 10 | 40 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api). */
        get: operations["getServiceJobs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service/v1/serviceJobs/{serviceJobId}/appointments": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Adds an appointment to the service job indicated by the service job identifier specified.
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 5 | 20 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api). */
        post: operations["addAppointmentForServiceJobByServiceJobId"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service/v1/serviceJobs/{serviceJobId}/appointments/{appointmentId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Reschedules an appointment for the service job indicated by the service job identifier specified.
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 5 | 20 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api). */
        post: operations["rescheduleAppointmentForServiceJobByServiceJobId"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service/v1/serviceJobs/{serviceJobId}/appointments/{appointmentId}/resources": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Assigns new resource(s) or overwrite/update the existing one(s) to a service job appointment.
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 1 | 2 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api). */
        put: operations["assignAppointmentResources"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service/v1/serviceJobs/{serviceJobId}/appointments/{appointmentId}/fulfillment": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Updates the appointment fulfillment data related to a given `jobID` and `appointmentID`.
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 5 | 20 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api). */
        put: operations["setAppointmentFulfillmentData"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service/v1/serviceResources/{resourceId}/capacity/range": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Provides capacity slots in a format similar to availability records.
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 5 | 20 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api). */
        post: operations["getRangeSlotCapacity"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service/v1/serviceResources/{resourceId}/capacity/fixed": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Provides capacity in fixed-size slots.
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 5 | 20 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api). */
        post: operations["getFixedSlotCapacity"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service/v1/serviceResources/{resourceId}/schedules": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Update the schedule of the given resource.
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 5 | 20 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api). */
        put: operations["updateSchedule"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service/v1/reservation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Create a reservation.
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 5 | 20 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api). */
        post: operations["createReservation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service/v1/reservation/{reservationId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** @description Update a reservation.
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 5 | 20 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api). */
        put: operations["updateReservation"];
        post?: never;
        /** @description Cancel a reservation.
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 5 | 20 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api). */
        delete: operations["cancelReservation"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service/v1/serviceJobs/{serviceJobId}/appointmentSlots": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Gets appointment slots for the service associated with the service job id specified.
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 5 | 20 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api). */
        get: operations["getAppointmmentSlotsByJobId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service/v1/appointmentSlots": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Gets appointment slots as per the service context specified.
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 20 | 40 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api). */
        get: operations["getAppointmentSlots"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/service/v1/documents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Creates an upload destination.
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 5 | 20 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api). */
        post: operations["createServiceDocumentUploadDestination"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/tokens/2021-03-01/restrictedDataToken": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Returns a Restricted Data Token (RDT) for one or more restricted resources that you specify. A restricted resource is the HTTP method and path from a restricted operation that returns Personally Identifiable Information (PII), plus a dataElements value that indicates the type of PII requested. See the Tokens API Use Case Guide for a list of restricted operations. Use the RDT returned here as the access token in subsequent calls to the corresponding restricted operations.
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 1 | 10 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). */
        post: operations["createRestrictedDataToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description The response schema for the GetAuthorizationCode operation. */
        GetAuthorizationCodeResponse: {
            payload?: components["schemas"]["AuthorizationCode"];
            errors?: components["schemas"]["ErrorList"];
        };
        /** @description A Login with Amazon (LWA) authorization code. */
        AuthorizationCode: components["schemas"]["Error"];
        /** @description Error response returned when the request is unsuccessful. */
        Error: {
            /** @description An error code that identifies the type of error that occurred. */
            code: string;
            /** @description A message that describes the error condition in a human-readable form. */
            message: string;
            /** @description Additional details that can help the caller understand or fix the issue. */
            details?: string;
            /**
             * @description The type of error.
             * @enum {string}
             */
            errorLevel?: "ERROR" | "WARNING";
        };
        /** @description A list of error responses returned when a request is unsuccessful. */
        ErrorList: {
            errors: components["schemas"]["Error"][];
        };
        /** @description An item in the Amazon catalog. */
        Item: {
            asin: components["schemas"]["ItemAsin"];
            attributes?: components["schemas"]["ItemAttributes"];
            dimensions?: components["schemas"]["ItemDimensions"];
            identifiers?: components["schemas"]["ItemIdentifiers"];
            images?: components["schemas"]["ItemImages"];
            productTypes?: components["schemas"]["ItemProductTypes"];
            relationships?: components["schemas"]["ItemRelationships"];
            salesRanks?: components["schemas"]["ItemSalesRanks"];
            summaries?: components["schemas"]["ItemSummaries"];
            vendorDetails?: components["schemas"]["ItemVendorDetails"];
        };
        /** @description Amazon Standard Identification Number (ASIN) is the unique identifier for an item in the Amazon catalog. */
        ItemAsin: string;
        /** @description A JSON object that contains structured item attribute data keyed by attribute name. Catalog item attributes conform to the related product type definitions available in the Selling Partner API for Product Type Definitions. */
        ItemAttributes: Record<string, never>;
        /** @description Classification (browse node) associated with an Amazon catalog item. */
        ItemBrowseClassification: {
            /** @description Display name for the classification. */
            displayName: string;
            /** @description Identifier of the classification (browse node identifier). */
            classificationId: string;
        };
        /** @description Individual contributor to the creation of an item, such as an author or actor. */
        ItemContributor: {
            role: components["schemas"]["ItemContributorRole"];
            /** @description Name of the contributor, such as Jane Austen. */
            value: string;
        };
        /** @description Role of an individual contributor in the creation of an item, such as author or actor. */
        ItemContributorRole: {
            /** @description Display name of the role in the requested locale, such as Author or Actor. */
            displayName?: string;
            /** @description Role value for the Amazon catalog item, such as author or actor. */
            value: string;
        };
        /** @description Individual dimension value of an Amazon catalog item or item package. */
        Dimension: {
            /** @description Measurement unit of the dimension value. */
            unit?: string;
            /** @description Numeric dimension value. */
            value?: number;
        };
        /** @description Dimensions of an Amazon catalog item or item in its packaging. */
        Dimensions: {
            height?: components["schemas"]["Dimension"];
            length?: components["schemas"]["Dimension"];
            weight?: components["schemas"]["Dimension"];
            width?: components["schemas"]["Dimension"];
        };
        /** @description Array of dimensions associated with the item in the Amazon catalog by Amazon marketplace. */
        ItemDimensions: components["schemas"]["ItemDimensionsByMarketplace"][];
        /** @description Dimensions associated with the item in the Amazon catalog for the indicated Amazon marketplace. */
        ItemDimensionsByMarketplace: {
            /** @description Amazon marketplace identifier. */
            marketplaceId: string;
            item?: components["schemas"]["Dimensions"];
            package?: components["schemas"]["Dimensions"];
        };
        /** @description Identifiers associated with the item in the Amazon catalog, such as UPC and EAN identifiers. */
        ItemIdentifiers: components["schemas"]["ItemIdentifiersByMarketplace"][];
        /** @description Identifiers associated with the item in the Amazon catalog for the indicated Amazon marketplace. */
        ItemIdentifiersByMarketplace: {
            /** @description Amazon marketplace identifier. */
            marketplaceId: string;
            /** @description Identifiers associated with the item in the Amazon catalog for the indicated Amazon marketplace. */
            identifiers: components["schemas"]["ItemIdentifier"][];
        };
        /** @description Identifier associated with the item in the Amazon catalog, such as a UPC or EAN identifier. */
        ItemIdentifier: {
            /** @description Type of identifier, such as UPC, EAN, or ISBN. */
            identifierType: string;
            /** @description Identifier. */
            identifier: string;
        };
        /** @description Images for an item in the Amazon catalog. */
        ItemImages: components["schemas"]["ItemImagesByMarketplace"][];
        /** @description Images for an item in the Amazon catalog for the indicated Amazon marketplace. */
        ItemImagesByMarketplace: {
            /** @description Amazon marketplace identifier. */
            marketplaceId: string;
            /** @description Images for an item in the Amazon catalog for the indicated Amazon marketplace. */
            images: components["schemas"]["ItemImage"][];
        };
        /** @description Image for an item in the Amazon catalog. */
        ItemImage: {
            /**
             * @description Variant of the image, such as `MAIN` or `PT01`.
             * @example MAIN
             * @enum {string}
             */
            variant: "MAIN" | "PT01" | "PT02" | "PT03" | "PT04" | "PT05" | "PT06" | "PT07" | "PT08" | "SWCH";
            /** @description Link, or URL, for the image. */
            link: string;
            /** @description Height of the image in pixels. */
            height: number;
            /** @description Width of the image in pixels. */
            width: number;
        };
        /** @description Product types associated with the Amazon catalog item. */
        ItemProductTypes: components["schemas"]["ItemProductTypeByMarketplace"][];
        /** @description Product type associated with the Amazon catalog item for the indicated Amazon marketplace. */
        ItemProductTypeByMarketplace: {
            /** @description Amazon marketplace identifier. */
            marketplaceId?: string;
            /**
             * @description Name of the product type associated with the Amazon catalog item.
             * @example LUGGAGE
             */
            productType?: string;
        };
        /** @description Sales ranks of an Amazon catalog item. */
        ItemSalesRanks: components["schemas"]["ItemSalesRanksByMarketplace"][];
        /** @description Sales ranks of an Amazon catalog item for the indicated Amazon marketplace. */
        ItemSalesRanksByMarketplace: {
            /** @description Amazon marketplace identifier. */
            marketplaceId: string;
            /** @description Sales ranks of an Amazon catalog item for an Amazon marketplace by classification. */
            classificationRanks?: components["schemas"]["ItemClassificationSalesRank"][];
            /** @description Sales ranks of an Amazon catalog item for an Amazon marketplace by website display group. */
            displayGroupRanks?: components["schemas"]["ItemDisplayGroupSalesRank"][];
        };
        /** @description Sales rank of an Amazon catalog item by classification. */
        ItemClassificationSalesRank: {
            /** @description Identifier of the classification associated with the sales rank. */
            classificationId: string;
            /** @description Title, or name, of the sales rank. */
            title: string;
            /** @description Corresponding Amazon retail website link, or URL, for the sales rank. */
            link?: string;
            /** @description Sales rank value. */
            rank: number;
        };
        /** @description Sales rank of an Amazon catalog item by website display group. */
        ItemDisplayGroupSalesRank: {
            /** @description Name of the website display group associated with the sales rank */
            websiteDisplayGroup: string;
            /** @description Title, or name, of the sales rank. */
            title: string;
            /** @description Corresponding Amazon retail website link, or URL, for the sales rank. */
            link?: string;
            /** @description Sales rank value. */
            rank: number;
        };
        /** @description Summary details of an Amazon catalog item. */
        ItemSummaries: components["schemas"]["ItemSummaryByMarketplace"][];
        /** @description Summary details of an Amazon catalog item for the indicated Amazon marketplace. */
        ItemSummaryByMarketplace: {
            /** @description Amazon marketplace identifier. */
            marketplaceId: string;
            /** @description Identifies an Amazon catalog item is intended for an adult audience or is sexual in nature. */
            adultProduct?: boolean;
            /** @description Identifies an Amazon catalog item is autographed by a player or celebrity. */
            autographed?: boolean;
            /** @description Name of the brand associated with an Amazon catalog item. */
            brand?: string;
            browseClassification?: components["schemas"]["ItemBrowseClassification"];
            /** @description Name of the color associated with an Amazon catalog item. */
            color?: string;
            /** @description Individual contributors to the creation of an item, such as the authors or actors. */
            contributors?: components["schemas"]["ItemContributor"][];
            /**
             * @description Classification type associated with the Amazon catalog item.
             * @enum {string}
             */
            itemClassification?: "BASE_PRODUCT" | "OTHER" | "PRODUCT_BUNDLE" | "VARIATION_PARENT";
            /** @description Name, or title, associated with an Amazon catalog item. */
            itemName?: string;
            /** @description Name of the manufacturer associated with an Amazon catalog item. */
            manufacturer?: string;
            /** @description Identifies an Amazon catalog item is memorabilia valued for its connection with historical events, culture, or entertainment. */
            memorabilia?: boolean;
            /** @description Model number associated with an Amazon catalog item. */
            modelNumber?: string;
            /** @description Quantity of an Amazon catalog item in one package. */
            packageQuantity?: number;
            /** @description Part number associated with an Amazon catalog item. */
            partNumber?: string;
            /**
             * Format: date
             * @description First date on which an Amazon catalog item is shippable to customers.
             */
            releaseDate?: string;
            /** @description Name of the size associated with an Amazon catalog item. */
            size?: string;
            /** @description Name of the style associated with an Amazon catalog item. */
            style?: string;
            /** @description Identifies an Amazon catalog item is eligible for trade-in. */
            tradeInEligible?: boolean;
            /** @description Identifier of the website display group associated with an Amazon catalog item. */
            websiteDisplayGroup?: string;
            /** @description Display name of the website display group associated with an Amazon catalog item. */
            websiteDisplayGroupName?: string;
        };
        /** @description Variation theme indicating the combination of Amazon item catalog attributes that define the variation family. */
        ItemVariationTheme: {
            /** @description Names of the Amazon catalog item attributes associated with the variation theme. */
            attributes?: string[];
            /**
             * @description Variation theme indicating the combination of Amazon item catalog attributes that define the variation family.
             * @example COLOR_NAME/STYLE_NAME
             */
            theme?: string;
        };
        /** @description Relationships by marketplace for an Amazon catalog item (for example, variations). */
        ItemRelationships: components["schemas"]["ItemRelationshipsByMarketplace"][];
        /** @description Relationship details for the Amazon catalog item for the indicated Amazon marketplace. */
        ItemRelationshipsByMarketplace: {
            /** @description Amazon marketplace identifier. */
            marketplaceId: string;
            /** @description Relationships for the item. */
            relationships: components["schemas"]["ItemRelationship"][];
        };
        /** @description Relationship details for an Amazon catalog item. */
        ItemRelationship: {
            /** @description Identifiers (ASINs) of the related items that are children of this item. */
            childAsins?: string[];
            /** @description Identifiers (ASINs) of the related items that are parents of this item. */
            parentAsins?: string[];
            variationTheme?: components["schemas"]["ItemVariationTheme"];
            /**
             * @description Type of relationship.
             * @example VARIATION
             * @enum {string}
             */
            type: "VARIATION" | "PACKAGE_HIERARCHY";
        };
        /** @description Product category or subcategory associated with an Amazon catalog item. */
        ItemVendorDetailsCategory: {
            /** @description Display name of the product category or subcategory */
            displayName?: string;
            /** @description Value (code) of the product category or subcategory. */
            value?: string;
        };
        /** @description Vendor details associated with an Amazon catalog item. Vendor details are available to vendors only. */
        ItemVendorDetails: components["schemas"]["ItemVendorDetailsByMarketplace"][];
        /** @description Vendor details associated with an Amazon catalog item for the indicated Amazon marketplace. */
        ItemVendorDetailsByMarketplace: {
            /** @description Amazon marketplace identifier. */
            marketplaceId: string;
            /** @description Brand code associated with an Amazon catalog item. */
            brandCode?: string;
            /** @description Manufacturer code associated with an Amazon catalog item. */
            manufacturerCode?: string;
            /** @description Parent vendor code of the manufacturer code. */
            manufacturerCodeParent?: string;
            productCategory?: components["schemas"]["ItemVendorDetailsCategory"];
            /** @description Product group associated with an Amazon catalog item. */
            productGroup?: string;
            productSubcategory?: components["schemas"]["ItemVendorDetailsCategory"];
            /**
             * @description Replenishment category associated with an Amazon catalog item.
             * @enum {string}
             */
            replenishmentCategory?: "ALLOCATED" | "BASIC_REPLENISHMENT" | "IN_SEASON" | "LIMITED_REPLENISHMENT" | "MANUFACTURER_OUT_OF_STOCK" | "NEW_PRODUCT" | "NON_REPLENISHABLE" | "NON_STOCKUPABLE" | "OBSOLETE" | "PLANNED_REPLENISHMENT";
        };
        /** @description Items in the Amazon catalog and search related metadata. */
        ItemSearchResults: {
            /** @description For `identifiers`-based searches, the total number of Amazon catalog items found. For `keywords`-based searches, the estimated total number of Amazon catalog items matched by the search query (only results up to the page count limit will be returned per request regardless of the number found).
             *
             *     Note: The maximum number of items (ASINs) that can be returned and paged through is 1000. */
            numberOfResults: number;
            pagination: components["schemas"]["Pagination"];
            refinements: components["schemas"]["Refinements"];
            /** @description A list of items from the Amazon catalog. */
            items: components["schemas"]["Item"][];
        };
        /** @description When a request produces a response that exceeds the `pageSize`, pagination occurs. This means the response is divided into individual pages. To retrieve the next page or the previous page, you must pass the `nextToken` value or the `previousToken` value as the `pageToken` parameter in the next request. When you receive the last page, there will be no `nextToken` key in the pagination object. */
        Pagination: {
            /** @description A token that can be used to fetch the next page. */
            nextToken?: string;
            /** @description A token that can be used to fetch the previous page. */
            previousToken?: string;
        };
        /** @description Search refinements. */
        Refinements: {
            /** @description Brand search refinements. */
            brands: components["schemas"]["BrandRefinement"][];
            /** @description Classification search refinements. */
            classifications: components["schemas"]["ClassificationRefinement"][];
        };
        /** @description Description of a brand that can be used to get more fine-grained search results. */
        BrandRefinement: {
            /** @description The estimated number of results that would still be returned if refinement key applied. */
            numberOfResults: number;
            /** @description Brand name. For display and can be used as a search refinement. */
            brandName: string;
        };
        /** @description Description of a classification that can be used to get more fine-grained search results. */
        ClassificationRefinement: {
            /** @description The estimated number of results that would still be returned if refinement key applied. */
            numberOfResults: number;
            /** @description Display name for the classification. */
            displayName: string;
            /** @description Identifier for the classification that can be used for search refinement purposes. */
            classificationId: string;
        };
        /** @description An event related to an Adhoc Disbursement. */
        AdhocDisbursementEvent: {
            /** @description Indicates the type of transaction.
             *
             *     Example: "Disbursed to Amazon Gift Card balance" */
            TransactionType?: string;
            PostedDate?: components["schemas"]["Date"];
            /** @description The identifier for the transaction. */
            TransactionId?: string;
            TransactionAmount?: components["schemas"]["Currency"];
        };
        /** @description A list of `AdhocDisbursement` events. */
        AdhocDisbursementEventList: components["schemas"]["AdhocDisbursementEvent"][];
        /** @description An adjustment to the seller's account. */
        AdjustmentEvent: {
            /** @description The type of adjustment.
             *
             *     Possible values:
             *
             *     * FBAInventoryReimbursement - An FBA inventory reimbursement to a seller's account. This occurs if a seller's inventory is damaged.
             *
             *     * ReserveEvent - A reserve event that is generated at the time of a settlement period closing. This occurs when some money from a seller's account is held back.
             *
             *     * PostageBilling - The amount paid by a seller for shipping labels.
             *
             *     * PostageRefund - The reimbursement of shipping labels purchased for orders that were canceled or refunded.
             *
             *     * LostOrDamagedReimbursement - An Amazon Easy Ship reimbursement to a seller's account for a package that we lost or damaged.
             *
             *     * CanceledButPickedUpReimbursement - An Amazon Easy Ship reimbursement to a seller's account. This occurs when a package is picked up and the order is subsequently canceled. This value is used only in the India marketplace.
             *
             *     * ReimbursementClawback - An Amazon Easy Ship reimbursement clawback from a seller's account. This occurs when a prior reimbursement is reversed. This value is used only in the India marketplace.
             *
             *     * SellerRewards - An award credited to a seller's account for their participation in an offer in the Seller Rewards program. Applies only to the India marketplace. */
            AdjustmentType?: string;
            PostedDate?: components["schemas"]["Date"];
            AdjustmentAmount?: components["schemas"]["Currency"];
            AdjustmentItemList?: components["schemas"]["AdjustmentItemList"];
        };
        /** @description A list of adjustment event information for the seller's account. */
        AdjustmentEventList: components["schemas"]["AdjustmentEvent"][];
        /** @description An item in an adjustment to the seller's account. */
        AdjustmentItem: {
            /** @description Represents the number of units in the seller's inventory when the AdustmentType is FBAInventoryReimbursement. */
            Quantity?: string;
            PerUnitAmount?: components["schemas"]["Currency"];
            TotalAmount?: components["schemas"]["Currency"];
            /** @description The seller SKU of the item. The seller SKU is qualified by the seller's seller ID, which is included with every call to the Selling Partner API. */
            SellerSKU?: string;
            /** @description A unique identifier assigned to products stored in and fulfilled from a fulfillment center. */
            FnSKU?: string;
            /** @description A short description of the item. */
            ProductDescription?: string;
            /** @description The Amazon Standard Identification Number (ASIN) of the item. */
            ASIN?: string;
        };
        /** @description A list of information about items in an adjustment to the seller's account. */
        AdjustmentItemList: components["schemas"]["AdjustmentItem"][];
        /** @description An expense related to an affordability promotion. */
        AffordabilityExpenseEvent: {
            /** @description An Amazon-defined identifier for an order. */
            AmazonOrderId?: string;
            PostedDate?: components["schemas"]["Date"];
            /** @description An encrypted, Amazon-defined marketplace identifier. */
            MarketplaceId?: string;
            /** @description Indicates the type of transaction.
             *
             *     Possible values:
             *
             *     * Charge - For an affordability promotion expense.
             *
             *     * Refund - For an affordability promotion expense reversal. */
            TransactionType?: string;
            BaseExpense?: components["schemas"]["Currency"];
            TaxTypeCGST: components["schemas"]["Currency"];
            TaxTypeSGST: components["schemas"]["Currency"];
            TaxTypeIGST: components["schemas"]["Currency"];
            TotalExpense?: components["schemas"]["Currency"];
        };
        /** @description A list of expense information related to an affordability promotion. */
        AffordabilityExpenseEventList: components["schemas"]["AffordabilityExpenseEvent"][];
        BigDecimal: number;
        /** @description A charge on the seller's account.
         *
         *     Possible values:
         *
         *     * Principal - The selling price of the order item, equal to the selling price of the item multiplied by the quantity ordered.
         *
         *     * Tax - The tax collected by the seller on the Principal.
         *
         *     * MarketplaceFacilitatorTax-Principal - The tax withheld on the Principal.
         *
         *     * MarketplaceFacilitatorTax-Shipping - The tax withheld on the ShippingCharge.
         *
         *     * MarketplaceFacilitatorTax-Giftwrap - The tax withheld on the Giftwrap charge.
         *
         *     * MarketplaceFacilitatorTax-Other - The tax withheld on other miscellaneous charges.
         *
         *     * Discount - The promotional discount for an order item.
         *
         *     * TaxDiscount - The tax amount deducted for promotional rebates.
         *
         *     * CODItemCharge - The COD charge for an order item.
         *
         *     * CODItemTaxCharge - The tax collected by the seller on a CODItemCharge.
         *
         *     * CODOrderCharge - The COD charge for an order.
         *
         *     * CODOrderTaxCharge - The tax collected by the seller on a CODOrderCharge.
         *
         *     * CODShippingCharge - Shipping charges for a COD order.
         *
         *     * CODShippingTaxCharge - The tax collected by the seller on a CODShippingCharge.
         *
         *     * ShippingCharge - The shipping charge.
         *
         *     * ShippingTax - The tax collected by the seller on a ShippingCharge.
         *
         *     * Goodwill - The amount given to a buyer as a gesture of goodwill or to compensate for pain and suffering in the buying experience.
         *
         *     * Giftwrap - The gift wrap charge.
         *
         *     * GiftwrapTax - The tax collected by the seller on a Giftwrap charge.
         *
         *     * RestockingFee - The charge applied to the buyer when returning a product in certain categories.
         *
         *     * ReturnShipping - The amount given to the buyer to compensate for shipping the item back in the event we are at fault.
         *
         *     * PointsFee - The value of Amazon Points deducted from the refund if the buyer does not have enough Amazon Points to cover the deduction.
         *
         *     * GenericDeduction - A generic bad debt deduction.
         *
         *     * FreeReplacementReturnShipping - The compensation for return shipping when a buyer receives the wrong item, requests a free replacement, and returns the incorrect item.
         *
         *     * PaymentMethodFee - The fee collected for certain payment methods in certain marketplaces.
         *
         *     * ExportCharge - The export duty that is charged when an item is shipped to an international destination as part of the Amazon Global program.
         *
         *     * SAFE-TReimbursement - The SAFE-T claim amount for the item.
         *
         *     * TCS-CGST - Tax Collected at Source (TCS) for Central Goods and Services Tax (CGST).
         *
         *     * TCS-SGST - Tax Collected at Source for State Goods and Services Tax (SGST).
         *
         *     * TCS-IGST - Tax Collected at Source for Integrated Goods and Services Tax (IGST).
         *
         *     * TCS-UTGST - Tax Collected at Source for Union Territories Goods and Services Tax (UTGST). */
        ChargeComponent: {
            /** @description The type of charge. */
            ChargeType?: string;
            ChargeAmount?: components["schemas"]["Currency"];
        };
        /** @description A list of charge information on the seller's account. */
        ChargeComponentList: components["schemas"]["ChargeComponent"][];
        /** @description A payment instrument. */
        ChargeInstrument: {
            /** @description A short description of the charge instrument. */
            Description?: string;
            /** @description The account tail (trailing digits) of the charge instrument. */
            Tail?: string;
            Amount?: components["schemas"]["Currency"];
        };
        /** @description A list of payment instruments. */
        ChargeInstrumentList: components["schemas"]["ChargeInstrument"][];
        /** @description An event related to charge refund. */
        ChargeRefundEvent: {
            PostedDate?: components["schemas"]["Date"];
            /** @description The reason given for a charge refund.
             *
             *     Example: `SubscriptionFeeCorrection` */
            ReasonCode?: string;
            /** @description A description of the Reason Code.
             *
             *     Example: `SubscriptionFeeCorrection` */
            ReasonCodeDescription?: string;
            ChargeRefundTransactions?: components["schemas"]["ChargeRefundTransaction"];
        };
        /** @description A list of charge refund events. */
        ChargeRefundEventList: components["schemas"]["ChargeRefundEvent"][];
        /** @description The charge refund transaction. */
        ChargeRefundTransaction: {
            ChargeAmount?: components["schemas"]["Currency"];
            /** @description The type of charge. */
            ChargeType?: string;
        };
        /** @description An event related to coupon payments. */
        CouponPaymentEvent: {
            PostedDate?: components["schemas"]["Date"];
            /** @description A coupon identifier. */
            CouponId?: string;
            /** @description The description provided by the seller when they created the coupon. */
            SellerCouponDescription?: string;
            /**
             * Format: int64
             * @description The number of coupon clips or redemptions.
             */
            ClipOrRedemptionCount?: number;
            /** @description A payment event identifier. */
            PaymentEventId?: string;
            FeeComponent?: components["schemas"]["FeeComponent"];
            ChargeComponent?: components["schemas"]["ChargeComponent"];
            TotalAmount?: components["schemas"]["Currency"];
        };
        /** @description A list of coupon payment event information. */
        CouponPaymentEventList: components["schemas"]["CouponPaymentEvent"][];
        /** @description A currency type and amount. */
        Currency: {
            /** @description The three-digit currency code in ISO 4217 format. */
            CurrencyCode?: string;
            CurrencyAmount?: components["schemas"]["BigDecimal"];
        };
        /** Format: date-time */
        Date: string;
        /** @description A debt payment or debt adjustment. */
        DebtRecoveryEvent: {
            /** @description The debt recovery type.
             *
             *     Possible values:
             *
             *     * DebtPayment
             *
             *     * DebtPaymentFailure
             *
             *     *DebtAdjustment */
            DebtRecoveryType?: string;
            RecoveryAmount?: components["schemas"]["Currency"];
            OverPaymentCredit?: components["schemas"]["Currency"];
            DebtRecoveryItemList?: components["schemas"]["DebtRecoveryItemList"];
            ChargeInstrumentList?: components["schemas"]["ChargeInstrumentList"];
        };
        /** @description A list of debt recovery event information. */
        DebtRecoveryEventList: components["schemas"]["DebtRecoveryEvent"][];
        /** @description An item of a debt payment or debt adjustment. */
        DebtRecoveryItem: {
            RecoveryAmount?: components["schemas"]["Currency"];
            OriginalAmount?: components["schemas"]["Currency"];
            GroupBeginDate?: components["schemas"]["Date"];
            GroupEndDate?: components["schemas"]["Date"];
        };
        /** @description A list of debt recovery item information. */
        DebtRecoveryItemList: components["schemas"]["DebtRecoveryItem"][];
        /** @description A payment made directly to a seller. */
        DirectPayment: {
            /** @description The type of payment.
             *
             *     Possible values:
             *
             *     * StoredValueCardRevenue - The amount that is deducted from the seller's account because the seller received money through a stored value card.
             *
             *     * StoredValueCardRefund - The amount that Amazon returns to the seller if the order that is bought using a stored value card is refunded.
             *
             *     * PrivateLabelCreditCardRevenue - The amount that is deducted from the seller's account because the seller received money through a private label credit card offered by Amazon.
             *
             *     * PrivateLabelCreditCardRefund - The amount that Amazon returns to the seller if the order that is bought using a private label credit card offered by Amazon is refunded.
             *
             *     * CollectOnDeliveryRevenue - The COD amount that the seller collected directly from the buyer.
             *
             *     * CollectOnDeliveryRefund - The amount that Amazon refunds to the buyer if an order paid for by COD is refunded. */
            DirectPaymentType?: string;
            DirectPaymentAmount?: components["schemas"]["Currency"];
        };
        /** @description A list of direct payment information. */
        DirectPaymentList: components["schemas"]["DirectPayment"][];
        /** @description Failed ad hoc disbursement event list. */
        FailedAdhocDisbursementEventList: {
            /** @description The type of fund transfer.
             *
             *     Example "Refund" */
            FundsTransfersType?: string;
            /** @description The transfer identifier. */
            TransferId?: string;
            /** @description The disbursement identifier. */
            DisbursementId?: string;
            /** @description The type of payment for disbursement.
             *
             *     Example `CREDIT_CARD` */
            PaymentDisbursementType?: string;
            /** @description The status of the failed `AdhocDisbursement`.
             *
             *     Example `HARD_DECLINED` */
            Status?: string;
            TransferAmount?: components["schemas"]["Currency"];
            PostedDate?: components["schemas"]["Date"];
        };
        /** @description A payment event for Fulfillment by Amazon (FBA) inventory liquidation. This event is used only in the US marketplace. */
        FBALiquidationEvent: {
            PostedDate?: components["schemas"]["Date"];
            /** @description The identifier for the original removal order. */
            OriginalRemovalOrderId?: string;
            LiquidationProceedsAmount?: components["schemas"]["Currency"];
            LiquidationFeeAmount?: components["schemas"]["Currency"];
        };
        /** @description A list of FBA inventory liquidation payment events. */
        FBALiquidationEventList: components["schemas"]["FBALiquidationEvent"][];
        /** @description A fee associated with the event. */
        FeeComponent: {
            /** @description The type of fee. For more information about Selling on Amazon fees, see [Selling on Amazon Fee Schedule](https://sellercentral.amazon.com/gp/help/200336920) on Seller Central. For more information about Fulfillment by Amazon fees, see [FBA features, services and fees](https://sellercentral.amazon.com/gp/help/201074400) on Seller Central. */
            FeeType?: string;
            FeeAmount?: components["schemas"]["Currency"];
        };
        /** @description A list of fee component information. */
        FeeComponentList: components["schemas"]["FeeComponent"][];
        /** @description Information related to a financial event group. */
        FinancialEventGroup: {
            /** @description A unique identifier for the financial event group. */
            FinancialEventGroupId?: string;
            /** @description The processing status of the financial event group indicates whether the balance of the financial event group is settled.
             *
             *     Possible values:
             *
             *     * Open
             *
             *     * Closed */
            ProcessingStatus?: string;
            /** @description The status of the fund transfer. */
            FundTransferStatus?: string;
            OriginalTotal?: components["schemas"]["Currency"];
            ConvertedTotal?: components["schemas"]["Currency"];
            FundTransferDate?: components["schemas"]["Date"];
            /** @description The trace identifier used by sellers to look up transactions externally. */
            TraceId?: string;
            /** @description The account tail of the payment instrument. */
            AccountTail?: string;
            BeginningBalance?: components["schemas"]["Currency"];
            FinancialEventGroupStart?: components["schemas"]["Date"];
            FinancialEventGroupEnd?: components["schemas"]["Date"];
        };
        /** @description A list of financial event group information. */
        FinancialEventGroupList: components["schemas"]["FinancialEventGroup"][];
        /** @description Contains all information related to a financial event. */
        FinancialEvents: {
            ShipmentEventList?: components["schemas"]["ShipmentEventList"];
            ShipmentSettleEventList?: components["schemas"]["ShipmentSettleEventList"];
            RefundEventList?: components["schemas"]["ShipmentEventList"];
            GuaranteeClaimEventList?: components["schemas"]["ShipmentEventList"];
            ChargebackEventList?: components["schemas"]["ShipmentEventList"];
            PayWithAmazonEventList?: components["schemas"]["PayWithAmazonEventList"];
            ServiceProviderCreditEventList?: components["schemas"]["SolutionProviderCreditEventList"];
            RetrochargeEventList?: components["schemas"]["RetrochargeEventList"];
            RentalTransactionEventList?: components["schemas"]["RentalTransactionEventList"];
            ProductAdsPaymentEventList?: components["schemas"]["ProductAdsPaymentEventList"];
            ServiceFeeEventList?: components["schemas"]["ServiceFeeEventList"];
            SellerDealPaymentEventList?: components["schemas"]["SellerDealPaymentEventList"];
            DebtRecoveryEventList?: components["schemas"]["DebtRecoveryEventList"];
            LoanServicingEventList?: components["schemas"]["LoanServicingEventList"];
            AdjustmentEventList?: components["schemas"]["AdjustmentEventList"];
            SAFETReimbursementEventList?: components["schemas"]["SAFETReimbursementEventList"];
            SellerReviewEnrollmentPaymentEventList?: components["schemas"]["SellerReviewEnrollmentPaymentEventList"];
            FBALiquidationEventList?: components["schemas"]["FBALiquidationEventList"];
            CouponPaymentEventList?: components["schemas"]["CouponPaymentEventList"];
            ImagingServicesFeeEventList?: components["schemas"]["ImagingServicesFeeEventList"];
            NetworkComminglingTransactionEventList?: components["schemas"]["NetworkComminglingTransactionEventList"];
            AffordabilityExpenseEventList?: components["schemas"]["AffordabilityExpenseEventList"];
            AffordabilityExpenseReversalEventList?: components["schemas"]["AffordabilityExpenseEventList"];
            RemovalShipmentEventList?: components["schemas"]["RemovalShipmentEventList"];
            RemovalShipmentAdjustmentEventList?: components["schemas"]["RemovalShipmentAdjustmentEventList"];
            TrialShipmentEventList?: components["schemas"]["TrialShipmentEventList"];
            TDSReimbursementEventList?: components["schemas"]["TDSReimbursementEventList"];
            AdhocDisbursementEventList?: components["schemas"]["AdhocDisbursementEventList"];
            TaxWithholdingEventList?: components["schemas"]["TaxWithholdingEventList"];
            ChargeRefundEventList?: components["schemas"]["ChargeRefundEventList"];
            FailedAdhocDisbursementEventList?: components["schemas"]["FailedAdhocDisbursementEventList"];
            ValueAddedServiceChargeEventList?: components["schemas"]["ValueAddedServiceChargeEventList"];
            CapacityReservationBillingEventList?: components["schemas"]["CapacityReservationBillingEventList"];
        };
        /** @description A fee event related to Amazon Imaging services. */
        ImagingServicesFeeEvent: {
            /** @description The identifier for the imaging services request. */
            ImagingRequestBillingItemID?: string;
            /** @description The Amazon Standard Identification Number (ASIN) of the item for which the imaging service was requested. */
            ASIN?: string;
            PostedDate?: components["schemas"]["Date"];
            FeeList?: components["schemas"]["FeeComponentList"];
        };
        /** @description A list of fee events related to Amazon Imaging services. */
        ImagingServicesFeeEventList: components["schemas"]["ImagingServicesFeeEvent"][];
        /** @description The payload for the listFinancialEventGroups operation. */
        ListFinancialEventGroupsPayload: {
            /** @description When present and not empty, pass this string token in the next request to return the next response page. */
            NextToken?: string;
            FinancialEventGroupList?: components["schemas"]["FinancialEventGroupList"];
        };
        /** @description The response schema for the listFinancialEventGroups operation. */
        ListFinancialEventGroupsResponse: {
            payload?: components["schemas"]["ListFinancialEventGroupsPayload"];
            errors?: components["schemas"]["ErrorList"];
        };
        /** @description The payload for the listFinancialEvents operation. */
        ListFinancialEventsPayload: {
            /** @description When present and not empty, pass this string token in the next request to return the next response page. */
            NextToken?: string;
            FinancialEvents?: components["schemas"]["FinancialEvents"];
        };
        /** @description The response schema for the listFinancialEvents operation. */
        ListFinancialEventsResponse: {
            payload?: components["schemas"]["ListFinancialEventsPayload"];
            errors?: components["schemas"]["ErrorList"];
        };
        /** @description A loan advance, loan payment, or loan refund. */
        LoanServicingEvent: {
            LoanAmount?: components["schemas"]["Currency"];
            /** @description The type of event.
             *
             *     Possible values:
             *
             *     * LoanAdvance
             *
             *     * LoanPayment
             *
             *     * LoanRefund */
            SourceBusinessEventType?: string;
        };
        /** @description A list of loan servicing events. */
        LoanServicingEventList: components["schemas"]["LoanServicingEvent"][];
        /** @description A network commingling transaction event. */
        NetworkComminglingTransactionEvent: {
            /** @description The type of network item swap.
             *
             *     Possible values:
             *
             *     * NetCo - A Fulfillment by Amazon inventory pooling transaction. Available only in the India marketplace.
             *
             *     * ComminglingVAT - A commingling VAT transaction. Available only in the UK, Spain, France, Germany, and Italy marketplaces. */
            TransactionType?: string;
            PostedDate?: components["schemas"]["Date"];
            /** @description The identifier for the network item swap. */
            NetCoTransactionID?: string;
            /** @description The reason for the network item swap. */
            SwapReason?: string;
            /** @description The Amazon Standard Identification Number (ASIN) of the swapped item. */
            ASIN?: string;
            /** @description The marketplace in which the event took place. */
            MarketplaceId?: string;
            TaxExclusiveAmount?: components["schemas"]["Currency"];
            TaxAmount?: components["schemas"]["Currency"];
        };
        /** @description A list of network commingling transaction events. */
        NetworkComminglingTransactionEventList: components["schemas"]["NetworkComminglingTransactionEvent"][];
        /** @description An event related to the seller's Pay with Amazon account. */
        PayWithAmazonEvent: {
            /** @description An order identifier that is specified by the seller. */
            SellerOrderId?: string;
            TransactionPostedDate?: components["schemas"]["Date"];
            /** @description The type of business object. */
            BusinessObjectType?: string;
            /** @description The sales channel for the transaction. */
            SalesChannel?: string;
            Charge?: components["schemas"]["ChargeComponent"];
            FeeList?: components["schemas"]["FeeComponentList"];
            /** @description The type of payment.
             *
             *     Possible values:
             *
             *     * Sales */
            PaymentAmountType?: string;
            /** @description A short description of this payment event. */
            AmountDescription?: string;
            /** @description The fulfillment channel.
             *
             *     Possible values:
             *
             *     * AFN - Amazon Fulfillment Network (Fulfillment by Amazon)
             *
             *     * MFN - Merchant Fulfillment Network (self-fulfilled) */
            FulfillmentChannel?: string;
            /** @description The store name where the event occurred. */
            StoreName?: string;
        };
        /** @description A list of events related to the seller's Pay with Amazon account. */
        PayWithAmazonEventList: components["schemas"]["PayWithAmazonEvent"][];
        /** @description A Sponsored Products payment event. */
        ProductAdsPaymentEvent: {
            postedDate?: components["schemas"]["Date"];
            /** @description Indicates if the transaction is for a charge or a refund.
             *
             *     Possible values:
             *
             *     * charge - Charge
             *
             *     * refund - Refund */
            transactionType?: string;
            /** @description Identifier for the invoice that the transaction appears in. */
            invoiceId?: string;
            baseValue?: components["schemas"]["Currency"];
            taxValue?: components["schemas"]["Currency"];
            transactionValue?: components["schemas"]["Currency"];
        };
        /** @description A list of sponsored products payment events. */
        ProductAdsPaymentEventList: components["schemas"]["ProductAdsPaymentEvent"][];
        /** @description A promotion applied to an item. */
        Promotion: {
            /** @description The type of promotion. */
            PromotionType?: string;
            /** @description The seller-specified identifier for the promotion. */
            PromotionId?: string;
            PromotionAmount?: components["schemas"]["Currency"];
        };
        /** @description A list of promotions. */
        PromotionList: components["schemas"]["Promotion"][];
        /** @description A removal shipment event for a removal order. */
        RemovalShipmentEvent: {
            PostedDate?: components["schemas"]["Date"];
            /** @description The merchant removal orderId. */
            MerchantOrderId?: string;
            /** @description The identifier for the removal shipment order. */
            OrderId?: string;
            /** @description The type of removal order.
             *
             *     Possible values:
             *
             *     * WHOLESALE_LIQUIDATION */
            TransactionType?: string;
            RemovalShipmentItemList?: components["schemas"]["RemovalShipmentItemList"];
        };
        /** @description A list of removal shipment event information. */
        RemovalShipmentEventList: components["schemas"]["RemovalShipmentEvent"][];
        /** @description Item-level information for a removal shipment. */
        RemovalShipmentItem: {
            /** @description An identifier for an item in a removal shipment. */
            RemovalShipmentItemId?: string;
            /** @description The tax collection model applied to the item.
             *
             *     Possible values:
             *
             *     * MarketplaceFacilitator - Tax is withheld and remitted to the taxing authority by Amazon on behalf of the seller.
             *
             *     * Standard - Tax is paid to the seller and not remitted to the taxing authority by Amazon. */
            TaxCollectionModel?: string;
            /** @description The Amazon fulfillment network SKU for the item. */
            FulfillmentNetworkSKU?: string;
            /**
             * Format: int32
             * @description The quantity of the item.
             */
            Quantity?: number;
            Revenue?: components["schemas"]["Currency"];
            FeeAmount?: components["schemas"]["Currency"];
            TaxAmount?: components["schemas"]["Currency"];
            TaxWithheld?: components["schemas"]["Currency"];
        };
        /** @description A list of information about removal shipment items. */
        RemovalShipmentItemList: components["schemas"]["RemovalShipmentItem"][];
        /** @description A financial adjustment event for FBA liquidated inventory. A positive value indicates money owed to Amazon by the buyer (for example, when the charge was incorrectly calculated as less than it should be). A negative value indicates a full or partial refund owed to the buyer (for example, when the buyer receives damaged items or fewer items than ordered). */
        RemovalShipmentAdjustmentEvent: {
            PostedDate?: components["schemas"]["Date"];
            /** @description The unique identifier for the adjustment event. */
            AdjustmentEventId?: string;
            /** @description The merchant removal orderId. */
            MerchantOrderId?: string;
            /** @description The orderId for shipping inventory. */
            OrderId?: string;
            /** @description The type of removal order.
             *
             *     Possible values:
             *
             *     * WHOLESALE_LIQUIDATION. */
            TransactionType?: string;
            /** @description A comma-delimited list of Removal shipmentItemAdjustment details for FBA inventory. */
            RemovalShipmentItemAdjustmentList?: components["schemas"]["RemovalShipmentItemAdjustment"][];
        };
        /** @description A comma-delimited list of Removal shipmentAdjustment details for FBA inventory. */
        RemovalShipmentAdjustmentEventList: components["schemas"]["RemovalShipmentAdjustmentEvent"][];
        /** @description Item-level information for a removal shipment item adjustment. */
        RemovalShipmentItemAdjustment: {
            /** @description An identifier for an item in a removal shipment. */
            RemovalShipmentItemId?: string;
            /** @description The tax collection model applied to the item.
             *
             *     Possible values:
             *
             *     * MarketplaceFacilitator - Tax is withheld and remitted to the taxing authority by Amazon on behalf of the seller.
             *
             *     * Standard - Tax is paid to the seller and not remitted to the taxing authority by Amazon. */
            TaxCollectionModel?: string;
            /** @description The Amazon fulfillment network SKU for the item. */
            FulfillmentNetworkSKU?: string;
            /**
             * Format: int32
             * @description Adjusted quantity of removal shipmentItemAdjustment items.
             */
            AdjustedQuantity?: number;
            RevenueAdjustment?: components["schemas"]["Currency"];
            TaxAmountAdjustment?: components["schemas"]["Currency"];
            TaxWithheldAdjustment?: components["schemas"]["Currency"];
        };
        /** @description An event related to a rental transaction. */
        RentalTransactionEvent: {
            /** @description An Amazon-defined identifier for an order. */
            AmazonOrderId?: string;
            /** @description The type of rental event.
             *
             *     Possible values:
             *
             *     * RentalCustomerPayment-Buyout - Transaction type that represents when the customer wants to buy out a rented item.
             *
             *     * RentalCustomerPayment-Extension - Transaction type that represents when the customer wants to extend the rental period.
             *
             *     * RentalCustomerRefund-Buyout - Transaction type that represents when the customer requests a refund for the buyout of the rented item.
             *
             *     * RentalCustomerRefund-Extension - Transaction type that represents when the customer requests a refund over the extension on the rented item.
             *
             *     * RentalHandlingFee - Transaction type that represents the fee that Amazon charges sellers who rent through Amazon.
             *
             *     * RentalChargeFailureReimbursement - Transaction type that represents when Amazon sends money to the seller to compensate for a failed charge.
             *
             *     * RentalLostItemReimbursement - Transaction type that represents when Amazon sends money to the seller to compensate for a lost item. */
            RentalEventType?: string;
            /**
             * Format: int32
             * @description The number of days that the buyer extended an already rented item. This value is only returned for RentalCustomerPayment-Extension and RentalCustomerRefund-Extension events.
             */
            ExtensionLength?: number;
            PostedDate?: components["schemas"]["Date"];
            RentalChargeList?: components["schemas"]["ChargeComponentList"];
            RentalFeeList?: components["schemas"]["FeeComponentList"];
            /** @description The name of the marketplace. */
            MarketplaceName?: string;
            RentalInitialValue?: components["schemas"]["Currency"];
            RentalReimbursement?: components["schemas"]["Currency"];
            RentalTaxWithheldList?: components["schemas"]["TaxWithheldComponentList"];
        };
        /** @description A list of rental transaction event information. */
        RentalTransactionEventList: components["schemas"]["RentalTransactionEvent"][];
        /** @description A retrocharge or retrocharge reversal. */
        RetrochargeEvent: {
            /** @description The type of event.
             *
             *     Possible values:
             *
             *     * Retrocharge
             *
             *     * RetrochargeReversal */
            RetrochargeEventType?: string;
            /** @description An Amazon-defined identifier for an order. */
            AmazonOrderId?: string;
            PostedDate?: components["schemas"]["Date"];
            BaseTax?: components["schemas"]["Currency"];
            ShippingTax?: components["schemas"]["Currency"];
            /** @description The name of the marketplace where the retrocharge event occurred. */
            MarketplaceName?: string;
            RetrochargeTaxWithheldList?: components["schemas"]["TaxWithheldComponentList"];
        };
        /** @description A list of information about Retrocharge or RetrochargeReversal events. */
        RetrochargeEventList: components["schemas"]["RetrochargeEvent"][];
        /** @description A SAFE-T claim reimbursement on the seller's account. */
        SAFETReimbursementEvent: {
            PostedDate?: components["schemas"]["Date"];
            /** @description A SAFE-T claim identifier. */
            SAFETClaimId?: string;
            ReimbursedAmount?: components["schemas"]["Currency"];
            /** @description Indicates why the seller was reimbursed. */
            ReasonCode?: string;
            SAFETReimbursementItemList?: components["schemas"]["SAFETReimbursementItemList"];
        };
        /** @description A list of SAFETReimbursementEvents. */
        SAFETReimbursementEventList: components["schemas"]["SAFETReimbursementEvent"][];
        /** @description An item from a SAFE-T claim reimbursement. */
        SAFETReimbursementItem: {
            itemChargeList?: components["schemas"]["ChargeComponentList"];
            /** @description The description of the item as shown on the product detail page on the retail website. */
            productDescription?: string;
            /** @description The number of units of the item being reimbursed. */
            quantity?: string;
        };
        /** @description A list of SAFETReimbursementItems. */
        SAFETReimbursementItemList: components["schemas"]["SAFETReimbursementItem"][];
        /** @description An event linked to the payment of a fee related to the specified deal. */
        SellerDealPaymentEvent: {
            postedDate?: components["schemas"]["Date"];
            /** @description The unique identifier of the deal. */
            dealId?: string;
            /** @description The internal description of the deal. */
            dealDescription?: string;
            /** @description The type of event: SellerDealComplete. */
            eventType?: string;
            /** @description The type of fee: RunLightningDealFee. */
            feeType?: string;
            feeAmount?: components["schemas"]["Currency"];
            taxAmount?: components["schemas"]["Currency"];
            totalAmount?: components["schemas"]["Currency"];
        };
        /** @description A list of payment events for deal-related fees. */
        SellerDealPaymentEventList: components["schemas"]["SellerDealPaymentEvent"][];
        /** @description A fee payment event for the Early Reviewer Program. */
        SellerReviewEnrollmentPaymentEvent: {
            PostedDate?: components["schemas"]["Date"];
            /** @description An enrollment identifier. */
            EnrollmentId?: string;
            /** @description The Amazon Standard Identification Number (ASIN) of the item that was enrolled in the Early Reviewer Program. */
            ParentASIN?: string;
            FeeComponent?: components["schemas"]["FeeComponent"];
            ChargeComponent?: components["schemas"]["ChargeComponent"];
            TotalAmount?: components["schemas"]["Currency"];
        };
        /** @description A list of information about fee events for the Early Reviewer Program. */
        SellerReviewEnrollmentPaymentEventList: components["schemas"]["SellerReviewEnrollmentPaymentEvent"][];
        /** @description A service fee on the seller's account. */
        ServiceFeeEvent: {
            /** @description An Amazon-defined identifier for an order. */
            AmazonOrderId?: string;
            /** @description A short description of the service fee reason. */
            FeeReason?: string;
            FeeList?: components["schemas"]["FeeComponentList"];
            /** @description The seller SKU of the item. The seller SKU is qualified by the seller's seller ID, which is included with every call to the Selling Partner API. */
            SellerSKU?: string;
            /** @description A unique identifier assigned by Amazon to products stored in and fulfilled from an Amazon fulfillment center. */
            FnSKU?: string;
            /** @description A short description of the service fee event. */
            FeeDescription?: string;
            /** @description The Amazon Standard Identification Number (ASIN) of the item. */
            ASIN?: string;
        };
        /** @description A list of information about service fee events. */
        ServiceFeeEventList: components["schemas"]["ServiceFeeEvent"][];
        /** @description A shipment, refund, guarantee claim, or chargeback. */
        ShipmentEvent: {
            /** @description An Amazon-defined identifier for an order. */
            AmazonOrderId?: string;
            /** @description A seller-defined identifier for an order. */
            SellerOrderId?: string;
            /** @description The name of the marketplace where the event occurred. */
            MarketplaceName?: string;
            OrderChargeList?: components["schemas"]["ChargeComponentList"];
            OrderChargeAdjustmentList?: components["schemas"]["ChargeComponentList"];
            ShipmentFeeList?: components["schemas"]["FeeComponentList"];
            ShipmentFeeAdjustmentList?: components["schemas"]["FeeComponentList"];
            OrderFeeList?: components["schemas"]["FeeComponentList"];
            OrderFeeAdjustmentList?: components["schemas"]["FeeComponentList"];
            DirectPaymentList?: components["schemas"]["DirectPaymentList"];
            PostedDate?: components["schemas"]["Date"];
            ShipmentItemList?: components["schemas"]["ShipmentItemList"];
            ShipmentItemAdjustmentList?: components["schemas"]["ShipmentItemList"];
        };
        /** @description A list of shipment event information. */
        ShipmentEventList: components["schemas"]["ShipmentEvent"][];
        /** @description A list of `ShipmentEvent` items. */
        ShipmentSettleEventList: components["schemas"]["ShipmentEvent"][];
        /** @description An item of a shipment, refund, guarantee claim, or chargeback. */
        ShipmentItem: {
            /** @description The seller SKU of the item. The seller SKU is qualified by the seller's seller ID, which is included with every call to the Selling Partner API. */
            SellerSKU?: string;
            /** @description An Amazon-defined order item identifier. */
            OrderItemId?: string;
            /** @description An Amazon-defined order adjustment identifier defined for refunds, guarantee claims, and chargeback events. */
            OrderAdjustmentItemId?: string;
            /**
             * Format: int32
             * @description The number of items shipped.
             */
            QuantityShipped?: number;
            ItemChargeList?: components["schemas"]["ChargeComponentList"];
            ItemChargeAdjustmentList?: components["schemas"]["ChargeComponentList"];
            ItemFeeList?: components["schemas"]["FeeComponentList"];
            ItemFeeAdjustmentList?: components["schemas"]["FeeComponentList"];
            ItemTaxWithheldList?: components["schemas"]["TaxWithheldComponentList"];
            PromotionList?: components["schemas"]["PromotionList"];
            PromotionAdjustmentList?: components["schemas"]["PromotionList"];
            CostOfPointsGranted?: components["schemas"]["Currency"];
            CostOfPointsReturned?: components["schemas"]["Currency"];
        };
        /** @description A list of shipment items. */
        ShipmentItemList: components["schemas"]["ShipmentItem"][];
        /** @description A credit given to a solution provider. */
        SolutionProviderCreditEvent: {
            /** @description The transaction type. */
            ProviderTransactionType?: string;
            /** @description A seller-defined identifier for an order. */
            SellerOrderId?: string;
            /** @description The identifier of the marketplace where the order was placed. */
            MarketplaceId?: string;
            /** @description The two-letter country code of the country associated with the marketplace where the order was placed. */
            MarketplaceCountryCode?: string;
            /** @description The Amazon-defined identifier of the seller. */
            SellerId?: string;
            /** @description The store name where the payment event occurred. */
            SellerStoreName?: string;
            /** @description The Amazon-defined identifier of the solution provider. */
            ProviderId?: string;
            /** @description The store name where the payment event occurred. */
            ProviderStoreName?: string;
            TransactionAmount?: components["schemas"]["Currency"];
            TransactionCreationDate?: components["schemas"]["Date"];
        };
        /** @description A list of information about solution provider credits. */
        SolutionProviderCreditEventList: components["schemas"]["SolutionProviderCreditEvent"][];
        /** @description Period which taxwithholding on seller's account is calculated. */
        TaxWithholdingPeriod: {
            StartDate?: components["schemas"]["Date"];
            EndDate?: components["schemas"]["Date"];
        };
        /** @description A TaxWithholding event on seller's account. */
        TaxWithholdingEvent: {
            PostedDate?: components["schemas"]["Date"];
            BaseAmount?: components["schemas"]["Currency"];
            WithheldAmount?: components["schemas"]["Currency"];
            TaxWithholdingPeriod?: components["schemas"]["TaxWithholdingPeriod"];
        };
        /** @description A list of `TaxWithholding` events. */
        TaxWithholdingEventList: components["schemas"]["TaxWithholdingEvent"][];
        /** @description Information about the taxes withheld. */
        TaxWithheldComponent: {
            /** @description The tax collection model applied to the item.
             *
             *     Possible values:
             *
             *     * MarketplaceFacilitator - Tax is withheld and remitted to the taxing authority by Amazon on behalf of the seller.
             *
             *     * Standard - Tax is paid to the seller and not remitted to the taxing authority by Amazon. */
            TaxCollectionModel?: string;
            TaxesWithheld?: components["schemas"]["ChargeComponentList"];
        };
        /** @description A list of information about taxes withheld. */
        TaxWithheldComponentList: components["schemas"]["TaxWithheldComponent"][];
        /** @description An event related to a Tax-Deducted-at-Source (TDS) reimbursement. */
        TDSReimbursementEvent: {
            PostedDate?: components["schemas"]["Date"];
            /** @description The Tax-Deducted-at-Source (TDS) identifier. */
            TDSOrderId?: string;
            ReimbursedAmount?: components["schemas"]["Currency"];
        };
        /** @description A list of `TDSReimbursementEvent` items. */
        TDSReimbursementEventList: components["schemas"]["TDSReimbursementEvent"][];
        /** @description An event related to a trial shipment. */
        TrialShipmentEvent: {
            /** @description An Amazon-defined identifier for an order. */
            AmazonOrderId?: string;
            /** @description The identifier of the financial event group. */
            FinancialEventGroupId?: string;
            PostedDate?: components["schemas"]["Date"];
            /** @description The seller SKU of the item. The seller SKU is qualified by the seller's seller ID, which is included with every call to the Selling Partner API. */
            SKU?: string;
            FeeList?: components["schemas"]["FeeComponentList"];
        };
        /** @description A list of information about trial shipment financial events. */
        TrialShipmentEventList: components["schemas"]["TrialShipmentEvent"][];
        /** @description An event related to a value added service charge. */
        ValueAddedServiceChargeEventList: {
            /** @description Indicates the type of transaction.
             *
             *     Example: 'Other Support Service fees' */
            TransactionType?: string;
            PostedDate?: components["schemas"]["Date"];
            /** @description A short description of the service charge event. */
            Description?: string;
            TransactionAmount?: components["schemas"]["Currency"];
        };
        /** @description An event related to a capacity reservation billing charge. */
        CapacityReservationBillingEvent: {
            /** @description Indicates the type of transaction. For example, FBA Inventory Fee */
            TransactionType?: string;
            PostedDate?: components["schemas"]["Date"];
            /** @description A short description of the capacity reservation billing event. */
            Description?: string;
            TransactionAmount?: components["schemas"]["Currency"];
        };
        /** @description A list of `CapacityReservationBillingEvent` events. */
        CapacityReservationBillingEventList: components["schemas"]["CapacityReservationBillingEvent"][];
        /** @description Issues associated with the listings item. */
        ItemIssues: components["schemas"]["Issue"][];
        /** @description An issue with a listings item. */
        Issue: {
            /** @description An issue code that identifies the type of issue. */
            code: string;
            /** @description A message that describes the issue. */
            message: string;
            /**
             * @description The severity of the issue.
             * @enum {string}
             */
            severity: "ERROR" | "WARNING" | "INFO";
            /** @description Names of the attributes associated with the issue, if applicable. */
            attributeNames?: string[];
        };
        /** @description Offer details for the listings item. */
        ItemOffers: components["schemas"]["ItemOfferByMarketplace"][];
        /** @description Offer details of a listings item for an Amazon marketplace. */
        ItemOfferByMarketplace: {
            /** @description Amazon marketplace identifier. */
            marketplaceId: string;
            /**
             * @description Type of offer for the listings item.
             * @enum {string}
             */
            offerType: "B2C" | "B2B";
            price: components["schemas"]["Money"];
            points?: components["schemas"]["Points"];
        };
        /** @description Vendor procurement information for the listings item. */
        ItemProcurement: {
            costPrice: components["schemas"]["Money"];
        };
        /** @description Fulfillment availability details for the listings item. */
        FulfillmentAvailability: {
            /** @description Designates which fulfillment network will be used. */
            fulfillmentChannelCode: string;
            /** @description The quantity of the item you are making available for sale. */
            quantity?: number;
        };
        /** @description The currency type and the amount. */
        Money: {
            /** @description Three-digit currency code. In ISO 4217 format. */
            currencyCode: string;
            amount: components["schemas"]["Decimal"];
        };
        /** @description A decimal number with no loss of precision. Useful when precision loss is unnaceptable, as with currencies. Follows RFC7159 for number representation. */
        Decimal: string;
        /** @description The number of Amazon Points offered with the purchase of an item, and their monetary value. Note that the Points element is only returned in Japan (JP). */
        Points: {
            pointsNumber: number;
        };
        /** @description Individual JSON Patch operation for an HTTP PATCH request. */
        PatchOperation: {
            /**
             * @description Type of JSON Patch operation. Supported JSON Patch operations include add, replace, and delete. See <https://tools.ietf.org/html/rfc6902>.
             * @enum {string}
             */
            op: "add" | "replace" | "delete";
            /** @description JSON Pointer path of the element to patch. See <https://tools.ietf.org/html/rfc6902>. */
            path: string;
            /** @description JSON value to add, replace, or delete. */
            value?: Record<string, never>[];
        };
        /** @description The request body schema for the patchListingsItem operation. */
        ListingsItemPatchRequest: {
            /** @description The Amazon product type of the listings item. */
            productType: string;
            /** @description One or more JSON Patch operations to perform on the listings item. */
            patches: components["schemas"]["PatchOperation"][];
        };
        /** @description The request body schema for the putListingsItem operation. */
        ListingsItemPutRequest: {
            /** @description The Amazon product type of the listings item. */
            productType: string;
            /**
             * @description The name of the requirements set for the provided data.
             * @enum {string}
             */
            requirements?: "LISTING" | "LISTING_PRODUCT_ONLY" | "LISTING_OFFER_ONLY";
            /** @description JSON object containing structured listings item attribute data keyed by attribute name. */
            attributes: Record<string, never>;
        };
        /** @description Response containing the results of a submission to the Selling Partner API for Listings Items. */
        ListingsItemSubmissionResponse: {
            /** @description A selling partner provided identifier for an Amazon listing. */
            sku: string;
            /**
             * @description The status of the listings item submission.
             * @enum {string}
             */
            status: "ACCEPTED" | "INVALID";
            /** @description The unique identifier of the listings item submission. */
            submissionId: string;
            /** @description Listings item issues related to the listings item submission. */
            issues?: components["schemas"]["Issue"][];
        };
        /** @description A list of restrictions for the specified Amazon catalog item. */
        RestrictionList: {
            restrictions: components["schemas"]["Restriction"][];
        };
        /** @description A listing restriction, optionally qualified by a condition, with a list of reasons for the restriction. */
        Restriction: {
            /** @description A marketplace identifier. Identifies the Amazon marketplace where the restriction is enforced. */
            marketplaceId: string;
            /**
             * @description The condition that applies to the restriction.
             * @enum {string}
             */
            conditionType?: "new_new" | "new_open_box" | "new_oem" | "refurbished_refurbished" | "used_like_new" | "used_very_good" | "used_good" | "used_acceptable" | "collectible_like_new" | "collectible_very_good" | "collectible_good" | "collectible_acceptable" | "club_club";
            /** @description A list of reasons for the restriction. */
            reasons?: components["schemas"]["Reason"][];
        };
        /** @description A reason for the restriction, including path forward links that may allow Selling Partners to remove the restriction, if available. */
        Reason: {
            /** @description A message describing the reason for the restriction. */
            message: string;
            /**
             * @description A code indicating why the listing is restricted.
             * @enum {string}
             */
            reasonCode?: "APPROVAL_REQUIRED" | "ASIN_NOT_FOUND" | "NOT_ELIGIBLE";
            /** @description A list of path forward links that may allow Selling Partners to remove the restriction. */
            links?: components["schemas"]["Link"][];
        };
        /** @description A link to resources related to a listing restriction. */
        Link: {
            /**
             * Format: uri
             * @description The URI of the related resource.
             */
            resource: string;
            /**
             * @description The HTTP verb used to interact with the related resource.
             * @enum {string}
             */
            verb: "GET";
            /** @description The title of the related resource. */
            title?: string;
            /** @description The media type of the related resource. */
            type?: string;
        };
        /** @description Additional information passed to the subscription to control the processing of notifications. For example, you can use an `eventFilter` to customize your subscription to send notifications for only the specified marketplaceId's, or select the aggregation time period at which to send notifications (e.g. limit to one notification every five minutes for high frequency notifications). The specific features available vary depending on the notificationType.
         *
         *     This feature is currently only supported by the `ANY_OFFER_CHANGED` and `ORDER_CHANGE` notificationTypes. */
        ProcessingDirective: {
            eventFilter?: components["schemas"]["EventFilter"];
        };
        /** @description A notificationType specific filter. This object contains all of the currently available filters and properties that you can use to define a notificationType specific filter. */
        EventFilter: components["schemas"]["AggregationFilter"] & components["schemas"]["MarketplaceFilter"] & components["schemas"]["OrderChangeTypeFilter"] & {
            /**
             * @description An eventFilterType value that is supported by the specific notificationType. This is used by the subscription service to determine the type of event filter. Refer to the section of the [Notifications Use Case Guide](doc:notifications-api-v1-use-case-guide) that describes the specific notificationType to determine if an eventFilterType is supported.
             * @enum {string}
             */
            eventFilterType: "ANY_OFFER_CHANGED" | "ORDER_CHANGE";
        };
        /** @description Use this event filter to customize your subscription to send notifications for only the specified marketplaceId's. */
        MarketplaceFilter: {
            marketplaceIds?: components["schemas"]["MarketplaceIds"];
        };
        /** @description A list of marketplace identifiers to subscribe to (e.g. ATVPDKIKX0DER). To receive notifications in every marketplace, do not provide this list. */
        MarketplaceIds: string[];
        /** @description Use this filter to select the aggregation time period at which to send notifications (e.g. limit to one notification every five minutes for high frequency notifications). */
        AggregationFilter: {
            aggregationSettings?: components["schemas"]["AggregationSettings"];
        };
        /** @description A container that holds all of the necessary properties to configure the aggregation of notifications. */
        AggregationSettings: {
            aggregationTimePeriod: components["schemas"]["AggregationTimePeriod"];
        };
        /**
         * @description The supported aggregation time periods. For example, if FiveMinutes is the value chosen, and 50 price updates occur for an ASIN within 5 minutes, Amazon will send only two notifications; one for the first event, and then a subsequent notification 5 minutes later with the final end state of the data. The 48 interim events will be dropped.
         * @enum {string}
         */
        AggregationTimePeriod: "FiveMinutes" | "TenMinutes";
        /** @description Use this event filter to customize your subscription to send notifications for only the specified orderChangeType. */
        OrderChangeTypeFilter: {
            orderChangeTypes?: components["schemas"]["OrderChangeTypes"];
        };
        /** @description A list of order change types to subscribe to (e.g. BuyerRequestedChange). To receive notifications of all change types, do not provide this list. */
        OrderChangeTypes: components["schemas"]["OrderChangeTypeEnum"][];
        /**
         * @description The supported order change type of ORDER_CHANGE notification.
         * @enum {string}
         */
        OrderChangeTypeEnum: "OrderStatusChange" | "BuyerRequestedChange";
        /** @description Represents a subscription to receive notifications. */
        Subscription: {
            /** @description The subscription identifier generated when the subscription is created. */
            subscriptionId: string;
            /** @description The version of the payload object to be used in the notification. */
            payloadVersion: string;
            /** @description The identifier for the destination where notifications will be delivered. */
            destinationId: string;
            processingDirective?: components["schemas"]["ProcessingDirective"];
        };
        /** @description The response schema for the createSubscription operation. */
        CreateSubscriptionResponse: {
            payload?: components["schemas"]["Subscription"];
            errors?: components["schemas"]["ErrorList"];
        };
        /** @description The request schema for the createSubscription operation. */
        CreateSubscriptionRequest: {
            /** @description The version of the payload object to be used in the notification. */
            payloadVersion?: string;
            /** @description The identifier for the destination where notifications will be delivered. */
            destinationId?: string;
            processingDirective?: components["schemas"]["ProcessingDirective"];
        };
        /** @description The response schema for the getSubscriptionById operation. */
        GetSubscriptionByIdResponse: {
            payload?: components["schemas"]["Subscription"];
            errors?: components["schemas"]["ErrorList"];
        };
        /** @description The response schema for the getSubscription operation. */
        GetSubscriptionResponse: {
            payload?: components["schemas"]["Subscription"];
            errors?: components["schemas"]["ErrorList"];
        };
        /** @description The response schema for the deleteSubscriptionById operation. */
        DeleteSubscriptionByIdResponse: {
            errors?: components["schemas"]["ErrorList"];
        };
        /** @description A list of destinations. */
        DestinationList: components["schemas"]["Destination"][];
        /** @description Represents a destination created when you call the createDestination operation. */
        Destination: {
            /** @description The developer-defined name for this destination. */
            name: string;
            /** @description The destination identifier generated when you created the destination. */
            destinationId: string;
            resource: components["schemas"]["DestinationResource"];
        };
        /** @description The destination resource types. */
        DestinationResource: {
            sqs?: components["schemas"]["SqsResource"];
            eventBridge?: components["schemas"]["EventBridgeResource"];
        };
        /** @description The information required to create a destination resource. Applications should use one resource type (sqs or eventBridge) per destination. */
        DestinationResourceSpecification: {
            sqs?: components["schemas"]["SqsResource"];
            eventBridge?: components["schemas"]["EventBridgeResourceSpecification"];
        };
        /** @description The information required to create an Amazon Simple Queue Service (Amazon SQS) queue destination. */
        SqsResource: {
            /** @description The Amazon Resource Name (ARN) associated with the SQS queue. */
            arn: string;
        };
        /** @description The information required to create an Amazon EventBridge destination. */
        EventBridgeResourceSpecification: {
            /** @description The AWS region in which you will be receiving the notifications. */
            region: string;
            /** @description The identifier for the AWS account that is responsible for charges related to receiving notifications. */
            accountId: string;
        };
        /** @description Represents an Amazon EventBridge destination. */
        EventBridgeResource: {
            /** @description The name of the partner event source associated with the destination. */
            name: string;
            /** @description The AWS region in which you receive the notifications. For AWS regions that are supported in Amazon EventBridge, see https://docs.aws.amazon.com/general/latest/gr/ev.html. */
            region: string;
            /** @description The identifier for the AWS account that is responsible for charges related to receiving notifications. */
            accountId: string;
        };
        /** @description The request schema for the createDestination operation. */
        CreateDestinationRequest: {
            resourceSpecification: components["schemas"]["DestinationResourceSpecification"];
            /** @description A developer-defined name to help identify this destination. */
            name: string;
        };
        /** @description The response schema for the createDestination operation. */
        CreateDestinationResponse: {
            payload?: components["schemas"]["Destination"];
            errors?: components["schemas"]["ErrorList"];
        };
        /** @description The response schema for the getDestination operation. */
        GetDestinationResponse: {
            payload?: components["schemas"]["Destination"];
            errors?: components["schemas"]["ErrorList"];
        };
        /** @description The response schema for the getDestinations operation. */
        GetDestinationsResponse: {
            payload?: components["schemas"]["DestinationList"];
            errors?: components["schemas"]["ErrorList"];
        };
        /** @description The response schema for the deleteDestination operation. */
        DeleteDestinationResponse: {
            errors?: components["schemas"]["ErrorList"];
        };
        /** @description The request body for the updateShipmentStatus operation. */
        UpdateShipmentStatusRequest: {
            marketplaceId: components["schemas"]["MarketplaceId"];
            shipmentStatus: components["schemas"]["ShipmentStatus"];
            orderItems?: components["schemas"]["OrderItems"];
        };
        /** @description The request body for the updateVerificationStatus operation. */
        UpdateVerificationStatusRequest: {
            regulatedOrderVerificationStatus: components["schemas"]["UpdateVerificationStatusRequestBody"];
        };
        /** @description The updated values of the VerificationStatus field. */
        UpdateVerificationStatusRequestBody: {
            status: components["schemas"]["VerificationStatus"];
            /** @description The identifier for the order's regulated information reviewer. */
            externalReviewerId: string;
            /** @description The unique identifier for the rejection reason used for rejecting the order's regulated information. Only required if the new status is rejected. */
            rejectionReasonId?: string;
        };
        /** @description The unobfuscated marketplace identifier. */
        MarketplaceId: string;
        /**
         * @description The shipment status to apply.
         * @enum {string}
         */
        ShipmentStatus: "ReadyForPickup" | "PickedUp" | "RefusedPickup";
        /** @description For partial shipment status updates, the list of order items and quantities to be updated. */
        OrderItems: {
            /** @description The unique identifier of the order item. */
            orderItemId?: string;
            /** @description The quantity for which to update the shipment status. */
            quantity?: number;
        }[];
        /** @description The error response schema for the UpdateShipmentStatus operation. */
        UpdateShipmentStatusErrorResponse: {
            errors?: components["schemas"]["ErrorList"];
        };
        /** @description The error response schema for the UpdateVerificationStatus operation. */
        UpdateVerificationStatusErrorResponse: {
            errors?: components["schemas"]["ErrorList"];
        };
        /** @description The response schema for the getOrders operation. */
        GetOrdersResponse: {
            payload?: components["schemas"]["OrdersList"];
            errors?: components["schemas"]["ErrorList"];
        };
        /** @description The response schema for the getOrder operation. */
        GetOrderResponse: {
            payload?: components["schemas"]["Order"];
            errors?: components["schemas"]["ErrorList"];
        };
        /** @description The response schema for the getOrderBuyerInfo operation. */
        GetOrderBuyerInfoResponse: {
            payload?: components["schemas"]["OrderBuyerInfo"];
            errors?: components["schemas"]["ErrorList"];
        };
        /** @description The response schema for the getOrderRegulatedInfo operation. */
        GetOrderRegulatedInfoResponse: {
            payload?: components["schemas"]["OrderRegulatedInfo"];
            errors?: components["schemas"]["ErrorList"];
        };
        /** @description The response schema for the getOrderAddress operation. */
        GetOrderAddressResponse: {
            payload?: components["schemas"]["OrderAddress"];
            errors?: components["schemas"]["ErrorList"];
        };
        /** @description The response schema for the getOrderItems operation. */
        GetOrderItemsResponse: {
            payload?: components["schemas"]["OrderItemsList"];
            errors?: components["schemas"]["ErrorList"];
        };
        /** @description The response schema for the getOrderItemsBuyerInfo operation. */
        GetOrderItemsBuyerInfoResponse: {
            payload?: components["schemas"]["OrderItemsBuyerInfoList"];
            errors?: components["schemas"]["ErrorList"];
        };
        /** @description A list of orders along with additional information to make subsequent API calls. */
        OrdersList: {
            Orders: components["schemas"]["OrderList"];
            /** @description When present and not empty, pass this string token in the next request to return the next response page. */
            NextToken?: string;
            /** @description A date used for selecting orders that were last updated before (or at) a specified time. An update is defined as any change in order status, including the creation of a new order. Includes updates made by Amazon and by the seller. All dates must be in ISO 8601 format. */
            LastUpdatedBefore?: string;
            /** @description A date used for selecting orders created before (or at) a specified time. Only orders placed before the specified time are returned. The date must be in ISO 8601 format. */
            CreatedBefore?: string;
        };
        /** @description A list of orders. */
        OrderList: components["schemas"]["Order"][];
        /** @description Order information. */
        Order: {
            /** @description An Amazon-defined order identifier, in 3-7-7 format. */
            AmazonOrderId: string;
            /** @description A seller-defined order identifier. */
            SellerOrderId?: string;
            /** @description The date when the order was created. */
            PurchaseDate: string;
            /** @description The date when the order was last updated.
             *
             *     __Note__: LastUpdateDate is returned with an incorrect date for orders that were last updated before 2009-04-01. */
            LastUpdateDate: string;
            /**
             * @description The current order status.
             * @enum {string}
             */
            OrderStatus: "Pending" | "Unshipped" | "PartiallyShipped" | "Shipped" | "Canceled" | "Unfulfillable" | "InvoiceUnconfirmed" | "PendingAvailability";
            /**
             * @description Whether the order was fulfilled by Amazon (AFN) or by the seller (MFN).
             * @enum {string}
             */
            FulfillmentChannel?: "MFN" | "AFN";
            /** @description The sales channel of the first item in the order. */
            SalesChannel?: string;
            /** @description The order channel of the first item in the order. */
            OrderChannel?: string;
            /** @description The shipment service level of the order. */
            ShipServiceLevel?: string;
            OrderTotal?: components["schemas"]["Money"];
            /** @description The number of items shipped. */
            NumberOfItemsShipped?: number;
            /** @description The number of items unshipped. */
            NumberOfItemsUnshipped?: number;
            PaymentExecutionDetail?: components["schemas"]["PaymentExecutionDetailItemList"];
            /**
             * @description The payment method for the order. This property is limited to Cash On Delivery (COD) and Convenience Store (CVS) payment methods. Unless you need the specific COD payment information provided by the PaymentExecutionDetailItem object, we recommend using the PaymentMethodDetails property to get payment method information.
             * @enum {string}
             */
            PaymentMethod?: "COD" | "CVS" | "Other";
            PaymentMethodDetails?: components["schemas"]["PaymentMethodDetailItemList"];
            /** @description The identifier for the marketplace where the order was placed. */
            MarketplaceId?: string;
            /** @description The shipment service level category of the order.
             *
             *     Possible values: Expedited, FreeEconomy, NextDay, Priority, SameDay, SecondDay, Scheduled, Standard. */
            ShipmentServiceLevelCategory?: string;
            EasyShipShipmentStatus?: components["schemas"]["EasyShipShipmentStatus"];
            /** @description Custom ship label for Checkout by Amazon (CBA). */
            CbaDisplayableShippingLabel?: string;
            /**
             * @description The type of the order.
             * @enum {string}
             */
            OrderType?: "StandardOrder" | "LongLeadTimeOrder" | "Preorder" | "BackOrder" | "SourcingOnDemandOrder";
            /** @description The start of the time period within which you have committed to ship the order. In ISO 8601 date time format. Returned only for seller-fulfilled orders.
             *
             *     __Note__: EarliestShipDate might not be returned for orders placed before February 1, 2013. */
            EarliestShipDate?: string;
            /** @description The end of the time period within which you have committed to ship the order. In ISO 8601 date time format. Returned only for seller-fulfilled orders.
             *
             *     __Note__: LatestShipDate might not be returned for orders placed before February 1, 2013. */
            LatestShipDate?: string;
            /** @description The start of the time period within which you have committed to fulfill the order. In ISO 8601 date time format. Returned only for seller-fulfilled orders. */
            EarliestDeliveryDate?: string;
            /** @description The end of the time period within which you have committed to fulfill the order. In ISO 8601 date time format. Returned only for seller-fulfilled orders that do not have a PendingAvailability, Pending, or Canceled status. */
            LatestDeliveryDate?: string;
            /** @description When true, the order is an Amazon Business order. An Amazon Business order is an order where the buyer is a Verified Business Buyer. */
            IsBusinessOrder?: boolean;
            /** @description When true, the order is a seller-fulfilled Amazon Prime order. */
            IsPrime?: boolean;
            /** @description When true, the order has a Premium Shipping Service Level Agreement. For more information about Premium Shipping orders, see "Premium Shipping Options" in the Seller Central Help for your marketplace. */
            IsPremiumOrder?: boolean;
            /** @description When true, the order is a GlobalExpress order. */
            IsGlobalExpressEnabled?: boolean;
            /** @description The order ID value for the order that is being replaced. Returned only if IsReplacementOrder = true. */
            ReplacedOrderId?: string;
            /** @description When true, this is a replacement order. */
            IsReplacementOrder?: boolean;
            /** @description Indicates the date by which the seller must respond to the buyer with an estimated ship date. Returned only for Sourcing on Demand orders. */
            PromiseResponseDueDate?: string;
            /** @description When true, the estimated ship date is set for the order. Returned only for Sourcing on Demand orders. */
            IsEstimatedShipDateSet?: boolean;
            /** @description When true, the item within this order was bought and re-sold by Amazon Business EU SARL (ABEU). By buying and instantly re-selling your items, ABEU becomes the seller of record, making your inventory available for sale to customers who would not otherwise purchase from a third-party seller. */
            IsSoldByAB?: boolean;
            /** @description When true, the item within this order was bought and re-sold by Amazon Business EU SARL (ABEU). By buying and instantly re-selling your items, ABEU becomes the seller of record, making your inventory available for sale to customers who would not otherwise purchase from a third-party seller. */
            IsIBA?: boolean;
            DefaultShipFromLocationAddress?: components["schemas"]["Address"];
            /**
             * @description The buyer's invoicing preference. Available only in the TR marketplace.
             * @enum {string}
             */
            BuyerInvoicePreference?: "INDIVIDUAL" | "BUSINESS";
            BuyerTaxInformation?: components["schemas"]["BuyerTaxInformation"];
            FulfillmentInstruction?: components["schemas"]["FulfillmentInstruction"];
            /** @description When true, this order is marked to be picked up from a store rather than delivered. */
            IsISPU?: boolean;
            /** @description When true, this order is marked to be delivered to an Access Point. The access location is chosen by the customer. Access Points include Amazon Hub Lockers, Amazon Hub Counters, and pickup points operated by carriers. */
            IsAccessPointOrder?: boolean;
            MarketplaceTaxInfo?: components["schemas"]["MarketplaceTaxInfo"];
            /** @description The seller’s friendly name registered in the marketplace. */
            SellerDisplayName?: string;
            ShippingAddress?: components["schemas"]["Address"];
            BuyerInfo?: components["schemas"]["BuyerInfo"];
            AutomatedShippingSettings?: components["schemas"]["AutomatedShippingSettings"];
            /** @description Whether the order contains regulated items which may require additional approval steps before being fulfilled. */
            HasRegulatedItems?: boolean;
            ElectronicInvoiceStatus?: components["schemas"]["ElectronicInvoiceStatus"];
        };
        /** @description Buyer information for an order. */
        OrderBuyerInfo: {
            /** @description An Amazon-defined order identifier, in 3-7-7 format. */
            AmazonOrderId: string;
            /** @description The anonymized email address of the buyer. */
            BuyerEmail?: string;
            /** @description The buyer name or the recipient name. */
            BuyerName?: string;
            /** @description The county of the buyer. */
            BuyerCounty?: string;
            BuyerTaxInfo?: components["schemas"]["BuyerTaxInfo"];
            /** @description The purchase order (PO) number entered by the buyer at checkout. Returned only for orders where the buyer entered a PO number at checkout. */
            PurchaseOrderNumber?: string;
        };
        /** @description The order's regulated information along with its verification status. */
        OrderRegulatedInfo: {
            /** @description An Amazon-defined order identifier, in 3-7-7 format. */
            AmazonOrderId: string;
            RegulatedInformation: components["schemas"]["RegulatedInformation"];
            /** @description When true, the order requires attaching a dosage information label when shipped. */
            RequiresDosageLabel: boolean;
            RegulatedOrderVerificationStatus: components["schemas"]["RegulatedOrderVerificationStatus"];
        };
        /** @description The verification status of the order along with associated approval or rejection metadata. */
        RegulatedOrderVerificationStatus: {
            Status: components["schemas"]["VerificationStatus"];
            /** @description When true, the regulated information provided in the order requires a review by the merchant. */
            RequiresMerchantAction: boolean;
            /** @description A list of valid rejection reasons that may be used to reject the order's regulated information. */
            ValidRejectionReasons: components["schemas"]["RejectionReason"][];
            RejectionReason?: components["schemas"]["RejectionReason"];
            /** @description The date the order was reviewed. In ISO 8601 date time format. */
            ReviewDate?: string;
            /** @description The identifier for the order's regulated information reviewer. */
            ExternalReviewerId?: string;
        };
        /** @description The reason for rejecting the order's regulated information. Not present if the order isn't rejected. */
        RejectionReason: {
            /** @description The unique identifier for the rejection reason. */
            RejectionReasonId: string;
            /** @description The description of this rejection reason. */
            RejectionReasonDescription: string;
        };
        /**
         * @description The verification status of the order.
         * @enum {string}
         */
        VerificationStatus: "Pending" | "Approved" | "Rejected" | "Expired" | "Cancelled";
        /** @description The regulated information collected during purchase and used to verify the order. */
        RegulatedInformation: {
            /** @description A list of regulated information fields as collected from the regulatory form. */
            Fields: components["schemas"]["RegulatedInformationField"][];
        };
        /** @description A field collected from the regulatory form. */
        RegulatedInformationField: {
            /** @description The unique identifier for the field. */
            FieldId: string;
            /** @description The name for the field. */
            FieldLabel: string;
            /**
             * @description The type of field.
             * @enum {string}
             */
            FieldType: "Text" | "FileAttachment";
            /** @description The content of the field as collected in regulatory form. Note that FileAttachment type fields will contain a URL to download the attachment here. */
            FieldValue: string;
        };
        /** @description The shipping address for the order. */
        OrderAddress: {
            /** @description An Amazon-defined order identifier, in 3-7-7 format. */
            AmazonOrderId: string;
            /** @description Company Name of the Buyer. */
            BuyerCompanyName?: string;
            ShippingAddress?: components["schemas"]["Address"];
            DeliveryPreferences?: components["schemas"]["DeliveryPreferences"];
        };
        /** @description The shipping address for the order. */
        Address: {
            /** @description The name. */
            Name: string;
            /** @description The street address. */
            AddressLine1?: string;
            /** @description Additional street address information, if required. */
            AddressLine2?: string;
            /** @description Additional street address information, if required. */
            AddressLine3?: string;
            /** @description The city  */
            City?: string;
            /** @description The county. */
            County?: string;
            /** @description The district. */
            District?: string;
            /** @description The state or region. */
            StateOrRegion?: string;
            /** @description The municipality. */
            Municipality?: string;
            /** @description The postal code. */
            PostalCode?: string;
            /** @description The country code. A two-character country code, in ISO 3166-1 alpha-2 format. */
            CountryCode?: string;
            /** @description The phone number. Not returned for Fulfillment by Amazon (FBA) orders. */
            Phone?: string;
            /**
             * @description The address type of the shipping address.
             * @enum {string}
             */
            AddressType?: "Residential" | "Commercial";
        };
        /** @description Contains all of the delivery instructions provided by the customer for the shipping address. */
        DeliveryPreferences: {
            /** @description Drop-off location selected by the customer. */
            DropOffLocation?: string;
            PreferredDeliveryTime?: components["schemas"]["PreferredDeliveryTime"];
            /** @description Enumerated list of miscellaneous delivery attributes associated with the shipping address. */
            OtherAttributes?: components["schemas"]["OtherDeliveryAttributes"][];
            /** @description Building instructions, nearby landmark or navigation instructions. */
            AddressInstructions?: string;
        };
        /** @description The time window when the delivery is preferred. */
        PreferredDeliveryTime: {
            /** @description Business hours when the business is open for deliveries. */
            BusinessHours?: components["schemas"]["BusinessHours"][];
            /** @description Dates when the business is closed in the next 30 days. */
            ExceptionDates?: components["schemas"]["ExceptionDates"][];
        };
        /** @description Business days and hours when the destination is open for deliveries. */
        BusinessHours: {
            /**
             * @description Day of the week.
             * @enum {string}
             */
            DayOfWeek?: "SUN" | "MON" | "TUE" | "WED" | "THU" | "FRI" | "SAT";
            /** @description Time window during the day when the business is open. */
            OpenIntervals?: components["schemas"]["OpenInterval"][];
        };
        /** @description Dates when the business is closed or open with a different time window. */
        ExceptionDates: {
            /** @description Date when the business is closed, in ISO-8601 date format. */
            ExceptionDate?: string;
            /** @description Boolean indicating if the business is closed or open on that date. */
            IsOpen?: boolean;
            /** @description Time window during the day when the business is open. */
            OpenIntervals?: components["schemas"]["OpenInterval"][];
        };
        /** @description The time interval for which the business is open. */
        OpenInterval: {
            StartTime?: components["schemas"]["OpenTimeInterval"];
            EndTime?: components["schemas"]["OpenTimeInterval"];
        };
        /** @description The time when the business opens or closes. */
        OpenTimeInterval: {
            /** @description The hour when the business opens or closes. */
            Hour?: number;
            /** @description The minute when the business opens or closes. */
            Minute?: number;
        };
        /**
         * @description Miscellaneous delivery attributes associated with the shipping address.
         * @enum {string}
         */
        OtherDeliveryAttributes: "HAS_ACCESS_POINT" | "PALLET_ENABLED" | "PALLET_DISABLED";
        /** @description A list of payment method detail items. */
        PaymentMethodDetailItemList: string[];
        /** @description A list of payment execution detail items. */
        PaymentExecutionDetailItemList: components["schemas"]["PaymentExecutionDetailItem"][];
        /** @description Information about a sub-payment method used to pay for a COD order. */
        PaymentExecutionDetailItem: {
            Payment: components["schemas"]["Money"];
            /** @description A sub-payment method for a COD order.
             *
             *     Possible values:
             *     * `COD`: Cash On Delivery.
             *     * `GC`: Gift Card.
             *     * `PointsAccount`: Amazon Points.
             *     * `Invoice`: Invoice. */
            PaymentMethod: string;
        };
        /** @description Tax information about the buyer. */
        BuyerTaxInfo: {
            /** @description The legal name of the company. */
            CompanyLegalName?: string;
            /** @description The country or region imposing the tax. */
            TaxingRegion?: string;
            /** @description A list of tax classifications that apply to the order. */
            TaxClassifications?: components["schemas"]["TaxClassification"][];
        };
        /** @description Tax information about the marketplace. */
        MarketplaceTaxInfo: {
            /** @description A list of tax classifications that apply to the order. */
            TaxClassifications?: components["schemas"]["TaxClassification"][];
        };
        /** @description The tax classification for the order. */
        TaxClassification: {
            /** @description The type of tax. */
            Name?: string;
            /** @description The buyer's tax identifier. */
            Value?: string;
        };
        /** @description The order items list along with the order ID. */
        OrderItemsList: {
            OrderItems: components["schemas"]["OrderItemList"];
            /** @description When present and not empty, pass this string token in the next request to return the next response page. */
            NextToken?: string;
            /** @description An Amazon-defined order identifier, in 3-7-7 format. */
            AmazonOrderId: string;
        };
        /** @description A list of order items. */
        OrderItemList: components["schemas"]["OrderItem"][];
        /** @description A single order item. */
        OrderItem: {
            /** @description The Amazon Standard Identification Number (ASIN) of the item. */
            ASIN: string;
            /** @description The seller stock keeping unit (SKU) of the item. */
            SellerSKU?: string;
            /** @description An Amazon-defined order item identifier. */
            OrderItemId: string;
            /** @description A list of associated items that a customer has purchased with a product. For example, a tire installation service purchased with tires. */
            AssociatedItems?: components["schemas"]["AssociatedItem"][];
            /** @description The name of the item. */
            Title?: string;
            /** @description The number of items in the order.  */
            QuantityOrdered: number;
            /** @description The number of items shipped. */
            QuantityShipped?: number;
            ProductInfo?: components["schemas"]["ProductInfoDetail"];
            PointsGranted?: components["schemas"]["PointsGrantedDetail"];
            ItemPrice?: components["schemas"]["Money"];
            ShippingPrice?: components["schemas"]["Money"];
            ItemTax?: components["schemas"]["Money"];
            ShippingTax?: components["schemas"]["Money"];
            ShippingDiscount?: components["schemas"]["Money"];
            ShippingDiscountTax?: components["schemas"]["Money"];
            PromotionDiscount?: components["schemas"]["Money"];
            PromotionDiscountTax?: components["schemas"]["Money"];
            PromotionIds?: components["schemas"]["PromotionIdList"];
            CODFee?: components["schemas"]["Money"];
            CODFeeDiscount?: components["schemas"]["Money"];
            /** @description When true, the item is a gift. */
            IsGift?: boolean;
            /** @description The condition of the item as described by the seller. */
            ConditionNote?: string;
            /** @description The condition of the item.
             *
             *     Possible values: New, Used, Collectible, Refurbished, Preorder, Club. */
            ConditionId?: string;
            /** @description The subcondition of the item.
             *
             *     Possible values: New, Mint, Very Good, Good, Acceptable, Poor, Club, OEM, Warranty, Refurbished Warranty, Refurbished, Open Box, Any, Other. */
            ConditionSubtypeId?: string;
            /** @description The start date of the scheduled delivery window in the time zone of the order destination. In ISO 8601 date time format. */
            ScheduledDeliveryStartDate?: string;
            /** @description The end date of the scheduled delivery window in the time zone of the order destination. In ISO 8601 date time format. */
            ScheduledDeliveryEndDate?: string;
            /** @description Indicates that the selling price is a special price that is available only for Amazon Business orders. For more information about the Amazon Business Seller Program, see the [Amazon Business website](https://www.amazon.com/b2b/info/amazon-business).
             *
             *     Possible values: BusinessPrice - A special price that is available only for Amazon Business orders. */
            PriceDesignation?: string;
            TaxCollection?: components["schemas"]["TaxCollection"];
            /** @description When true, the product type for this item has a serial number.
             *
             *     Returned only for Amazon Easy Ship orders. */
            SerialNumberRequired?: boolean;
            /** @description When true, the ASIN is enrolled in Transparency and the Transparency serial number that needs to be submitted can be determined by the following:
             *
             *     **1D or 2D Barcode:** This has a **T** logo. Submit either the 29-character alpha-numeric identifier beginning with **AZ** or **ZA**, or the 38-character Serialized Global Trade Item Number (SGTIN).
             *     **2D Barcode SN:** Submit the 7- to 20-character serial number barcode, which likely has the prefix **SN**. The serial number will be applied to the same side of the packaging as the GTIN (UPC/EAN/ISBN) barcode.
             *     **QR code SN:** Submit the URL that the QR code generates. */
            IsTransparency?: boolean;
            /** @description The IOSS number for the marketplace. Sellers shipping to the European Union (EU) from outside of the EU must provide this IOSS number to their carrier when Amazon has collected the VAT on the sale. */
            IossNumber?: string;
            /** @description The store chain store identifier. Linked to a specific store in a store chain. */
            StoreChainStoreId?: string;
            /**
             * @description The category of deemed reseller. This applies to selling partners that are not based in the EU and is used to help them meet the VAT Deemed Reseller tax laws in the EU and UK.
             * @enum {string}
             */
            DeemedResellerCategory?: "IOSS" | "UOSS";
            BuyerInfo?: components["schemas"]["ItemBuyerInfo"];
            BuyerRequestedCancel?: components["schemas"]["BuyerRequestedCancel"];
            /** @description A list of serial numbers for electronic products that are shipped to customers. Returned for FBA orders only. */
            SerialNumbers?: string[];
            SubstitutionPreferences?: components["schemas"]["SubstitutionPreferences"];
            Measurement?: components["schemas"]["Measurement"];
        };
        SubstitutionPreferences: {
            /**
             * @description The type of substitution that these preferences represent.
             * @enum {string}
             */
            SubstitutionType: "CUSTOMER_PREFERENCE" | "AMAZON_RECOMMENDED" | "DO_NOT_SUBSTITUTE";
            SubstitutionOptions?: components["schemas"]["SubstitutionOptionList"];
        };
        /** @description A collection of substitution options. */
        SubstitutionOptionList: components["schemas"]["SubstitutionOption"][];
        SubstitutionOption: {
            /** @description The Amazon Standard Identification Number (ASIN) of the item. */
            ASIN?: string;
            /** @description The number of items to be picked for this substitution option.  */
            QuantityOrdered?: number;
            /** @description The seller stock keeping unit (SKU) of the item. */
            SellerSKU?: string;
            /** @description The title of the item. */
            Title?: string;
            Measurement?: components["schemas"]["Measurement"];
        };
        Measurement: {
            /**
             * @description The unit of measure for this measurement.
             * @enum {string}
             */
            Unit: "OUNCES" | "POUNDS" | "KILOGRAMS" | "GRAMS" | "MILLIGRAMS" | "INCHES" | "FEET" | "METERS" | "CENTIMETERS" | "MILLIMETERS" | "SQUARE_METERS" | "SQUARE_CENTIMETERS" | "SQUARE_FEET" | "SQUARE_INCHES" | "GALLONS" | "PINTS" | "QUARTS" | "FLUID_OUNCES" | "LITERS" | "CUBIC_METERS" | "CUBIC_FEET" | "CUBIC_INCHES" | "CUBIC_CENTIMETERS" | "COUNT";
            /** @description The value of the measurement. */
            Value: number;
        };
        /** @description An item associated with an order item. For example, a tire installation service purchased with tires. */
        AssociatedItem: {
            /** @description The order item's order identifier, in 3-7-7 format. */
            OrderId?: string;
            /** @description An Amazon-defined item identifier for the associated item. */
            OrderItemId?: string;
            AssociationType?: components["schemas"]["AssociationType"];
        };
        /**
         * @description The type of association an item has with an order item.
         * @enum {string}
         */
        AssociationType: "VALUE_ADD_SERVICE";
        /** @description A single order item's buyer information list with the order ID. */
        OrderItemsBuyerInfoList: {
            OrderItems: components["schemas"]["OrderItemBuyerInfoList"];
            /** @description When present and not empty, pass this string token in the next request to return the next response page. */
            NextToken?: string;
            /** @description An Amazon-defined order identifier, in 3-7-7 format. */
            AmazonOrderId: string;
        };
        /** @description A single order item's buyer information list. */
        OrderItemBuyerInfoList: components["schemas"]["OrderItemBuyerInfo"][];
        /** @description A single order item's buyer information. */
        OrderItemBuyerInfo: {
            /** @description An Amazon-defined order item identifier. */
            OrderItemId: string;
            BuyerCustomizedInfo?: components["schemas"]["BuyerCustomizedInfoDetail"];
            GiftWrapPrice?: components["schemas"]["Money"];
            GiftWrapTax?: components["schemas"]["Money"];
            /** @description A gift message provided by the buyer. */
            GiftMessageText?: string;
            /** @description The gift wrap level specified by the buyer. */
            GiftWrapLevel?: string;
        };
        /** @description The number of Amazon Points offered with the purchase of an item, and their monetary value. */
        PointsGrantedDetail: {
            /** @description The number of Amazon Points granted with the purchase of an item. */
            PointsNumber?: number;
            PointsMonetaryValue?: components["schemas"]["Money"];
        };
        /** @description Product information on the number of items. */
        ProductInfoDetail: {
            /** @description The total number of items that are included in the ASIN. */
            NumberOfItems?: number;
        };
        /** @description A list of promotion identifiers provided by the seller when the promotions were created. */
        PromotionIdList: string[];
        /** @description Buyer information for custom orders from the Amazon Custom program. */
        BuyerCustomizedInfoDetail: {
            /** @description The location of a zip file containing Amazon Custom data. */
            CustomizedURL?: string;
        };
        /** @description Information about withheld taxes. */
        TaxCollection: {
            /**
             * @description The tax collection model applied to the item.
             * @enum {string}
             */
            Model?: "MarketplaceFacilitator";
            /**
             * @description The party responsible for withholding the taxes and remitting them to the taxing authority.
             * @enum {string}
             */
            ResponsibleParty?: "Amazon Services, Inc.";
        };
        /** @description Contains the business invoice tax information. Available only in the TR marketplace. */
        BuyerTaxInformation: {
            /** @description Business buyer's company legal name. */
            BuyerLegalCompanyName?: string;
            /** @description Business buyer's address. */
            BuyerBusinessAddress?: string;
            /** @description Business buyer's tax registration ID. */
            BuyerTaxRegistrationId?: string;
            /** @description Business buyer's tax office. */
            BuyerTaxOffice?: string;
        };
        /** @description Contains the instructions about the fulfillment like where should it be fulfilled from. */
        FulfillmentInstruction: {
            /** @description Denotes the recommended sourceId where the order should be fulfilled from. */
            FulfillmentSupplySourceId?: string;
        };
        /** @description Buyer information. */
        BuyerInfo: {
            /** @description The anonymized email address of the buyer. */
            BuyerEmail?: string;
            /** @description The buyer name or the recipient name. */
            BuyerName?: string;
            /** @description The county of the buyer. */
            BuyerCounty?: string;
            BuyerTaxInfo?: components["schemas"]["BuyerTaxInfo"];
            /** @description The purchase order (PO) number entered by the buyer at checkout. Returned only for orders where the buyer entered a PO number at checkout. */
            PurchaseOrderNumber?: string;
        };
        /** @description A single item's buyer information. */
        ItemBuyerInfo: {
            BuyerCustomizedInfo?: components["schemas"]["BuyerCustomizedInfoDetail"];
            GiftWrapPrice?: components["schemas"]["Money"];
            GiftWrapTax?: components["schemas"]["Money"];
            /** @description A gift message provided by the buyer. */
            GiftMessageText?: string;
            /** @description The gift wrap level specified by the buyer. */
            GiftWrapLevel?: string;
        };
        /** @description Contains information regarding the Shipping Settings Automation program, such as whether the order's shipping settings were generated automatically, and what those settings are. */
        AutomatedShippingSettings: {
            /** @description When true, this order has automated shipping settings generated by Amazon. This order could be identified as an SSA order. */
            HasAutomatedShippingSettings?: boolean;
            /** @description Auto-generated carrier for SSA orders. */
            AutomatedCarrier?: string;
            /** @description Auto-generated ship method for SSA orders. */
            AutomatedShipMethod?: string;
        };
        /** @description Information about whether or not a buyer requested cancellation. */
        BuyerRequestedCancel: {
            /** @description When true, the buyer has requested cancellation. */
            IsBuyerRequestedCancel?: boolean;
            /** @description The reason that the buyer requested cancellation. */
            BuyerCancelReason?: string;
        };
        /**
         * @description The status of the Amazon Easy Ship order. This property is included only for Amazon Easy Ship orders.
         * @enum {string}
         */
        EasyShipShipmentStatus: "PendingSchedule" | "PendingPickUp" | "PendingDropOff" | "LabelCanceled" | "PickedUp" | "DroppedOff" | "AtOriginFC" | "AtDestinationFC" | "Delivered" | "RejectedByBuyer" | "Undeliverable" | "ReturningToSeller" | "ReturnedToSeller" | "Lost" | "OutForDelivery" | "Damaged";
        /**
         * @description The status of the electronic invoice.
         * @enum {string}
         */
        ElectronicInvoiceStatus: "NotRequired" | "NotFound" | "Processing" | "Errored" | "Accepted";
        /** @description The request schema for an shipment confirmation. */
        ConfirmShipmentRequest: {
            packageDetail: components["schemas"]["PackageDetail"];
            /**
             * @description The cod collection method, support in JP only.
             * @enum {string}
             */
            codCollectionMethod?: "DirectPayment";
            marketplaceId: components["schemas"]["MarketplaceId"];
        };
        /** @description The error response schema for an shipment confirmation. */
        ConfirmShipmentErrorResponse: {
            errors?: components["schemas"]["ErrorList"];
        };
        /** @description Properties of packages */
        PackageDetail: {
            packageReferenceId: components["schemas"]["PackageReferenceId"];
            /** @description Identifies the carrier that will deliver the package. This field is required for all marketplaces, see [reference](https://developer-docs.amazon.com/sp-api/changelog/carriercode-value-required-in-shipment-confirmations-for-br-mx-ca-sg-au-in-jp-marketplaces). */
            carrierCode: string;
            /** @description Carrier Name that will deliver the package. Required when carrierCode is "Others"  */
            carrierName?: string;
            /** @description Ship method to be used for shipping the order. */
            shippingMethod?: string;
            /** @description The tracking number used to obtain tracking and delivery information. */
            trackingNumber: string;
            /**
             * Format: date-time
             * @description The shipping date for the package. Must be in ISO-8601 date/time format.
             */
            shipDate: string;
            /** @description The unique identifier of the supply source. */
            shipFromSupplySourceId?: string;
            orderItems: components["schemas"]["ConfirmShipmentOrderItemsList"];
        };
        /** @description A list of order items. */
        ConfirmShipmentOrderItemsList: components["schemas"]["ConfirmShipmentOrderItem"][];
        /** @description A single order item. */
        ConfirmShipmentOrderItem: {
            /** @description The unique identifier of the order item. */
            orderItemId: string;
            /** @description The quantity of the item. */
            quantity: number;
            transparencyCodes?: components["schemas"]["TransparencyCodeList"];
        };
        /** @description A list of order items. */
        TransparencyCodeList: components["schemas"]["TransparencyCode"][];
        /** @description The Transparency code associated with the item. */
        TransparencyCode: string;
        /** @description A seller-supplied identifier that uniquely identifies a package within the scope of an order. Only positive numeric values are supported. */
        PackageReferenceId: string;
        /** @description Request schema. */
        GetMyFeesEstimateRequest: {
            FeesEstimateRequest?: components["schemas"]["FeesEstimateRequest"];
        };
        /** @description Request for estimated fees for a list of products. */
        GetMyFeesEstimatesRequest: components["schemas"]["FeesEstimateByIdRequest"][];
        /** @description A product, marketplace, and proposed price used to request estimated fees. */
        FeesEstimateByIdRequest: {
            FeesEstimateRequest?: components["schemas"]["FeesEstimateRequest"];
            IdType: components["schemas"]["IdType"];
            /** @description The item identifier. */
            IdValue: string;
        };
        /** @description A product, marketplace, and proposed price used to request estimated fees. */
        FeesEstimateRequest: {
            /** @description A marketplace identifier. */
            MarketplaceId: string;
            /** @description When true, the offer is fulfilled by Amazon. */
            IsAmazonFulfilled?: boolean;
            PriceToEstimateFees: components["schemas"]["PriceToEstimateFees"];
            /** @description A unique identifier provided by the caller to track this request. */
            Identifier: string;
            OptionalFulfillmentProgram?: components["schemas"]["OptionalFulfillmentProgram"];
        };
        GetMyFeesEstimateResponse: {
            payload?: components["schemas"]["GetMyFeesEstimateResult"];
            errors?: components["schemas"]["ErrorList"];
        };
        /** @description Response schema. */
        GetMyFeesEstimateResult: {
            FeesEstimateResult?: components["schemas"]["FeesEstimateResult"];
        };
        /** @description Estimated fees for a list of products. */
        GetMyFeesEstimatesResponse: components["schemas"]["FeesEstimateResult"][];
        /** @description A list of error responses returned when a request is unsuccessful. */
        GetMyFeesEstimatesErrorList: {
            errors: components["schemas"]["Error"][];
        };
        /** @description An item identifier and the estimated fees for the item. */
        FeesEstimateResult: {
            /** @description The status of the fee request. Possible values: Success, ClientError, ServiceError. */
            Status?: string;
            FeesEstimateIdentifier?: components["schemas"]["FeesEstimateIdentifier"];
            FeesEstimate?: components["schemas"]["FeesEstimate"];
            Error?: components["schemas"]["FeesEstimateError"];
        };
        /** @description An item identifier, marketplace, time of request, and other details that identify an estimate. */
        FeesEstimateIdentifier: {
            /** @description A marketplace identifier. */
            MarketplaceId?: string;
            /** @description The seller identifier. */
            SellerId?: string;
            IdType?: components["schemas"]["IdType"];
            /** @description The item identifier. */
            IdValue?: string;
            /** @description When true, the offer is fulfilled by Amazon. */
            IsAmazonFulfilled?: boolean;
            PriceToEstimateFees?: components["schemas"]["PriceToEstimateFees"];
            /** @description A unique identifier provided by the caller to track this request. */
            SellerInputIdentifier?: string;
            OptionalFulfillmentProgram?: components["schemas"]["OptionalFulfillmentProgram"];
        };
        /** @description Price information for an item, used to estimate fees. */
        PriceToEstimateFees: {
            ListingPrice: components["schemas"]["MoneyType"];
            Shipping?: components["schemas"]["MoneyType"];
            Points?: components["schemas"]["Points"];
        };
        /** @description The total estimated fees for an item and a list of details. */
        FeesEstimate: {
            /**
             * Format: date-time
             * @description The time at which the fees were estimated. This defaults to the time the request is made.
             */
            TimeOfFeesEstimation: string;
            TotalFeesEstimate?: components["schemas"]["MoneyType"];
            FeeDetailList?: components["schemas"]["FeeDetailList"];
        };
        /** @description A list of other fees that contribute to a given fee. */
        FeeDetailList: components["schemas"]["FeeDetail"][];
        /** @description An unexpected error occurred during this operation. */
        FeesEstimateError: {
            /** @description An error type, identifying either the receiver or the sender as the originator of the error. */
            Type: string;
            /** @description An error code that identifies the type of error that occurred. */
            Code: string;
            /** @description A message that describes the error condition. */
            Message: string;
            Detail: components["schemas"]["FeesEstimateErrorDetail"];
        };
        /** @description Additional information that can help the caller understand or fix the issue. */
        FeesEstimateErrorDetail: Record<string, never>[];
        /** @description The type of fee, fee amount, and other details. */
        FeeDetail: {
            /** @description The type of fee charged to a seller. */
            FeeType: string;
            FeeAmount: components["schemas"]["MoneyType"];
            FeePromotion?: components["schemas"]["MoneyType"];
            TaxAmount?: components["schemas"]["MoneyType"];
            FinalFee: components["schemas"]["MoneyType"];
            IncludedFeeDetailList?: components["schemas"]["IncludedFeeDetailList"];
        };
        /** @description A list of other fees that contribute to a given fee. */
        IncludedFeeDetailList: components["schemas"]["IncludedFeeDetail"][];
        /** @description The type of fee, fee amount, and other details. */
        IncludedFeeDetail: {
            /** @description The type of fee charged to a seller. */
            FeeType: string;
            FeeAmount: components["schemas"]["MoneyType"];
            FeePromotion?: components["schemas"]["MoneyType"];
            TaxAmount?: components["schemas"]["MoneyType"];
            FinalFee: components["schemas"]["MoneyType"];
        };
        MoneyType: {
            /** @description The currency code in ISO 4217 format. */
            CurrencyCode?: string;
            /** @description The monetary value. */
            Amount?: number;
        };
        /**
         * @description An optional enrollment program to return the estimated fees when the offer is fulfilled by Amazon (IsAmazonFulfilled is set to true).
         * @enum {string}
         */
        OptionalFulfillmentProgram: "FBA_CORE" | "FBA_SNL" | "FBA_EFN";
        /**
         * @description The type of product identifier used in a `FeesEstimateByIdRequest`.
         * @enum {string}
         */
        IdType: "ASIN" | "SellerSKU";
        /** @description The request body for the getFeaturedOfferExpectedPriceBatch operation. */
        GetFeaturedOfferExpectedPriceBatchRequest: {
            requests?: components["schemas"]["FeaturedOfferExpectedPriceRequestList"];
        };
        /** @description A batched list of featured offer expected price requests. */
        FeaturedOfferExpectedPriceRequestList: components["schemas"]["FeaturedOfferExpectedPriceRequest"][];
        /** @description An individual featured offer expected price request for a particular SKU. */
        FeaturedOfferExpectedPriceRequest: components["schemas"]["BatchRequest"] & components["schemas"]["FeaturedOfferExpectedPriceRequestParams"];
        /** @description The parameters for an individual request. */
        FeaturedOfferExpectedPriceRequestParams: {
            marketplaceId: components["schemas"]["MarketplaceId"];
            sku: components["schemas"]["Sku"];
        };
        /** @description The response schema for the getFeaturedOfferExpectedPriceBatch operation. */
        GetFeaturedOfferExpectedPriceBatchResponse: {
            responses?: components["schemas"]["FeaturedOfferExpectedPriceResponseList"];
        };
        /** @description A batched list of featured offer expected price responses. */
        FeaturedOfferExpectedPriceResponseList: components["schemas"]["FeaturedOfferExpectedPriceResponse"][];
        FeaturedOfferExpectedPriceResponse: components["schemas"]["BatchResponse"] & {
            request: components["schemas"]["FeaturedOfferExpectedPriceRequestParams"];
            body?: components["schemas"]["FeaturedOfferExpectedPriceResponseBody"];
        };
        /** @description A list of error responses returned when a request is unsuccessful. */
        Errors: {
            errors: components["schemas"]["ErrorList"];
        };
        /** @description The featured offer expected price response data for a requested SKU. */
        FeaturedOfferExpectedPriceResponseBody: {
            offerIdentifier: components["schemas"]["OfferIdentifier"];
            featuredOfferExpectedPriceResults?: components["schemas"]["FeaturedOfferExpectedPriceResultList"];
            errors?: components["schemas"]["ErrorList"];
        };
        /** @description A list of featured offer expected price results for the requested offer. */
        FeaturedOfferExpectedPriceResultList: components["schemas"]["FeaturedOfferExpectedPriceResult"][];
        /** @description The featured offer expected price result data for the requested offer. */
        FeaturedOfferExpectedPriceResult: {
            featuredOfferExpectedPrice?: components["schemas"]["FeaturedOfferExpectedPrice"];
            /** @description The status of the featured offer expected price computation. Possible values include VALID_FOEP, NO_COMPETING_OFFER, OFFER_NOT_ELIGIBLE, OFFER_NOT_FOUND. */
            resultStatus: string;
            competingFeaturedOffer?: components["schemas"]["FeaturedOffer"];
            currentFeaturedOffer?: components["schemas"]["FeaturedOffer"];
        };
        /** @description The item price at or below which the target offer may be featured. */
        FeaturedOfferExpectedPrice: {
            listingPrice: components["schemas"]["MoneyType"];
            points?: components["schemas"]["Points"];
        };
        FeaturedOffer: {
            offerIdentifier: components["schemas"]["OfferIdentifier"];
            condition?: components["schemas"]["Condition"];
            price?: components["schemas"]["Price"];
        };
        /** @description A mapping of additional HTTP headers to send/receive for an individual request within a batch. */
        HttpHeaders: {
            [key: string]: string | undefined;
        };
        /** @description The HTTP status line associated with the response to an individual request within a batch. For more information, consult [RFC 2616](https://www.w3.org/Protocols/rfc2616/rfc2616-sec6.html). */
        HttpStatusLine: {
            /** @description The HTTP response Status-Code. */
            statusCode?: number;
            /** @description The HTTP response Reason-Phase. */
            reasonPhrase?: string;
        };
        /** @description Additional HTTP body information associated with an individual request within a batch. */
        HttpBody: {
            [key: string]: Record<string, never> | undefined;
        };
        /**
         * @description The HTTP method associated with an individual request within a batch.
         * @enum {string}
         */
        HttpMethod: "GET" | "PUT" | "PATCH" | "DELETE" | "POST";
        /** @description The common properties for individual requests within a batch. */
        BatchRequest: {
            /** @description The URI associated with an individual request within a batch. For FeaturedOfferExpectedPrice, this should be '/products/pricing/2022-05-01/offer/featuredOfferExpectedPrice'. */
            uri: string;
            method: components["schemas"]["HttpMethod"];
            body?: components["schemas"]["HttpBody"];
            headers?: components["schemas"]["HttpHeaders"];
        };
        /** @description The common properties for responses to individual requests within a batch. */
        BatchResponse: {
            headers: components["schemas"]["HttpHeaders"];
            status: components["schemas"]["HttpStatusLine"];
        };
        /** @description Identifies an offer from a particular seller on an ASIN. */
        OfferIdentifier: {
            marketplaceId: components["schemas"]["MarketplaceId"];
            /** @description The seller identifier for the offer. */
            sellerId?: string;
            /** @description The seller stock keeping unit (SKU) of the item. This will only be present for the target offer, which belongs to the requesting seller. */
            sku?: string;
            asin: components["schemas"]["Asin"];
            fulfillmentType?: components["schemas"]["FulfillmentType"];
        };
        Price: {
            listingPrice: components["schemas"]["MoneyType"];
            shippingPrice?: components["schemas"]["MoneyType"];
            points?: components["schemas"]["Points"];
        };
        /**
         * @description Indicates whether the item is fulfilled by Amazon or by the seller (merchant).
         * @enum {string}
         */
        FulfillmentType: "AFN" | "MFN";
        /** @description The seller SKU of the item. */
        Sku: string;
        /**
         * @description The condition of the item.
         * @enum {string}
         */
        Condition: "New" | "Used" | "Collectible" | "Refurbished" | "Club";
        /** @description The Amazon Standard Identification Number (ASIN) of the item. */
        Asin: string;
        /** @description Detailed information about the report. */
        Report: {
            /** @description A list of marketplace identifiers for the report. */
            marketplaceIds?: string[];
            /** @description The identifier for the report. This identifier is unique only in combination with a seller ID. */
            reportId: string;
            /** @description The report type. Refer to [Report Type Values](https://developer-docs.amazon.com/sp-api/docs/report-type-values) for more information. */
            reportType: string;
            /**
             * Format: date-time
             * @description The start of a date and time range used for selecting the data to report.
             */
            dataStartTime?: string;
            /**
             * Format: date-time
             * @description The end of a date and time range used for selecting the data to report.
             */
            dataEndTime?: string;
            /** @description The identifier of the report schedule that created this report (if any). This identifier is unique only in combination with a seller ID. */
            reportScheduleId?: string;
            /**
             * Format: date-time
             * @description The date and time when the report was created.
             */
            createdTime: string;
            /**
             * @description The processing status of the report.
             * @enum {string}
             */
            processingStatus: "CANCELLED" | "DONE" | "FATAL" | "IN_PROGRESS" | "IN_QUEUE";
            /**
             * Format: date-time
             * @description The date and time when the report processing started, in ISO 8601 date time format.
             */
            processingStartTime?: string;
            /**
             * Format: date-time
             * @description The date and time when the report processing completed, in ISO 8601 date time format.
             */
            processingEndTime?: string;
            /** @description The identifier for the report document. Pass this into the getReportDocument operation to get the information you will need to retrieve the report document's contents. */
            reportDocumentId?: string;
        };
        /** @description A list of reports. */
        ReportList: components["schemas"]["Report"][];
        CreateReportScheduleSpecification: {
            /** @description The report type. Refer to [Report Type Values](https://developer-docs.amazon.com/sp-api/docs/report-type-values) for more information. */
            reportType: string;
            /** @description A list of marketplace identifiers for the report schedule. */
            marketplaceIds: string[];
            reportOptions?: components["schemas"]["ReportOptions"];
            /**
             * @description One of a set of predefined ISO 8601 periods that specifies how often a report should be created.
             * @enum {string}
             */
            period: "PT5M" | "PT15M" | "PT30M" | "PT1H" | "PT2H" | "PT4H" | "PT8H" | "PT12H" | "P1D" | "P2D" | "P3D" | "PT84H" | "P7D" | "P14D" | "P15D" | "P18D" | "P30D" | "P1M";
            /**
             * Format: date-time
             * @description The date and time when the schedule will create its next report, in ISO 8601 date time format.
             */
            nextReportCreationTime?: string;
        };
        /** @description Information required to create the report. */
        CreateReportSpecification: {
            reportOptions?: components["schemas"]["ReportOptions"];
            /** @description The report type. Refer to [Report Type Values](https://developer-docs.amazon.com/sp-api/docs/report-type-values) for more information. */
            reportType: string;
            /**
             * Format: date-time
             * @description The start of a date and time range, in ISO 8601 date time format, used for selecting the data to report. The default is now. The value must be prior to or equal to the current date and time. Not all report types make use of this.
             */
            dataStartTime?: string;
            /**
             * Format: date-time
             * @description The end of a date and time range, in ISO 8601 date time format, used for selecting the data to report. The default is now. The value must be prior to or equal to the current date and time. Not all report types make use of this.
             */
            dataEndTime?: string;
            /** @description A list of marketplace identifiers. The report document's contents will contain data for all of the specified marketplaces, unless the report type indicates otherwise. */
            marketplaceIds: string[];
        };
        /** @description Additional information passed to reports. This varies by report type. */
        ReportOptions: {
            [key: string]: string | undefined;
        };
        /** @description Detailed information about a report schedule. */
        ReportSchedule: {
            /** @description The identifier for the report schedule. This identifier is unique only in combination with a seller ID. */
            reportScheduleId: string;
            /** @description The report type. Refer to [Report Type Values](https://developer-docs.amazon.com/sp-api/docs/report-type-values) for more information. */
            reportType: string;
            /** @description A list of marketplace identifiers. The report document's contents will contain data for all of the specified marketplaces, unless the report type indicates otherwise. */
            marketplaceIds?: string[];
            reportOptions?: components["schemas"]["ReportOptions"];
            /** @description An ISO 8601 period value that indicates how often a report should be created. */
            period: string;
            /**
             * Format: date-time
             * @description The date and time when the schedule will create its next report, in ISO 8601 date time format.
             */
            nextReportCreationTime?: string;
        };
        /** @description A list of report schedules. */
        ReportScheduleList: {
            reportSchedules: components["schemas"]["ReportSchedule"][];
        };
        /** @description Response schema. */
        CreateReportResponse: {
            /** @description The identifier for the report. This identifier is unique only in combination with a seller ID. */
            reportId: string;
        };
        /** @description The response for the getReports operation. */
        GetReportsResponse: {
            reports: components["schemas"]["ReportList"];
            /** @description Returned when the number of results exceeds pageSize. To get the next page of results, call getReports with this token as the only parameter. */
            nextToken?: string;
        };
        /** @description Response schema. */
        CreateReportScheduleResponse: {
            /** @description The identifier for the report schedule. This identifier is unique only in combination with a seller ID. */
            reportScheduleId: string;
        };
        /** @description Information required for the report document. */
        ReportDocument: {
            /** @description The identifier for the report document. This identifier is unique only in combination with a seller ID. */
            reportDocumentId: string;
            /** @description A presigned URL for the report document. If `compressionAlgorithm` is not returned, you can download the report directly from this URL. This URL expires after 5 minutes. */
            url: string;
            /**
             * @description If the report document contents have been compressed, the compression algorithm used is returned in this property and you must decompress the report when you download. Otherwise, you can download the report directly. Refer to [Step 2. Download the report](doc:reports-api-v2021-06-30-retrieve-a-report#step-2-download-the-report) in the use case guide, where sample code is provided.
             * @enum {string}
             */
            compressionAlgorithm?: "GZIP";
        };
        /** @description The response schema for the getOrderMetrics operation. */
        GetOrderMetricsResponse: {
            payload?: components["schemas"]["OrderMetricsList"];
            errors?: components["schemas"]["ErrorList"];
        };
        /** @description A set of order metrics, each scoped to a particular time interval. */
        OrderMetricsList: components["schemas"]["OrderMetricsInterval"][];
        /** @description Contains order metrics. */
        OrderMetricsInterval: {
            /** @description The interval of time based on requested granularity (ex. Hour, Day, etc.) If this is the first or the last interval from the list, it might contain incomplete data if the requested interval doesn't align with the requested granularity (ex. request interval 2018-09-01T02:00:00Z--2018-09-04T19:00:00Z and granularity day will result in Sept 1st UTC day and Sept 4th UTC days having partial data). */
            interval: string;
            /** @description The number of units in orders based on the specified filters. */
            unitCount: number;
            /** @description The number of order items based on the specified filters. */
            orderItemCount: number;
            /** @description The number of orders based on the specified filters. */
            orderCount: number;
            averageUnitPrice: components["schemas"]["Money"];
            totalSales: components["schemas"]["Money"];
        };
        MarketplaceParticipation: {
            marketplace: components["schemas"]["Marketplace"];
            participation: components["schemas"]["Participation"];
        };
        /** @description List of marketplace participations. */
        MarketplaceParticipationList: components["schemas"]["MarketplaceParticipation"][];
        /** @description The response schema for the getMarketplaceParticipations operation. */
        GetMarketplaceParticipationsResponse: {
            payload?: components["schemas"]["MarketplaceParticipationList"];
            errors?: components["schemas"]["ErrorList"];
        };
        /** @description Detailed information about an Amazon market where a seller can list items for sale and customers can view and purchase items. */
        Marketplace: {
            /** @description The encrypted marketplace value. */
            id: string;
            /** @description Marketplace name. */
            name: string;
            /** @description The ISO 3166-1 alpha-2 format country code of the marketplace. */
            countryCode: string;
            /** @description The ISO 4217 format currency code of the marketplace. */
            defaultCurrencyCode: string;
            /** @description The ISO 639-1 format language code of the marketplace. */
            defaultLanguageCode: string;
            /** @description The domain name of the marketplace. */
            domainName: string;
        };
        /** @description Detailed information that is specific to a seller in a Marketplace. */
        Participation: {
            isParticipating: boolean;
            /** @description Specifies if the seller has suspended listings. True if the seller Listing Status is set to Inactive, otherwise False. */
            hasSuspendedListings: boolean;
        };
        /** @description The response schema for the `getServiceJobByServiceJobId` operation. */
        GetServiceJobByServiceJobIdResponse: {
            payload?: components["schemas"]["ServiceJob"];
            errors?: components["schemas"]["ErrorList"];
        };
        /** @description Response schema for the `cancelServiceJobByServiceJobId` operation. */
        CancelServiceJobByServiceJobIdResponse: {
            errors?: components["schemas"]["ErrorList"];
        };
        /** @description Response schema for the `completeServiceJobByServiceJobId` operation. */
        CompleteServiceJobByServiceJobIdResponse: {
            errors?: components["schemas"]["ErrorList"];
        };
        /** @description Response schema for the `getServiceJobs` operation. */
        GetServiceJobsResponse: {
            payload?: components["schemas"]["JobListing"];
            errors?: components["schemas"]["ErrorList"];
        };
        /** @description Response schema for the `addAppointmentForServiceJobByServiceJobId` and `rescheduleAppointmentForServiceJobByServiceJobId` operations. */
        SetAppointmentResponse: {
            appointmentId?: components["schemas"]["AppointmentId"];
            warnings?: components["schemas"]["WarningList"];
            errors?: components["schemas"]["ErrorList"];
        };
        /** @description Response schema for the `assignAppointmentResources` operation. */
        AssignAppointmentResourcesResponse: {
            /** @description The payload for the `assignAppointmentResource` operation. */
            payload?: {
                warnings?: components["schemas"]["WarningList"];
            };
            errors?: components["schemas"]["ErrorList"];
        };
        /** @description Request schema for the `assignAppointmentResources` operation. */
        AssignAppointmentResourcesRequest: {
            resources: components["schemas"]["AppointmentResources"];
        };
        /** @description The payload for the `getServiceJobs` operation. */
        JobListing: {
            /** @description Total result size of the query result. */
            totalResultSize?: number;
            /** @description A generated string used to pass information to your next request. If `nextPageToken` is returned, pass the value of `nextPageToken` to the `pageToken` to get next results. */
            nextPageToken?: string;
            /** @description A generated string used to pass information to your next request. If `previousPageToken` is returned, pass the value of `previousPageToken` to the `pageToken` to get previous page results. */
            previousPageToken?: string;
            /** @description List of job details for the given input. */
            jobs?: components["schemas"]["ServiceJob"][];
        };
        /** @description The job details of a service. */
        ServiceJob: {
            /**
             * Format: date-time
             * @description The date and time of the creation of the job in ISO 8601 format.
             */
            createTime?: string;
            serviceJobId?: components["schemas"]["ServiceJobId"];
            /**
             * @description The status of the service job.
             * @enum {string}
             */
            serviceJobStatus?: "NOT_SERVICED" | "CANCELLED" | "COMPLETED" | "PENDING_SCHEDULE" | "NOT_FULFILLABLE" | "HOLD" | "PAYMENT_DECLINED";
            scopeOfWork?: components["schemas"]["ScopeOfWork"];
            seller?: components["schemas"]["Seller"];
            serviceJobProvider?: components["schemas"]["ServiceJobProvider"];
            /** @description A list of appointment windows preferred by the buyer. Included only if the buyer selected appointment windows when creating the order. */
            preferredAppointmentTimes?: components["schemas"]["AppointmentTime"][];
            /** @description A list of appointments. */
            appointments?: components["schemas"]["Appointment"][];
            serviceOrderId?: components["schemas"]["OrderId"];
            /** @description The marketplace identifier. */
            marketplaceId?: string;
            /** @description The Amazon-defined identifier for the region scope. */
            storeId?: string;
            buyer?: components["schemas"]["Buyer"];
            /** @description A list of items associated with the service job. */
            associatedItems?: components["schemas"]["AssociatedItem"][];
            serviceLocation?: components["schemas"]["ServiceLocation"];
        };
        /** @description Amazon identifier for the service job. */
        ServiceJobId: string;
        /** @description The Amazon-defined identifier for an order placed by the buyer, in 3-7-7 format. */
        OrderId: string;
        /** @description The scope of work for the order. */
        ScopeOfWork: {
            /** @description The Amazon Standard Identification Number (ASIN) of the service job. */
            asin?: string;
            /** @description The title of the service job. */
            title?: string;
            /** @description The number of service jobs. */
            quantity?: number;
            /** @description A list of skills required to perform the job. */
            requiredSkills?: string[];
        };
        /** @description Information about the seller of the service job. */
        Seller: {
            /** @description The identifier of the seller of the service job. */
            sellerId?: string;
        };
        /** @description Information about the service job provider. */
        ServiceJobProvider: {
            /** @description The identifier of the service job provider. */
            serviceJobProviderId?: string;
        };
        /** @description Information about the buyer. */
        Buyer: {
            /** @description The identifier of the buyer. */
            buyerId?: string;
            /** @description The name of the buyer. */
            name?: string;
            /** @description The phone number of the buyer. */
            phone?: string;
            /** @description When true, the service is for an Amazon Prime buyer. */
            isPrimeMember?: boolean;
        };
        /** @description The time of the appointment window. */
        AppointmentTime: {
            /**
             * Format: date-time
             * @description The date and time of the start of the appointment window in ISO 8601 format.
             */
            startTime: string;
            /** @description The duration of the appointment window, in minutes. */
            durationInMinutes: number;
        };
        /** @description The appointment identifier. */
        AppointmentId: string;
        /** @description The details of an appointment. */
        Appointment: {
            appointmentId?: components["schemas"]["AppointmentId"];
            /**
             * @description The status of the appointment.
             * @enum {string}
             */
            appointmentStatus?: "ACTIVE" | "CANCELLED" | "COMPLETED";
            appointmentTime?: components["schemas"]["AppointmentTime"];
            /** @description A list of technicians assigned to the service job. */
            assignedTechnicians?: components["schemas"]["Technician"][];
            rescheduledAppointmentId?: components["schemas"]["AppointmentId"];
            poa?: components["schemas"]["Poa"];
        };
        /** @description A technician who is assigned to perform the service job in part or in full. */
        Technician: {
            /** @description The technician identifier. */
            technicianId?: string;
            /** @description The name of the technician. */
            name?: string;
        };
        /** @description Proof of Appointment (POA) details. */
        Poa: {
            appointmentTime?: components["schemas"]["AppointmentTime"];
            /** @description A list of technicians. */
            technicians?: components["schemas"]["Technician"][];
            /** @description The identifier of the technician who uploaded the POA. */
            uploadingTechnician?: string;
            /**
             * Format: date-time
             * @description The date and time when the POA was uploaded in ISO 8601 format.
             */
            uploadTime?: string;
            /**
             * @description The type of POA uploaded.
             * @enum {string}
             */
            poaType?: "NO_SIGNATURE_DUMMY_POS" | "CUSTOMER_SIGNATURE" | "DUMMY_RECEIPT" | "POA_RECEIPT";
        };
        /** @description Delivery information for the item. */
        ItemDelivery: {
            /**
             * Format: date-time
             * @description The date and time of the latest Estimated Delivery Date (EDD) of all the items with an EDD. In ISO 8601 format.
             */
            estimatedDeliveryDate?: string;
            itemDeliveryPromise?: components["schemas"]["ItemDeliveryPromise"];
        };
        /** @description Promised delivery information for the item. */
        ItemDeliveryPromise: {
            /**
             * Format: date-time
             * @description The date and time of the start of the promised delivery window in ISO 8601 format.
             */
            startTime?: string;
            /**
             * Format: date-time
             * @description The date and time of the end of the promised delivery window in ISO 8601 format.
             */
            endTime?: string;
        };
        /** @description Information about the location of the service job. */
        ServiceLocation: {
            /**
             * @description The location of the service job.
             * @enum {string}
             */
            serviceLocationType?: "IN_HOME" | "IN_STORE" | "ONLINE";
            address?: components["schemas"]["Address"];
        };
        /** @description Input for add appointment operation. */
        AddAppointmentRequest: {
            appointmentTime: components["schemas"]["AppointmentTimeInput"];
        };
        /** @description Input for rescheduled appointment operation. */
        RescheduleAppointmentRequest: {
            appointmentTime: components["schemas"]["AppointmentTimeInput"];
            rescheduleReasonCode: components["schemas"]["RescheduleReasonCode"];
        };
        /** @description The input appointment time details. */
        AppointmentTimeInput: {
            /**
             * Format: date-time
             * @description The date, time in UTC for the start time of an appointment in ISO 8601 format.
             */
            startTime: string;
            /** @description The duration of an appointment in minutes. */
            durationInMinutes?: number;
        };
        /** @description The appointment reschedule reason code. */
        RescheduleReasonCode: string;
        /** @description A list of warnings returned in the sucessful execution response of an API request. */
        WarningList: components["schemas"]["Warning"][];
        /** @description Warning returned when the request is successful, but there are important callouts based on which API clients should take defined actions. */
        Warning: {
            /** @description An warning code that identifies the type of warning that occurred. */
            code: string;
            /** @description A message that describes the warning condition in a human-readable form. */
            message: string;
            /** @description Additional details that can help the caller understand or address the warning. */
            details?: string;
        };
        /** @description The error response schema for the `getRangeSlotCapacity` operation. */
        RangeSlotCapacityErrors: {
            errors?: components["schemas"]["ErrorList"];
        };
        /** @description Response schema for the `getRangeSlotCapacity` operation. */
        RangeSlotCapacity: {
            /** @description Resource Identifier. */
            resourceId?: string;
            /** @description Array of range capacities where each entry is for a specific capacity type. */
            capacities?: components["schemas"]["RangeCapacity"][];
            /** @description Next page token, if there are more pages. */
            nextPageToken?: string;
        };
        /** @description Range capacity entity where each entry has a capacity type and corresponding slots. */
        RangeCapacity: {
            capacityType?: components["schemas"]["CapacityType"];
            /** @description Array of capacity slots in range slot format. */
            slots?: components["schemas"]["RangeSlot"][];
        };
        /** @description Capacity slots represented in a format similar to availability rules. */
        RangeSlot: {
            /**
             * Format: date-time
             * @description Start date time of slot in ISO 8601 format with precision of seconds.
             */
            startDateTime?: string;
            /**
             * Format: date-time
             * @description End date time of slot in ISO 8601 format with precision of seconds.
             */
            endDateTime?: string;
            /**
             * Format: int32
             * @description Capacity of the slot.
             */
            capacity?: number;
        };
        /** @description The error response schema for the `getFixedSlotCapacity` operation. */
        FixedSlotCapacityErrors: {
            errors?: components["schemas"]["ErrorList"];
        };
        /** @description Response schema for the `getFixedSlotCapacity` operation. */
        FixedSlotCapacity: {
            /** @description Resource Identifier. */
            resourceId?: string;
            /**
             * Format: int32
             * @description The duration of each slot which is returned. This value will be a multiple of 5 and fall in the following range: 5 <= `slotDuration` <= 360.
             */
            slotDuration?: number;
            /** @description Array of capacity slots in fixed slot format. */
            capacities?: components["schemas"]["FixedSlot"][];
            /** @description Next page token, if there are more pages. */
            nextPageToken?: string;
        };
        /** @description In this slot format each slot only has the requested capacity types. This slot size is as specified by slot duration. */
        FixedSlot: {
            /**
             * Format: date-time
             * @description Start date time of slot in ISO 8601 format with precision of seconds.
             */
            startDateTime?: string;
            /**
             * Format: int32
             * @description Scheduled capacity corresponding to the slot. This capacity represents the originally allocated capacity as per resource schedule.
             */
            scheduledCapacity?: number;
            /**
             * Format: int32
             * @description Available capacity corresponding to the slot. This capacity represents the capacity available for allocation to reservations.
             */
            availableCapacity?: number;
            /**
             * Format: int32
             * @description Encumbered capacity corresponding to the slot. This capacity represents the capacity allocated for Amazon Jobs/Appointments/Orders.
             */
            encumberedCapacity?: number;
            /**
             * Format: int32
             * @description Reserved capacity corresponding to the slot. This capacity represents the capacity made unavailable due to events like Breaks/Leaves/Lunch.
             */
            reservedCapacity?: number;
        };
        /** @description Response schema for the `updateSchedule` operation. */
        UpdateScheduleResponse: {
            /** @description Contains the `UpdateScheduleRecords` for which the error/warning has occurred. */
            payload?: components["schemas"]["UpdateScheduleRecord"][];
            errors?: components["schemas"]["ErrorList"];
        };
        /** @description Input for set appointment fulfillment data operation. */
        SetAppointmentFulfillmentDataRequest: {
            fulfillmentTime?: components["schemas"]["FulfillmentTime"];
            appointmentResources?: components["schemas"]["AppointmentResources"];
            fulfillmentDocuments?: components["schemas"]["FulfillmentDocuments"];
        };
        /** @description Input for fulfillment time details */
        FulfillmentTime: {
            /**
             * Format: date-time
             * @description The date, time in UTC of the fulfillment start time in ISO 8601 format.
             */
            startTime?: string;
            /**
             * Format: date-time
             * @description The date, time in UTC of the fulfillment end time in ISO 8601 format.
             */
            endTime?: string;
        };
        /** @description List of documents captured during service appointment fulfillment. */
        FulfillmentDocuments: components["schemas"]["FulfillmentDocument"][];
        /** @description Document that captured during service appointment fulfillment that portrays proof of completion */
        FulfillmentDocument: {
            /** @description The identifier of the upload destination. Get this value by calling the `createServiceDocumentUploadDestination` operation of the Services API. */
            uploadDestinationId?: string;
            /** @description Sha256 hash of the file content. This value is used to determine if the file has been corrupted or tampered with during transit. */
            contentSha256?: string;
        };
        /** @description List of resources that performs or performed job appointment fulfillment. */
        AppointmentResources: components["schemas"]["AppointmentResource"][];
        /** @description The resource that performs or performed appointment fulfillment. */
        AppointmentResource: {
            /** @description The resource identifier. */
            resourceId?: string;
        };
        /** @description Response schema for the `createReservation` operation. */
        CreateReservationResponse: {
            payload?: components["schemas"]["CreateReservationRecord"];
            errors?: components["schemas"]["ErrorList"];
        };
        /** @description Response schema for the `updateReservation` operation. */
        UpdateReservationResponse: {
            payload?: components["schemas"]["UpdateReservationRecord"];
            errors?: components["schemas"]["ErrorList"];
        };
        /** @description Response schema for the `cancelReservation` operation. */
        CancelReservationResponse: {
            errors?: components["schemas"]["ErrorList"];
        };
        /**
         * @description The day of the week.
         * @enum {string}
         */
        DayOfWeek: "MONDAY" | "TUESDAY" | "WEDNESDAY" | "THURSDAY" | "FRIDAY" | "SATURDAY" | "SUNDAY";
        /** @description Repeated occurrence of an event in a time range. */
        Recurrence: {
            /**
             * Format: date-time
             * @description End time of the recurrence.
             */
            endTime: string;
            /** @description Days of the week when recurrence is valid. If the schedule is valid every Monday, input will only contain `MONDAY` in the list. */
            daysOfWeek?: components["schemas"]["DayOfWeek"][];
            /** @description Days of the month when recurrence is valid. */
            daysOfMonth?: number[];
        };
        /** @description `AvailabilityRecord` to represent the capacity of a resource over a time range. */
        AvailabilityRecord: {
            /**
             * Format: date-time
             * @description Denotes the time from when the resource is available in a day in ISO-8601 format.
             */
            startTime: string;
            /**
             * Format: date-time
             * @description Denotes the time till when the resource is available in a day in ISO-8601 format.
             */
            endTime: string;
            recurrence?: components["schemas"]["Recurrence"];
            /** @description Signifies the capacity of a resource which is available. */
            capacity?: number;
        };
        /** @description List of `AvailabilityRecord`s to represent the capacity of a resource over a time range. */
        AvailabilityRecords: components["schemas"]["AvailabilityRecord"][];
        /** @description Reservation object reduces the capacity of a resource. */
        Reservation: {
            /** @description Unique identifier for a reservation. If present, it is treated as an update reservation request and will update the corresponding reservation. Otherwise, it is treated as a new create reservation request. */
            reservationId?: string;
            /**
             * @description Type of reservation.
             * @enum {string}
             */
            type: "APPOINTMENT" | "TRAVEL" | "VACATION" | "BREAK" | "TRAINING";
            availability: components["schemas"]["AvailabilityRecord"];
        };
        /** @description `UpdateScheduleRecord` entity contains the `AvailabilityRecord` if there is an error/warning while performing the requested operation on it. */
        UpdateScheduleRecord: {
            availability?: components["schemas"]["AvailabilityRecord"];
            warnings?: components["schemas"]["WarningList"];
            errors?: components["schemas"]["ErrorList"];
        };
        /** @description `CreateReservationRecord` entity contains the `Reservation` if there is an error/warning while performing the requested operation on it, otherwise it will contain the new `reservationId`. */
        CreateReservationRecord: {
            reservation?: components["schemas"]["Reservation"];
            warnings?: components["schemas"]["WarningList"];
            errors?: components["schemas"]["ErrorList"];
        };
        /** @description `UpdateReservationRecord` entity contains the `Reservation` if there is an error/warning while performing the requested operation on it, otherwise it will contain the new `reservationId`. */
        UpdateReservationRecord: {
            reservation?: components["schemas"]["Reservation"];
            warnings?: components["schemas"]["WarningList"];
            errors?: components["schemas"]["ErrorList"];
        };
        /** @description Request schema for the `getRangeSlotCapacity` operation. This schema is used to define the time range and capacity types that are being queried. */
        RangeSlotCapacityQuery: {
            /** @description An array of capacity types which are being requested. Default value is `[SCHEDULED_CAPACITY]`. */
            capacityTypes?: components["schemas"]["CapacityType"][];
            /**
             * Format: date-time
             * @description Start date time from which the capacity slots are being requested in ISO 8601 format.
             */
            startDateTime: string;
            /**
             * Format: date-time
             * @description End date time up to which the capacity slots are being requested in ISO 8601 format.
             */
            endDateTime: string;
        };
        /** @description Request schema for the `getFixedSlotCapacity` operation. This schema is used to define the time range, capacity types and slot duration which are being queried. */
        FixedSlotCapacityQuery: {
            /** @description An array of capacity types which are being requested. Default value is `[SCHEDULED_CAPACITY]`. */
            capacityTypes?: components["schemas"]["CapacityType"][];
            /**
             * Format: int32
             * @description Size in which slots are being requested. This value should be a multiple of 5 and fall in the range: 5 <= `slotDuration` <= 360.
             */
            slotDuration?: number;
            /**
             * Format: date-time
             * @description Start date time from which the capacity slots are being requested in ISO 8601 format.
             */
            startDateTime: string;
            /**
             * Format: date-time
             * @description End date time up to which the capacity slots are being requested in ISO 8601 format.
             */
            endDateTime: string;
        };
        /** @description Request schema for the `updateSchedule` operation. */
        UpdateScheduleRequest: {
            schedules: components["schemas"]["AvailabilityRecords"];
        };
        /**
         * @description Type of capacity
         * @enum {string}
         */
        CapacityType: "SCHEDULED_CAPACITY" | "AVAILABLE_CAPACITY" | "ENCUMBERED_CAPACITY" | "RESERVED_CAPACITY";
        /** @description Request schema for the `createReservation` operation. */
        CreateReservationRequest: {
            /** @description Resource (store) identifier. */
            resourceId: string;
            reservation: components["schemas"]["Reservation"];
        };
        /** @description Request schema for the `updateReservation` operation. */
        UpdateReservationRequest: {
            /** @description Resource (store) identifier. */
            resourceId: string;
            reservation: components["schemas"]["Reservation"];
        };
        /** @description The response of fetching appointment slots based on service context. */
        GetAppointmentSlotsResponse: {
            payload?: components["schemas"]["AppointmentSlotReport"];
            errors?: components["schemas"]["ErrorList"];
        };
        /** @description Availability information as per the service context queried. */
        AppointmentSlotReport: {
            /**
             * @description Defines the type of slots.
             * @enum {string}
             */
            schedulingType?: "REAL_TIME_SCHEDULING" | "NON_REAL_TIME_SCHEDULING";
            /**
             * Format: date-time
             * @description Start Time from which the appointment slots are generated in ISO 8601 format.
             */
            startTime?: string;
            /**
             * Format: date-time
             * @description End Time up to which the appointment slots are generated in ISO 8601 format.
             */
            endTime?: string;
            /** @description A list of time windows along with associated capacity in which the service can be performed. */
            appointmentSlots?: components["schemas"]["AppointmentSlot"][];
        };
        /** @description A time window along with associated capacity in which the service can be performed. */
        AppointmentSlot: {
            /**
             * Format: date-time
             * @description Time window start time in ISO 8601 format.
             */
            startTime?: string;
            /**
             * Format: date-time
             * @description Time window end time in ISO 8601 format.
             */
            endTime?: string;
            /** @description Number of resources for which a slot can be reserved. */
            capacity?: number;
        };
        /** @description Input for to be uploaded document. */
        ServiceUploadDocument: {
            /**
             * @description The content type of the to-be-uploaded file
             * @enum {string}
             */
            contentType: "TIFF" | "JPG" | "PNG" | "JPEG" | "GIF" | "PDF";
            /**
             * Format: int64
             * @description The content length of the to-be-uploaded file
             */
            contentLength: number;
            /** @description An MD5 hash of the content to be submitted to the upload destination. This value is used to determine if the data has been corrupted or tampered with during transit. */
            contentMD5?: string;
        };
        /** @description The response schema for the `createServiceDocumentUploadDestination` operation. */
        CreateServiceDocumentUploadDestination: {
            payload?: components["schemas"]["ServiceDocumentUploadDestination"];
            errors?: components["schemas"]["ErrorList"];
        };
        /** @description Information about an upload destination. */
        ServiceDocumentUploadDestination: {
            /** @description The unique identifier to be used by APIs that reference the upload destination. */
            uploadDestinationId: string;
            /** @description The URL to which to upload the file. */
            url: string;
            encryptionDetails: components["schemas"]["EncryptionDetails"];
            /** @description The headers to include in the upload request. */
            headers?: Record<string, never>;
        };
        /** @description Encryption details for required client-side encryption and decryption of document contents. */
        EncryptionDetails: {
            /**
             * @description The encryption standard required to encrypt or decrypt the document contents.
             * @enum {string}
             */
            standard: "AES";
            /** @description The vector to encrypt or decrypt the document contents using Cipher Block Chaining (CBC). */
            initializationVector: string;
            /** @description The encryption key used to encrypt or decrypt the document contents. */
            key: string;
        };
        /** @description The request schema for the createRestrictedDataToken operation. */
        CreateRestrictedDataTokenRequest: {
            /** @description The application ID for the target application to which access is being delegated. */
            targetApplication?: string;
            /** @description A list of restricted resources.
             *     Maximum: 50 */
            restrictedResources: components["schemas"]["RestrictedResource"][];
        };
        /** @description Model of a restricted resource. */
        RestrictedResource: {
            /**
             * @description The HTTP method in the restricted resource.
             * @enum {string}
             */
            method: "GET" | "PUT" | "POST" | "DELETE";
            /** @description The path in the restricted resource. Here are some path examples:
             *     - ```/orders/v0/orders```. For getting an RDT for the getOrders operation of the Orders API. For bulk orders.
             *     - ```/orders/v0/orders/123-1234567-1234567```. For getting an RDT for the getOrder operation of the Orders API. For a specific order.
             *     - ```/orders/v0/orders/123-1234567-1234567/orderItems```. For getting an RDT for the getOrderItems operation of the Orders API. For the order items in a specific order.
             *     - ```/mfn/v0/shipments/FBA1234ABC5D```. For getting an RDT for the getShipment operation of the Shipping API. For a specific shipment.
             *     - ```/mfn/v0/shipments/{shipmentId}```. For getting an RDT for the getShipment operation of the Shipping API. For any of a selling partner's shipments that you specify when you call the getShipment operation. */
            path: string;
            /** @description Indicates the type of Personally Identifiable Information requested. This parameter is required only when getting an RDT for use with the getOrder, getOrders, or getOrderItems operation of the Orders API. For more information, see the [Tokens API Use Case Guide](doc:tokens-api-use-case-guide). Possible values include:
             *     - **buyerInfo**. On the order level this includes general identifying information about the buyer and tax-related information. On the order item level this includes gift wrap information and custom order information, if available.
             *     - **shippingAddress**. This includes information for fulfilling orders.
             *     - **buyerTaxInformation**. This includes information for issuing tax invoices. */
            dataElements?: string[];
        };
        /** @description The response schema for the createRestrictedDataToken operation. */
        CreateRestrictedDataTokenResponse: {
            /** @description A Restricted Data Token (RDT). This is a short-lived access token that authorizes calls to restricted operations. Pass this value with the x-amz-access-token header when making subsequent calls to these restricted resources. */
            restrictedDataToken?: string;
            /** @description The lifetime of the Restricted Data Token, in seconds. */
            expiresIn?: number;
        };
    };
    responses: never;
    parameters: {
        /** @description The type of notification.
         *
         *      For more information about notification types, see [the Notifications API Use Case Guide](doc:notifications-api-v1-use-case-guide). */
        NotificationType: string;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getAuthorizationCode: {
        parameters: {
            query: {
                /** @description The seller ID of the seller for whom you are requesting Selling Partner API authorization. This must be the seller ID of the seller who authorized your application on the Marketplace Appstore. */
                sellingPartnerId: string;
                /** @description Your developer ID. This must be one of the developer ID values that you provided when you registered your application in Developer Central. */
                developerId: string;
                /** @description The MWS Auth Token that was generated when the seller authorized your application on the Marketplace Appstore. */
                mwsAuthToken: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success. */
            200: {
                headers: {
                    /** @description Unique request reference ID. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAuthorizationCodeResponse"];
                    payload: unknown;
                };
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    /** @description Unique request reference ID. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAuthorizationCodeResponse"];
                    errors: unknown;
                };
            };
            /** @description Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {
                    /** @description Unique request reference ID. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAuthorizationCodeResponse"];
                };
            };
            /** @description The resource specified does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference ID. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAuthorizationCodeResponse"];
                };
            };
            /** @description The request size exceeded the maximum accepted size. */
            413: {
                headers: {
                    /** @description Unique request reference ID. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAuthorizationCodeResponse"];
                };
            };
            /** @description The request payload is in an unsupported format. */
            415: {
                headers: {
                    /** @description Unique request reference ID. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAuthorizationCodeResponse"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference ID. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAuthorizationCodeResponse"];
                };
            };
            /** @description An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference ID. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAuthorizationCodeResponse"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference ID. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAuthorizationCodeResponse"];
                };
            };
        };
    };
    searchCatalogItems: {
        parameters: {
            query: {
                /**
                 * @description A comma-delimited list of product identifiers to search the Amazon catalog for. **Note:** Cannot be used with `keywords`.
                 * @example shoes
                 */
                identifiers?: string[];
                /**
                 * @description Type of product identifiers to search the Amazon catalog for. **Note:** Required when `identifiers` are provided.
                 * @example ASIN
                 */
                identifiersType?: "ASIN" | "EAN" | "GTIN" | "ISBN" | "JAN" | "MINSAN" | "SKU" | "UPC";
                /**
                 * @description A comma-delimited list of Amazon marketplace identifiers for the request.
                 * @example ATVPDKIKX0DER
                 */
                marketplaceIds: string[];
                /**
                 * @description A comma-delimited list of data sets to include in the response. Default: `summaries`.
                 * @example summaries
                 */
                includedData?: ("attributes" | "dimensions" | "identifiers" | "images" | "productTypes" | "relationships" | "salesRanks" | "summaries" | "vendorDetails")[];
                /**
                 * @description Locale for retrieving localized summaries. Defaults to the primary locale of the marketplace.
                 * @example en_US
                 */
                locale?: string;
                /** @description A selling partner identifier, such as a seller account or vendor code. **Note:** Required when `identifiersType` is `SKU`. */
                sellerId?: string;
                /**
                 * @description A comma-delimited list of words to search the Amazon catalog for. **Note:** Cannot be used with `identifiers`.
                 * @example shoes
                 */
                keywords?: string[];
                /**
                 * @description A comma-delimited list of brand names to limit the search for `keywords`-based queries. **Note:** Cannot be used with `identifiers`.
                 * @example Beautiful Boats
                 */
                brandNames?: string[];
                /**
                 * @description A comma-delimited list of classification identifiers to limit the search for `keywords`-based queries. **Note:** Cannot be used with `identifiers`.
                 * @example 12345678
                 */
                classificationIds?: string[];
                /**
                 * @description Number of results to be returned per page.
                 * @example 9
                 */
                pageSize?: number;
                /**
                 * @description A token to fetch a certain page when there are multiple pages worth of results.
                 * @example sdlkj234lkj234lksjdflkjwdflkjsfdlkj234234234234
                 */
                pageToken?: string;
                /**
                 * @description The language of the keywords provided for `keywords`-based queries. Defaults to the primary locale of the marketplace. **Note:** Cannot be used with `identifiers`.
                 * @example en_US
                 */
                keywordsLocale?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success. */
            200: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ItemSearchResults"];
                };
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description The resource specified does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description The request size exceeded the maximum accepted size. */
            413: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description The request payload is in an unsupported format. */
            415: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
        };
    };
    getCatalogItem: {
        parameters: {
            query: {
                /**
                 * @description A comma-delimited list of Amazon marketplace identifiers. Data sets in the response contain data only for the specified marketplaces.
                 * @example ATVPDKIKX0DER
                 */
                marketplaceIds: string[];
                /**
                 * @description A comma-delimited list of data sets to include in the response. Default: `summaries`.
                 * @example summaries
                 */
                includedData?: ("attributes" | "dimensions" | "identifiers" | "images" | "productTypes" | "relationships" | "salesRanks" | "summaries" | "vendorDetails")[];
                /**
                 * @description Locale for retrieving localized summaries. Defaults to the primary locale of the marketplace.
                 * @example en_US
                 */
                locale?: string;
            };
            header?: never;
            path: {
                /** @description The Amazon Standard Identification Number (ASIN) of the item. */
                asin: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success. */
            200: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Item"];
                };
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description The resource specified does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description The request size exceeded the maximum accepted size. */
            413: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description The request payload is in an unsupported format. */
            415: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
        };
    };
    listFinancialEventGroups: {
        parameters: {
            query?: {
                /** @description The maximum number of results to return per page. If the response exceeds the maximum number of transactions or 10 MB, the API responds with 'InvalidInput'. */
                MaxResultsPerPage?: number;
                /** @description A date used for selecting financial event groups that opened before (but not at) a specified date and time, in ISO 8601 format. The date-time  must be later than FinancialEventGroupStartedAfter and no later than two minutes before the request was submitted. If FinancialEventGroupStartedAfter and FinancialEventGroupStartedBefore are more than 180 days apart, no financial event groups are returned. */
                FinancialEventGroupStartedBefore?: string;
                /** @description A date used for selecting financial event groups that opened after (or at) a specified date and time, in ISO 8601 format. The date-time must be no later than two minutes before the request was submitted. */
                FinancialEventGroupStartedAfter?: string;
                /** @description A string token returned in the response of your previous request. */
                NextToken?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListFinancialEventGroupsResponse"];
                };
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListFinancialEventGroupsResponse"];
                };
            };
            /** @description Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListFinancialEventGroupsResponse"];
                };
            };
            /** @description The resource specified does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListFinancialEventGroupsResponse"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListFinancialEventGroupsResponse"];
                };
            };
            /** @description An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListFinancialEventGroupsResponse"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListFinancialEventGroupsResponse"];
                };
            };
        };
    };
    listFinancialEventsByGroupId: {
        parameters: {
            query?: {
                /** @description The maximum number of results to return per page. If the response exceeds the maximum number of transactions or 10 MB, the API responds with 'InvalidInput'. */
                MaxResultsPerPage?: number;
                /** @description A date used for selecting financial events posted after (or at) a specified time. The date-time **must** be more than two minutes before the time of the request, in ISO 8601 date time format. */
                PostedAfter?: string;
                /** @description A date used for selecting financial events posted before (but not at) a specified time. The date-time must be later than `PostedAfter` and no later than two minutes before the request was submitted, in ISO 8601 date time format. If `PostedAfter` and `PostedBefore` are more than 180 days apart, no financial events are returned. You must specify the `PostedAfter` parameter if you specify the `PostedBefore` parameter. Default: Now minus two minutes. */
                PostedBefore?: string;
                /** @description A string token returned in the response of your previous request. */
                NextToken?: string;
            };
            header?: never;
            path: {
                /** @description The identifier of the financial event group to which the events belong. */
                eventGroupId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListFinancialEventsResponse"];
                };
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListFinancialEventsResponse"];
                };
            };
            /** @description Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListFinancialEventsResponse"];
                };
            };
            /** @description The resource specified does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListFinancialEventsResponse"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListFinancialEventsResponse"];
                };
            };
            /** @description An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListFinancialEventsResponse"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListFinancialEventsResponse"];
                };
            };
        };
    };
    listFinancialEventsByOrderId: {
        parameters: {
            query?: {
                /** @description The maximum number of results to return per page. If the response exceeds the maximum number of transactions or 10 MB, the API responds with 'InvalidInput'. */
                MaxResultsPerPage?: number;
                /** @description A string token returned in the response of your previous request. */
                NextToken?: string;
            };
            header?: never;
            path: {
                /** @description An Amazon-defined order identifier, in 3-7-7 format. */
                orderId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Financial Events successfully retrieved. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListFinancialEventsResponse"];
                };
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListFinancialEventsResponse"];
                };
            };
            /** @description Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListFinancialEventsResponse"];
                };
            };
            /** @description The resource specified does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListFinancialEventsResponse"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListFinancialEventsResponse"];
                };
            };
            /** @description An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListFinancialEventsResponse"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListFinancialEventsResponse"];
                };
            };
        };
    };
    listFinancialEvents: {
        parameters: {
            query?: {
                /** @description The maximum number of results to return per page. If the response exceeds the maximum number of transactions or 10 MB, the API responds with 'InvalidInput'. */
                MaxResultsPerPage?: number;
                /** @description A date used for selecting financial events posted after (or at) a specified time. The date-time must be no later than two minutes before the request was submitted, in ISO 8601 date time format. */
                PostedAfter?: string;
                /** @description A date used for selecting financial events posted before (but not at) a specified time. The date-time must be later than PostedAfter and no later than two minutes before the request was submitted, in ISO 8601 date time format. If PostedAfter and PostedBefore are more than 180 days apart, no financial events are returned. You must specify the PostedAfter parameter if you specify the PostedBefore parameter. Default: Now minus two minutes. */
                PostedBefore?: string;
                /** @description A string token returned in the response of your previous request. */
                NextToken?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListFinancialEventsResponse"];
                };
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListFinancialEventsResponse"];
                };
            };
            /** @description Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListFinancialEventsResponse"];
                };
            };
            /** @description The resource specified does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListFinancialEventsResponse"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListFinancialEventsResponse"];
                };
            };
            /** @description An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListFinancialEventsResponse"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListFinancialEventsResponse"];
                };
            };
        };
    };
    getListingsItem: {
        parameters: {
            query: {
                /**
                 * @description A comma-delimited list of Amazon marketplace identifiers for the request.
                 * @example ATVPDKIKX0DER
                 */
                marketplaceIds: string[];
                /**
                 * @description A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: "en_US", "fr_CA", "fr_FR". Localized messages default to "en_US" when a localization is not available in the specified locale.
                 * @example en_US
                 */
                issueLocale?: string;
                /**
                 * @description A comma-delimited list of data sets to include in the response. Default: summaries.
                 * @example summaries
                 */
                includedData?: ("summaries" | "attributes" | "issues" | "offers" | "fulfillmentAvailability" | "procurement")[];
            };
            header?: never;
            path: {
                /** @description A selling partner identifier, such as a merchant account or vendor code. */
                sellerId: string;
                /** @description A selling partner provided identifier for an Amazon listing. */
                sku: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success. */
            200: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Item"];
                };
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description The resource specified does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description The request size exceeded the maximum accepted size. */
            413: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description The request payload is in an unsupported format. */
            415: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
        };
    };
    putListingsItem: {
        parameters: {
            query: {
                /**
                 * @description A comma-delimited list of Amazon marketplace identifiers for the request.
                 * @example ATVPDKIKX0DER
                 */
                marketplaceIds: string[];
                /**
                 * @description A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: "en_US", "fr_CA", "fr_FR". Localized messages default to "en_US" when a localization is not available in the specified locale.
                 * @example en_US
                 */
                issueLocale?: string;
            };
            header?: never;
            path: {
                /** @description A selling partner identifier, such as a merchant account or vendor code. */
                sellerId: string;
                /** @description A selling partner provided identifier for an Amazon listing. */
                sku: string;
            };
            cookie?: never;
        };
        /** @description The request body schema for the putListingsItem operation. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["ListingsItemPutRequest"];
            };
        };
        responses: {
            /** @description Successfully understood the request to create or fully-update a listings item. See the response to determine if the submission has been accepted. */
            200: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListingsItemSubmissionResponse"];
                };
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description The request size exceeded the maximum accepted size. */
            413: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description The request payload is in an unsupported format. */
            415: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
        };
    };
    deleteListingsItem: {
        parameters: {
            query: {
                /**
                 * @description A comma-delimited list of Amazon marketplace identifiers for the request.
                 * @example ATVPDKIKX0DER
                 */
                marketplaceIds: string[];
                /**
                 * @description A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: "en_US", "fr_CA", "fr_FR". Localized messages default to "en_US" when a localization is not available in the specified locale.
                 * @example en_US
                 */
                issueLocale?: string;
            };
            header?: never;
            path: {
                /** @description A selling partner identifier, such as a merchant account or vendor code. */
                sellerId: string;
                /** @description A selling partner provided identifier for an Amazon listing. */
                sku: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully understood the listings item delete request. See the response to determine whether the submission has been accepted. */
            200: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListingsItemSubmissionResponse"];
                };
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description The request size exceeded the maximum accepted size. */
            413: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description The request payload is in an unsupported format. */
            415: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
        };
    };
    patchListingsItem: {
        parameters: {
            query: {
                /**
                 * @description A comma-delimited list of Amazon marketplace identifiers for the request.
                 * @example ATVPDKIKX0DER
                 */
                marketplaceIds: string[];
                /**
                 * @description A locale for localization of issues. When not provided, the default language code of the first marketplace is used. Examples: "en_US", "fr_CA", "fr_FR". Localized messages default to "en_US" when a localization is not available in the specified locale.
                 * @example en_US
                 */
                issueLocale?: string;
            };
            header?: never;
            path: {
                /** @description A selling partner identifier, such as a merchant account or vendor code. */
                sellerId: string;
                /** @description A selling partner provided identifier for an Amazon listing. */
                sku: string;
            };
            cookie?: never;
        };
        /** @description The request body schema for the patchListingsItem operation. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["ListingsItemPatchRequest"];
            };
        };
        responses: {
            /** @description Successfully understood the listings item patch request. See the response to determine if the submission was accepted. */
            200: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListingsItemSubmissionResponse"];
                };
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description The request size exceeded the maximum accepted size. */
            413: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description The request payload is in an unsupported format. */
            415: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
        };
    };
    getListingsRestrictions: {
        parameters: {
            query: {
                /**
                 * @description The Amazon Standard Identification Number (ASIN) of the item.
                 * @example B0000ASIN1
                 */
                asin: string;
                /**
                 * @description The condition used to filter restrictions.
                 * @example used_very_good
                 */
                conditionType?: "new_new" | "new_open_box" | "new_oem" | "refurbished_refurbished" | "used_like_new" | "used_very_good" | "used_good" | "used_acceptable" | "collectible_like_new" | "collectible_very_good" | "collectible_good" | "collectible_acceptable" | "club_club";
                /** @description A selling partner identifier, such as a merchant account. */
                sellerId: string;
                /**
                 * @description A comma-delimited list of Amazon marketplace identifiers for the request.
                 * @example ATVPDKIKX0DER
                 */
                marketplaceIds: string[];
                /**
                 * @description A locale for reason text localization. When not provided, the default language code of the first marketplace is used. Examples: "en_US", "fr_CA", "fr_FR". Localized messages default to "en_US" when a localization is not available in the specified locale.
                 * @example en_US
                 */
                reasonLocale?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully retrieved the listings restrictions. */
            200: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RestrictionList"];
                };
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description The resource specified does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description The request size exceeded the maximum accepted size. */
            413: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description The request payload is in an unsupported format. */
            415: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
        };
    };
    getSubscription: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The type of notification.
                 *
                 *      For more information about notification types, see [the Notifications API Use Case Guide](doc:notifications-api-v1-use-case-guide). */
                notificationType: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success. */
            200: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetSubscriptionResponse"];
                    "Successful Response": unknown;
                };
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetSubscriptionResponse"];
                };
            };
            /** @description Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetSubscriptionResponse"];
                };
            };
            /** @description The resource specified does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetSubscriptionResponse"];
                };
            };
            /** @description The request size exceeded the maximum accepted size. */
            413: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetSubscriptionResponse"];
                };
            };
            /** @description The request payload is in an unsupported format. */
            415: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetSubscriptionResponse"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetSubscriptionResponse"];
                };
            };
            /** @description An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetSubscriptionResponse"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetSubscriptionResponse"];
                };
            };
        };
    };
    createSubscription: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The type of notification.
                 *
                 *      For more information about notification types, see [the Notifications API Use Case Guide](doc:notifications-api-v1-use-case-guide). */
                notificationType: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateSubscriptionRequest"];
            };
        };
        responses: {
            /** @description Success. */
            200: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateSubscriptionResponse"];
                    "Successful Response": unknown;
                };
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateSubscriptionResponse"];
                };
            };
            /** @description Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateSubscriptionResponse"];
                };
            };
            /** @description The resource specified does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateSubscriptionResponse"];
                };
            };
            /** @description The resource specified conflicts with the current state. */
            409: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateSubscriptionResponse"];
                };
            };
            /** @description The request size exceeded the maximum accepted size. */
            413: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateSubscriptionResponse"];
                };
            };
            /** @description The request payload is in an unsupported format. */
            415: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateSubscriptionResponse"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateSubscriptionResponse"];
                };
            };
            /** @description An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateSubscriptionResponse"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateSubscriptionResponse"];
                };
            };
        };
    };
    getSubscriptionById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The identifier for the subscription that you want to get. */
                subscriptionId: string;
                /** @description The type of notification.
                 *
                 *      For more information about notification types, see [the Notifications API Use Case Guide](doc:notifications-api-v1-use-case-guide). */
                notificationType: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success. */
            200: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetSubscriptionByIdResponse"];
                    "Successful Response": unknown;
                };
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetSubscriptionByIdResponse"];
                };
            };
            /** @description Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetSubscriptionByIdResponse"];
                };
            };
            /** @description The resource specified does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetSubscriptionResponse"];
                };
            };
            /** @description The resource specified conflicts with the current state. */
            409: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetSubscriptionByIdResponse"];
                };
            };
            /** @description The request size exceeded the maximum accepted size. */
            413: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetSubscriptionByIdResponse"];
                };
            };
            /** @description The request payload is in an unsupported format. */
            415: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetSubscriptionByIdResponse"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetSubscriptionByIdResponse"];
                };
            };
            /** @description An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetSubscriptionByIdResponse"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetSubscriptionByIdResponse"];
                };
            };
        };
    };
    deleteSubscriptionById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The identifier for the subscription that you want to delete. */
                subscriptionId: string;
                /** @description The type of notification.
                 *
                 *      For more information about notification types, see [the Notifications API Use Case Guide](doc:notifications-api-v1-use-case-guide). */
                notificationType: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success. */
            200: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteSubscriptionByIdResponse"];
                    "Successful Operation Response": unknown;
                };
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteSubscriptionByIdResponse"];
                };
            };
            /** @description Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteSubscriptionByIdResponse"];
                };
            };
            /** @description The resource specified does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteSubscriptionByIdResponse"];
                };
            };
            /** @description The resource specified conflicts with the current state. */
            409: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteSubscriptionByIdResponse"];
                };
            };
            /** @description The request size exceeded the maximum accepted size. */
            413: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteSubscriptionByIdResponse"];
                };
            };
            /** @description The request payload is in an unsupported format. */
            415: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteSubscriptionByIdResponse"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteSubscriptionByIdResponse"];
                };
            };
            /** @description An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteSubscriptionByIdResponse"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteSubscriptionByIdResponse"];
                };
            };
        };
    };
    getDestinations: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success. */
            200: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetDestinationsResponse"];
                    "Successful Response": unknown;
                };
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetDestinationsResponse"];
                };
            };
            /** @description Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetDestinationsResponse"];
                };
            };
            /** @description The resource specified does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetDestinationsResponse"];
                };
            };
            /** @description The resource specified conflicts with the current state. */
            409: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetDestinationsResponse"];
                };
            };
            /** @description The request size exceeded the maximum accepted size. */
            413: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetDestinationsResponse"];
                };
            };
            /** @description The request payload is in an unsupported format. */
            415: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetDestinationsResponse"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetDestinationsResponse"];
                };
            };
            /** @description An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetDestinationsResponse"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetDestinationsResponse"];
                };
            };
        };
    };
    createDestination: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateDestinationRequest"];
            };
        };
        responses: {
            /** @description Success. */
            200: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateDestinationResponse"];
                    "Successful Response": unknown;
                };
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateDestinationResponse"];
                };
            };
            /** @description Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateDestinationResponse"];
                };
            };
            /** @description The resource specified does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateDestinationResponse"];
                };
            };
            /** @description The resource specified conflicts with the current state. */
            409: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateDestinationResponse"];
                };
            };
            /** @description The request size exceeded the maximum accepted size. */
            413: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateDestinationResponse"];
                };
            };
            /** @description The request payload is in an unsupported format. */
            415: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateDestinationResponse"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateDestinationResponse"];
                };
            };
            /** @description An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateDestinationResponse"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateDestinationResponse"];
                };
            };
        };
    };
    getDestination: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The identifier generated when you created the destination. */
                destinationId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success. */
            200: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetDestinationResponse"];
                    "Successful Response": unknown;
                };
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetDestinationResponse"];
                };
            };
            /** @description Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetDestinationResponse"];
                };
            };
            /** @description The resource specified does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetDestinationResponse"];
                };
            };
            /** @description The resource specified conflicts with the current state. */
            409: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetDestinationResponse"];
                };
            };
            /** @description The request size exceeded the maximum accepted size. */
            413: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetDestinationResponse"];
                };
            };
            /** @description The request payload is in an unsupported format. */
            415: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetDestinationResponse"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetDestinationResponse"];
                };
            };
            /** @description An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetDestinationResponse"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetDestinationResponse"];
                };
            };
        };
    };
    deleteDestination: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The identifier for the destination that you want to delete. */
                destinationId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success. */
            200: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteDestinationResponse"];
                    "Successful Response": unknown;
                };
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteDestinationResponse"];
                };
            };
            /** @description Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteDestinationResponse"];
                };
            };
            /** @description The resource specified does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteDestinationResponse"];
                };
            };
            /** @description The resource specified conflicts with the current state. */
            409: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteDestinationResponse"];
                };
            };
            /** @description The request size exceeded the maximum accepted size. */
            413: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteDestinationResponse"];
                };
            };
            /** @description The request payload is in an unsupported format. */
            415: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteDestinationResponse"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteDestinationResponse"];
                };
            };
            /** @description An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteDestinationResponse"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DeleteDestinationResponse"];
                };
            };
        };
    };
    getOrders: {
        parameters: {
            query: {
                /** @description A date used for selecting orders created after (or at) a specified time. Only orders placed after the specified time are returned. Either the CreatedAfter parameter or the LastUpdatedAfter parameter is required. Both cannot be empty. The date must be in ISO 8601 format. */
                CreatedAfter?: string;
                /** @description A date used for selecting orders created before (or at) a specified time. Only orders placed before the specified time are returned. The date must be in ISO 8601 format. */
                CreatedBefore?: string;
                /** @description A date used for selecting orders that were last updated after (or at) a specified time. An update is defined as any change in order status, including the creation of a new order. Includes updates made by Amazon and by the seller. The date must be in ISO 8601 format. */
                LastUpdatedAfter?: string;
                /** @description A date used for selecting orders that were last updated before (or at) a specified time. An update is defined as any change in order status, including the creation of a new order. Includes updates made by Amazon and by the seller. The date must be in ISO 8601 format. */
                LastUpdatedBefore?: string;
                /** @description A list of `OrderStatus` values used to filter the results.
                 *
                 *     **Possible values:**
                 *     - `PendingAvailability` (This status is available for pre-orders only. The order has been placed, payment has not been authorized, and the release date of the item is in the future.)
                 *     - `Pending` (The order has been placed but payment has not been authorized.)
                 *     - `Unshipped` (Payment has been authorized and the order is ready for shipment, but no items in the order have been shipped.)
                 *     - `PartiallyShipped` (One or more, but not all, items in the order have been shipped.)
                 *     - `Shipped` (All items in the order have been shipped.)
                 *     - `InvoiceUnconfirmed` (All items in the order have been shipped. The seller has not yet given confirmation to Amazon that the invoice has been shipped to the buyer.)
                 *     - `Canceled` (The order has been canceled.)
                 *     - `Unfulfillable` (The order cannot be fulfilled. This state applies only to Multi-Channel Fulfillment orders.) */
                OrderStatuses?: string[];
                /** @description A list of MarketplaceId values. Used to select orders that were placed in the specified marketplaces.
                 *
                 *     Refer to [Marketplace IDs](https://developer-docs.amazon.com/sp-api/docs/marketplace-ids) for a complete list of marketplaceId values. */
                MarketplaceIds: string[];
                /** @description A list that indicates how an order was fulfilled. Filters the results by fulfillment channel. Possible values: AFN (Fulfillment by Amazon); MFN (Fulfilled by the seller). */
                FulfillmentChannels?: string[];
                /** @description A list of payment method values. Used to select orders paid using the specified payment methods. Possible values: COD (Cash on delivery); CVS (Convenience store payment); Other (Any payment method other than COD or CVS). */
                PaymentMethods?: string[];
                /** @description The email address of a buyer. Used to select orders that contain the specified email address. */
                BuyerEmail?: string;
                /** @description An order identifier that is specified by the seller. Used to select only the orders that match the order identifier. If SellerOrderId is specified, then FulfillmentChannels, OrderStatuses, PaymentMethod, LastUpdatedAfter, LastUpdatedBefore, and BuyerEmail cannot be specified. */
                SellerOrderId?: string;
                /** @description A number that indicates the maximum number of orders that can be returned per page. Value must be 1 - 100. Default 100. */
                MaxResultsPerPage?: number;
                /** @description A list of `EasyShipShipmentStatus` values. Used to select Easy Ship orders with statuses that match the specified values. If `EasyShipShipmentStatus` is specified, only Amazon Easy Ship orders are returned.
                 *
                 *     **Possible values:**
                 *     - `PendingSchedule` (The package is awaiting the schedule for pick-up.)
                 *     - `PendingPickUp` (Amazon has not yet picked up the package from the seller.)
                 *     - `PendingDropOff` (The seller will deliver the package to the carrier.)
                 *     - `LabelCanceled` (The seller canceled the pickup.)
                 *     - `PickedUp` (Amazon has picked up the package from the seller.)
                 *     - `DroppedOff` (The package is delivered to the carrier by the seller.)
                 *     - `AtOriginFC` (The packaged is at the origin fulfillment center.)
                 *     - `AtDestinationFC` (The package is at the destination fulfillment center.)
                 *     - `Delivered` (The package has been delivered.)
                 *     - `RejectedByBuyer` (The package has been rejected by the buyer.)
                 *     - `Undeliverable` (The package cannot be delivered.)
                 *     - `ReturningToSeller` (The package was not delivered and is being returned to the seller.)
                 *     - `ReturnedToSeller` (The package was not delivered and was returned to the seller.)
                 *     - `Lost` (The package is lost.)
                 *     - `OutForDelivery` (The package is out for delivery.)
                 *     - `Damaged` (The package was damaged by the carrier.) */
                EasyShipShipmentStatuses?: string[];
                /** @description A list of `ElectronicInvoiceStatus` values. Used to select orders with electronic invoice statuses that match the specified values.
                 *
                 *     **Possible values:**
                 *     - `NotRequired` (Electronic invoice submission is not required for this order.)
                 *     - `NotFound` (The electronic invoice was not submitted for this order.)
                 *     - `Processing` (The electronic invoice is being processed for this order.)
                 *     - `Errored` (The last submitted electronic invoice was rejected for this order.)
                 *     - `Accepted` (The last submitted electronic invoice was submitted and accepted.) */
                ElectronicInvoiceStatuses?: string[];
                /** @description A string token returned in the response of your previous request. */
                NextToken?: string;
                /** @description A list of AmazonOrderId values. An AmazonOrderId is an Amazon-defined order identifier, in 3-7-7 format. */
                AmazonOrderIds?: string[];
                /** @description Denotes the recommended sourceId where the order should be fulfilled from. */
                ActualFulfillmentSupplySourceId?: string;
                /** @description When true, this order is marked to be picked up from a store rather than delivered. */
                IsISPU?: boolean;
                /** @description The store chain store identifier. Linked to a specific store in a store chain. */
                StoreChainStoreId?: string;
                /** @description A date used for selecting orders with a earliest delivery date before (or at) a specified time. The date must be in ISO 8601 format. */
                EarliestDeliveryDateBefore?: string;
                /** @description A date used for selecting orders with a earliest delivery date after (or at) a specified time. The date must be in ISO 8601 format. */
                EarliestDeliveryDateAfter?: string;
                /** @description A date used for selecting orders with a latest delivery date before (or at) a specified time. The date must be in ISO 8601 format. */
                LatestDeliveryDateBefore?: string;
                /** @description A date used for selecting orders with a latest delivery date after (or at) a specified time. The date must be in ISO 8601 format. */
                LatestDeliveryDateAfter?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success. */
            200: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrdersResponse"];
                };
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrdersResponse"];
                };
            };
            /** @description Indicates access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrdersResponse"];
                };
            };
            /** @description The resource specified does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrdersResponse"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrdersResponse"];
                };
            };
            /** @description An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrdersResponse"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrdersResponse"];
                };
            };
        };
    };
    getOrder: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description An Amazon-defined order identifier, in 3-7-7 format. */
                orderId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success. */
            200: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrderResponse"];
                };
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrderResponse"];
                };
            };
            /** @description Indicates access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrderResponse"];
                };
            };
            /** @description The resource specified does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrderResponse"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrderResponse"];
                };
            };
            /** @description An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrderResponse"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrderResponse"];
                };
            };
        };
    };
    getOrderBuyerInfo: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description An orderId is an Amazon-defined order identifier, in 3-7-7 format. */
                orderId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success. */
            200: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrderBuyerInfoResponse"];
                };
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrderBuyerInfoResponse"];
                };
            };
            /** @description Indicates access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrderBuyerInfoResponse"];
                };
            };
            /** @description The resource specified does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrderBuyerInfoResponse"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrderBuyerInfoResponse"];
                };
            };
            /** @description An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrderBuyerInfoResponse"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrderBuyerInfoResponse"];
                };
            };
        };
    };
    getOrderAddress: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description An orderId is an Amazon-defined order identifier, in 3-7-7 format. */
                orderId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success. */
            200: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrderAddressResponse"];
                };
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrderAddressResponse"];
                };
            };
            /** @description Indicates access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrderAddressResponse"];
                };
            };
            /** @description The resource specified does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrderAddressResponse"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrderAddressResponse"];
                };
            };
            /** @description An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrderAddressResponse"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrderAddressResponse"];
                };
            };
        };
    };
    getOrderItems: {
        parameters: {
            query?: {
                /** @description A string token returned in the response of your previous request. */
                NextToken?: string;
            };
            header?: never;
            path: {
                /** @description An Amazon-defined order identifier, in 3-7-7 format. */
                orderId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success. */
            200: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrderItemsResponse"];
                };
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrderItemsResponse"];
                };
            };
            /** @description Indicates access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrderItemsResponse"];
                };
            };
            /** @description The resource specified does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrderItemsResponse"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrderItemsResponse"];
                };
            };
            /** @description An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrderItemsResponse"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrderItemsResponse"];
                };
            };
        };
    };
    getOrderItemsBuyerInfo: {
        parameters: {
            query?: {
                /** @description A string token returned in the response of your previous request. */
                NextToken?: string;
            };
            header?: never;
            path: {
                /** @description An Amazon-defined order identifier, in 3-7-7 format. */
                orderId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success. */
            200: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrderItemsBuyerInfoResponse"];
                };
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrderItemsBuyerInfoResponse"];
                };
            };
            /** @description Indicates access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrderItemsBuyerInfoResponse"];
                };
            };
            /** @description The resource specified does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrderItemsBuyerInfoResponse"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrderItemsBuyerInfoResponse"];
                };
            };
            /** @description An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrderItemsBuyerInfoResponse"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrderItemsBuyerInfoResponse"];
                };
            };
        };
    };
    updateShipmentStatus: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description An Amazon-defined order identifier, in 3-7-7 format. */
                orderId: string;
            };
            cookie?: never;
        };
        /** @description The request body for the updateShipmentStatus operation. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateShipmentStatusRequest"];
            };
        };
        responses: {
            /** @description Success. */
            204: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateShipmentStatusErrorResponse"];
                };
            };
            /** @description Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateShipmentStatusErrorResponse"];
                };
            };
            /** @description The resource specified does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateShipmentStatusErrorResponse"];
                };
            };
            /** @description The request size exceeded the maximum accepted size. */
            413: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateShipmentStatusErrorResponse"];
                };
            };
            /** @description The request payload is in an unsupported format. */
            415: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateShipmentStatusErrorResponse"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateShipmentStatusErrorResponse"];
                };
            };
            /** @description An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateShipmentStatusErrorResponse"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateShipmentStatusErrorResponse"];
                };
            };
        };
    };
    getOrderRegulatedInfo: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description An orderId is an Amazon-defined order identifier, in 3-7-7 format. */
                orderId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success. */
            200: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrderRegulatedInfoResponse"];
                    PendingOrder: unknown;
                    ApprovedOrder: unknown;
                    RejectedOrder: unknown;
                };
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrderRegulatedInfoResponse"];
                };
            };
            /** @description Indicates access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrderRegulatedInfoResponse"];
                };
            };
            /** @description The resource specified does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrderRegulatedInfoResponse"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrderRegulatedInfoResponse"];
                };
            };
            /** @description An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrderRegulatedInfoResponse"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrderRegulatedInfoResponse"];
                };
            };
        };
    };
    updateVerificationStatus: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description An orderId is an Amazon-defined order identifier, in 3-7-7 format. */
                orderId: string;
            };
            cookie?: never;
        };
        /** @description The request body for the updateVerificationStatus operation. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateVerificationStatusRequest"];
            };
        };
        responses: {
            /** @description Success. */
            204: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateVerificationStatusErrorResponse"];
                };
            };
            /** @description Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateVerificationStatusErrorResponse"];
                };
            };
            /** @description The resource specified does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateVerificationStatusErrorResponse"];
                };
            };
            /** @description The request size exceeded the maximum accepted size. */
            413: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateVerificationStatusErrorResponse"];
                };
            };
            /** @description The request payload is in an unsupported format. */
            415: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateVerificationStatusErrorResponse"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateVerificationStatusErrorResponse"];
                };
            };
            /** @description An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateVerificationStatusErrorResponse"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateVerificationStatusErrorResponse"];
                };
            };
        };
    };
    confirmShipment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description An Amazon-defined order identifier, in 3-7-7 format. */
                orderId: string;
            };
            cookie?: never;
        };
        /** @description Request body of confirmShipment. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["ConfirmShipmentRequest"];
            };
        };
        responses: {
            /** @description Success. */
            204: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConfirmShipmentErrorResponse"];
                };
            };
            /** @description The request's Authorization header is not formatted correctly or does not contain a valid token. */
            401: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConfirmShipmentErrorResponse"];
                };
            };
            /** @description Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConfirmShipmentErrorResponse"];
                };
            };
            /** @description The specified resource does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConfirmShipmentErrorResponse"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConfirmShipmentErrorResponse"];
                };
            };
            /** @description An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConfirmShipmentErrorResponse"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConfirmShipmentErrorResponse"];
                };
            };
        };
    };
    getMyFeesEstimateForSKU: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Used to identify an item in the given marketplace. SellerSKU is qualified by the seller's SellerId, which is included with every operation that you submit. */
                SellerSKU: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GetMyFeesEstimateRequest"];
            };
        };
        responses: {
            /** @description Success. */
            200: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetMyFeesEstimateResponse"];
                };
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetMyFeesEstimateResponse"];
                };
            };
            /** @description The request's Authorization header is not formatted correctly or does not contain a valid token. */
            401: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetMyFeesEstimateResponse"];
                };
            };
            /** @description Indicates access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetMyFeesEstimateResponse"];
                };
            };
            /** @description The specified resource does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetMyFeesEstimateResponse"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetMyFeesEstimateResponse"];
                };
            };
            /** @description An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetMyFeesEstimateResponse"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetMyFeesEstimateResponse"];
                };
            };
        };
    };
    getMyFeesEstimateForASIN: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The Amazon Standard Identification Number (ASIN) of the item. */
                Asin: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GetMyFeesEstimateRequest"];
            };
        };
        responses: {
            /** @description Success. */
            200: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetMyFeesEstimateResponse"];
                };
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetMyFeesEstimateResponse"];
                };
            };
            /** @description The request's Authorization header is not formatted correctly or does not contain a valid token. */
            401: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetMyFeesEstimateResponse"];
                };
            };
            /** @description Indicates access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetMyFeesEstimateResponse"];
                };
            };
            /** @description The specified resource does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetMyFeesEstimateResponse"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetMyFeesEstimateResponse"];
                };
            };
            /** @description An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetMyFeesEstimateResponse"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetMyFeesEstimateResponse"];
                };
            };
        };
    };
    getMyFeesEstimates: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GetMyFeesEstimatesRequest"];
            };
        };
        responses: {
            /** @description Success. */
            200: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetMyFeesEstimatesResponse"];
                };
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetMyFeesEstimatesErrorList"];
                };
            };
            /** @description The request's Authorization header is not formatted correctly or does not contain a valid token. */
            401: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetMyFeesEstimatesErrorList"];
                };
            };
            /** @description Indicates access to the resource is forbidden. Possible reasons include **Access Denied**, **Unauthorized**, **Expired Token**, or **Invalid Signature**. */
            403: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetMyFeesEstimatesErrorList"];
                };
            };
            /** @description The specified resource does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetMyFeesEstimatesErrorList"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetMyFeesEstimatesErrorList"];
                };
            };
            /** @description An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetMyFeesEstimatesErrorList"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetMyFeesEstimatesErrorList"];
                };
            };
        };
    };
    getFeaturedOfferExpectedPriceBatch: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GetFeaturedOfferExpectedPriceBatchRequest"];
            };
        };
        responses: {
            /** @description Success. */
            200: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetFeaturedOfferExpectedPriceBatchResponse"];
                };
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Errors"];
                };
            };
            /** @description The request's Authorization header is not formatted correctly or does not contain a valid token. */
            401: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Errors"];
                };
            };
            /** @description Indicates access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Errors"];
                };
            };
            /** @description The specified resource does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Errors"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Errors"];
                };
            };
            /** @description An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Errors"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Errors"];
                };
            };
        };
    };
    getReports: {
        parameters: {
            query?: {
                /** @description A list of report types used to filter reports. Refer to [Report Type Values](https://developer-docs.amazon.com/sp-api/docs/report-type-values) for more information. When reportTypes is provided, the other filter parameters (processingStatuses, marketplaceIds, createdSince, createdUntil) and pageSize may also be provided. Either reportTypes or nextToken is required. */
                reportTypes?: string[];
                /** @description A list of processing statuses used to filter reports. */
                processingStatuses?: ("CANCELLED" | "DONE" | "FATAL" | "IN_PROGRESS" | "IN_QUEUE")[];
                /** @description A list of marketplace identifiers used to filter reports. The reports returned will match at least one of the marketplaces that you specify. */
                marketplaceIds?: string[];
                /** @description The maximum number of reports to return in a single call. */
                pageSize?: number;
                /** @description The earliest report creation date and time for reports to include in the response, in ISO 8601 date time format. The default is 90 days ago. Reports are retained for a maximum of 90 days. */
                createdSince?: string;
                /** @description The latest report creation date and time for reports to include in the response, in ISO 8601 date time format. The default is now. */
                createdUntil?: string;
                /** @description A string token returned in the response to your previous request. nextToken is returned when the number of results exceeds the specified pageSize value. To get the next page of results, call the getReports operation and include this token as the only parameter. Specifying nextToken with any other parameters will cause the request to fail. */
                nextToken?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success. */
            200: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetReportsResponse"];
                };
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description The request's Authorization header is not formatted correctly or does not contain a valid token. */
            401: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description The specified resource does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description The request's Content-Type header is invalid. */
            415: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
        };
    };
    createReport: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateReportSpecification"];
            };
        };
        responses: {
            /** @description Success. */
            202: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateReportResponse"];
                };
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description The request's Authorization header is not formatted correctly or does not contain a valid token. */
            401: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description The specified resource does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description The request's Content-Type header is invalid. */
            415: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
        };
    };
    getReport: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The identifier for the report. This identifier is unique only in combination with a seller ID. */
                reportId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success. */
            200: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Report"];
                };
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description The request's Authorization header is not formatted correctly or does not contain a valid token. */
            401: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description The specified resource does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description The request's Content-Type header is invalid. */
            415: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
        };
    };
    cancelReport: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The identifier for the report. This identifier is unique only in combination with a seller ID. */
                reportId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success. */
            200: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description The request's Authorization header is not formatted correctly or does not contain a valid token. */
            401: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description The specified resource does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description The request's Content-Type header is invalid. */
            415: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
        };
    };
    getReportSchedules: {
        parameters: {
            query: {
                /** @description A list of report types used to filter report schedules. Refer to [Report Type Values](https://developer-docs.amazon.com/sp-api/docs/report-type-values) for more information. */
                reportTypes: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success. */
            200: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReportScheduleList"];
                };
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description The request's Authorization header is not formatted correctly or does not contain a valid token. */
            401: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description The specified resource does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description The request's Content-Type header is invalid. */
            415: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
        };
    };
    createReportSchedule: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateReportScheduleSpecification"];
            };
        };
        responses: {
            /** @description Success. */
            201: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateReportScheduleResponse"];
                };
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description The request's Authorization header is not formatted correctly or does not contain a valid token. */
            401: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description The specified resource does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description The request's Content-Type header is invalid. */
            415: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
        };
    };
    getReportSchedule: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The identifier for the report schedule. This identifier is unique only in combination with a seller ID. */
                reportScheduleId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success. */
            200: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReportSchedule"];
                };
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description The request's Authorization header is not formatted correctly or does not contain a valid token. */
            401: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description The specified resource does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description The request's Content-Type header is invalid. */
            415: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
        };
    };
    cancelReportSchedule: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The identifier for the report schedule. This identifier is unique only in combination with a seller ID. */
                reportScheduleId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success. */
            200: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description The request's Authorization header is not formatted correctly or does not contain a valid token. */
            401: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description The specified resource does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description The request's Content-Type header is invalid. */
            415: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
        };
    };
    getReportDocument: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The identifier for the report document. */
                reportDocumentId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success. */
            200: {
                headers: {
                    /** @description Unique request reference ID. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReportDocument"];
                };
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    /** @description Unique request reference ID. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description The request's Authorization header is not formatted correctly or does not contain a valid token. */
            401: {
                headers: {
                    /** @description Unique request reference ID. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description Indicates access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {
                    /** @description Unique request reference ID. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description The specified resource does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference ID. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description The request's Content-Type header is invalid. */
            415: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference ID. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference ID. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference ID. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
        };
    };
    getOrderMetrics: {
        parameters: {
            query: {
                /** @description A marketplace identifier. This specifies the marketplace in which the order was placed. Only one marketplace can be specified.
                 *
                 *     For example, ATVPDKIKX0DER indicates the US marketplace. */
                marketplaceIds: string[];
                /** @description A time interval used for selecting order metrics. This takes the form of two dates separated by two hyphens (first date is inclusive; second date is exclusive). Dates are in ISO8601 format and must represent absolute time (either Z notation or offset notation). Example: 2018-09-01T00:00:00-07:00--2018-09-04T00:00:00-07:00 requests order metrics for Sept 1st, 2nd and 3rd in the -07:00 zone. */
                interval: string;
                /** @description An IANA-compatible time zone for determining the day boundary. Required when specifying a granularity value greater than Hour. The granularityTimeZone value must align with the offset of the specified interval value. For example, if the interval value uses Z notation, then granularityTimeZone must be UTC. If the interval value uses an offset, then granularityTimeZone must be an IANA-compatible time zone that matches the offset. Example: US/Pacific to compute day boundaries, accounting for daylight time savings, for US/Pacific zone. */
                granularityTimeZone?: string;
                /** @description The granularity of the grouping of order metrics, based on a unit of time. Specifying granularity=Hour results in a successful request only if the interval specified is less than or equal to 30 days from now. For all other granularities, the interval specified must be less or equal to 2 years from now. Specifying granularity=Total results in order metrics that are aggregated over the entire interval that you specify. If the interval start and end date don’t align with the specified granularity, the head and tail end of the response interval will contain partial data. Example: Day to get a daily breakdown of the request interval, where the day boundary is defined by the granularityTimeZone. */
                granularity: "Hour" | "Day" | "Week" | "Month" | "Year" | "Total";
                /** @description Filters the results by the buyer type that you specify, B2B (business to business) or B2C (business to customer). Example: B2B, if you want the response to include order metrics for only B2B buyers. */
                buyerType?: "B2B" | "B2C" | "All";
                /** @description Filters the results by the fulfillment network that you specify, MFN (merchant fulfillment network) or AFN (Amazon fulfillment network). Do not include this filter if you want the response to include order metrics for all fulfillment networks. Example: AFN, if you want the response to include order metrics for only Amazon fulfillment network. */
                fulfillmentNetwork?: string;
                /** @description Specifies the day that the week starts on when granularity=Week, either Monday or Sunday. Default: Monday. Example: Sunday, if you want the week to start on a Sunday. */
                firstDayOfWeek?: "Monday" | "Sunday";
                /** @description Filters the results by the ASIN that you specify. Specifying both ASIN and SKU returns an error. Do not include this filter if you want the response to include order metrics for all ASINs. Example: B0792R1RSN, if you want the response to include order metrics for only ASIN B0792R1RSN. */
                asin?: string;
                /** @description Filters the results by the SKU that you specify. Specifying both ASIN and SKU returns an error. Do not include this filter if you want the response to include order metrics for all SKUs. Example: TestSKU, if you want the response to include order metrics for only SKU TestSKU. */
                sku?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OrderMetric action taken on the resource OrderMetrics. */
            200: {
                headers: {
                    /** @description unique request reference id. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrderMetricsResponse"];
                    payload: unknown;
                };
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    /** @description Unique request reference id. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrderMetricsResponse"];
                };
            };
            /** @description 403 can be caused for reasons like Access Denied, Unauthorized, Expired Token, Invalid Signature or Resource Not Found. */
            403: {
                headers: {
                    /** @description Unique request reference id. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrderMetricsResponse"];
                };
            };
            /** @description The resource specified does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference id. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrderMetricsResponse"];
                };
            };
            /** @description The request size exceeded the maximum accepted size. */
            413: {
                headers: {
                    /** @description Unique request reference id. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrderMetricsResponse"];
                };
            };
            /** @description The entity of the request is in a format not supported by the requested resource. */
            415: {
                headers: {
                    /** @description Unique request reference id. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrderMetricsResponse"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference id. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrderMetricsResponse"];
                };
            };
            /** @description Encountered an unexpected condition which prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference id. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrderMetricsResponse"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference id. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetOrderMetricsResponse"];
                };
            };
        };
    };
    getMarketplaceParticipations: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Marketplace participations successfully retrieved. */
            200: {
                headers: {
                    /** @description unique request reference id. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetMarketplaceParticipationsResponse"];
                    payload: unknown;
                };
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    /** @description Unique request reference id. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetMarketplaceParticipationsResponse"];
                };
            };
            /** @description 403 can be caused for reasons like Access Denied, Unauthorized, Expired Token, Invalid Signature or Resource Not Found. */
            403: {
                headers: {
                    /** @description Unique request reference id. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetMarketplaceParticipationsResponse"];
                };
            };
            /** @description The resource specified does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference id. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetMarketplaceParticipationsResponse"];
                };
            };
            /** @description The request size exceeded the maximum accepted size. */
            413: {
                headers: {
                    /** @description Unique request reference id. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetMarketplaceParticipationsResponse"];
                };
            };
            /** @description The entity of the request is in a format not supported by the requested resource. */
            415: {
                headers: {
                    /** @description Unique request reference id. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetMarketplaceParticipationsResponse"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference id. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetMarketplaceParticipationsResponse"];
                };
            };
            /** @description Encountered an unexpected condition which prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference id. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetMarketplaceParticipationsResponse"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference id. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetMarketplaceParticipationsResponse"];
                };
            };
        };
    };
    getServiceJobByServiceJobId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A service job identifier. */
                serviceJobId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success response. */
            200: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetServiceJobByServiceJobIdResponse"];
                };
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetServiceJobByServiceJobIdResponse"];
                };
            };
            /** @description Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetServiceJobByServiceJobIdResponse"];
                };
            };
            /** @description The resource specified does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetServiceJobByServiceJobIdResponse"];
                };
            };
            /** @description The request size exceeded the maximum accepted size. */
            413: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetServiceJobByServiceJobIdResponse"];
                };
            };
            /** @description The request payload is in an unsupported format. */
            415: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetServiceJobByServiceJobIdResponse"];
                };
            };
            /** @description Unprocessable Entity. Unable to process the contained instructions. */
            422: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetServiceJobByServiceJobIdResponse"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetServiceJobByServiceJobIdResponse"];
                };
            };
            /** @description An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetServiceJobByServiceJobIdResponse"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetServiceJobByServiceJobIdResponse"];
                };
            };
        };
    };
    cancelServiceJobByServiceJobId: {
        parameters: {
            query: {
                /** @description A cancel reason code that specifies the reason for cancelling a service job. */
                cancellationReasonCode: string;
            };
            header?: never;
            path: {
                /** @description An Amazon defined service job identifier. */
                serviceJobId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success response. */
            200: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CancelServiceJobByServiceJobIdResponse"];
                };
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CancelServiceJobByServiceJobIdResponse"];
                };
            };
            /** @description Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CancelServiceJobByServiceJobIdResponse"];
                };
            };
            /** @description The resource specified does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CancelServiceJobByServiceJobIdResponse"];
                };
            };
            /** @description The request size exceeded the maximum accepted size. */
            413: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CancelServiceJobByServiceJobIdResponse"];
                };
            };
            /** @description The request payload is in an unsupported format. */
            415: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CancelServiceJobByServiceJobIdResponse"];
                };
            };
            /** @description Unprocessable Entity. Unable to process the contained instructions. */
            422: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CancelServiceJobByServiceJobIdResponse"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CancelServiceJobByServiceJobIdResponse"];
                };
            };
            /** @description An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CancelServiceJobByServiceJobIdResponse"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CancelServiceJobByServiceJobIdResponse"];
                };
            };
        };
    };
    completeServiceJobByServiceJobId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description An Amazon defined service job identifier. */
                serviceJobId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success response. */
            200: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CompleteServiceJobByServiceJobIdResponse"];
                };
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CompleteServiceJobByServiceJobIdResponse"];
                };
            };
            /** @description Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CompleteServiceJobByServiceJobIdResponse"];
                };
            };
            /** @description The resource specified does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CompleteServiceJobByServiceJobIdResponse"];
                };
            };
            /** @description The request size exceeded the maximum accepted size. */
            413: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CompleteServiceJobByServiceJobIdResponse"];
                };
            };
            /** @description The request payload is in an unsupported format. */
            415: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CompleteServiceJobByServiceJobIdResponse"];
                };
            };
            /** @description Unprocessable Entity. Unable to process the contained instructions. */
            422: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CompleteServiceJobByServiceJobIdResponse"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CompleteServiceJobByServiceJobIdResponse"];
                };
            };
            /** @description An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CompleteServiceJobByServiceJobIdResponse"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CompleteServiceJobByServiceJobIdResponse"];
                };
            };
        };
    };
    getServiceJobs: {
        parameters: {
            query: {
                /** @description List of service order ids for the query you want to perform.Max values supported 20. */
                serviceOrderIds?: string[];
                /** @description A list of one or more job status by which to filter the list of jobs. */
                serviceJobStatus?: ("NOT_SERVICED" | "CANCELLED" | "COMPLETED" | "PENDING_SCHEDULE" | "NOT_FULFILLABLE" | "HOLD" | "PAYMENT_DECLINED")[];
                /** @description String returned in the response of your previous request. */
                pageToken?: string;
                /** @description A non-negative integer that indicates the maximum number of jobs to return in the list, Value must be 1 - 20. Default 20. */
                pageSize?: number;
                /** @description Sort fields on which you want to sort the output. */
                sortField?: "JOB_DATE" | "JOB_STATUS";
                /** @description Sort order for the query you want to perform. */
                sortOrder?: "ASC" | "DESC";
                /** @description A date used for selecting jobs created at or after a specified time. Must be in ISO 8601 format. Required if `LastUpdatedAfter` is not specified. Specifying both `CreatedAfter` and `LastUpdatedAfter` returns an error. */
                createdAfter?: string;
                /** @description A date used for selecting jobs created at or before a specified time. Must be in ISO 8601 format. */
                createdBefore?: string;
                /** @description A date used for selecting jobs updated at or after a specified time. Must be in ISO 8601 format. Required if `createdAfter` is not specified. Specifying both `CreatedAfter` and `LastUpdatedAfter` returns an error. */
                lastUpdatedAfter?: string;
                /** @description A date used for selecting jobs updated at or before a specified time. Must be in ISO 8601 format. */
                lastUpdatedBefore?: string;
                /** @description A date used for filtering jobs schedules at or after a specified time. Must be in ISO 8601 format. Schedule end date should not be earlier than schedule start date. */
                scheduleStartDate?: string;
                /** @description A date used for filtering jobs schedules at or before a specified time. Must be in ISO 8601 format. Schedule end date should not be earlier than schedule start date. */
                scheduleEndDate?: string;
                /** @description Used to select jobs that were placed in the specified marketplaces. */
                marketplaceIds: string[];
                /** @description List of Amazon Standard Identification Numbers (ASIN) of the items. Max values supported is 20. */
                asins?: string[];
                /** @description A defined set of related knowledge, skills, experience, tools, materials, and work processes common to service delivery for a set of products and/or service scenarios. Max values supported is 20. */
                requiredSkills?: string[];
                /** @description List of Amazon-defined identifiers for the region scope. Max values supported is 50. */
                storeIds?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success response. */
            200: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetServiceJobsResponse"];
                };
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetServiceJobsResponse"];
                };
            };
            /** @description Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetServiceJobsResponse"];
                };
            };
            /** @description The resource specified does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetServiceJobsResponse"];
                };
            };
            /** @description The request size exceeded the maximum accepted size. */
            413: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetServiceJobsResponse"];
                };
            };
            /** @description The request payload is in an unsupported format. */
            415: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetServiceJobsResponse"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetServiceJobsResponse"];
                };
            };
            /** @description An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetServiceJobsResponse"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetServiceJobsResponse"];
                };
            };
        };
    };
    addAppointmentForServiceJobByServiceJobId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description An Amazon defined service job identifier. */
                serviceJobId: string;
            };
            cookie?: never;
        };
        /** @description Add appointment operation input details. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["AddAppointmentRequest"];
            };
        };
        responses: {
            /** @description Success response. */
            200: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SetAppointmentResponse"];
                };
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SetAppointmentResponse"];
                };
            };
            /** @description Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SetAppointmentResponse"];
                };
            };
            /** @description The resource specified does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SetAppointmentResponse"];
                };
            };
            /** @description The request size exceeded the maximum accepted size. */
            413: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SetAppointmentResponse"];
                };
            };
            /** @description The request payload is in an unsupported format. */
            415: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SetAppointmentResponse"];
                };
            };
            /** @description Unprocessable Entity. Unable to process the contained instructions. */
            422: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SetAppointmentResponse"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SetAppointmentResponse"];
                };
            };
            /** @description Encountered an unexpected condition which prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SetAppointmentResponse"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SetAppointmentResponse"];
                };
            };
        };
    };
    rescheduleAppointmentForServiceJobByServiceJobId: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description An Amazon defined service job identifier. */
                serviceJobId: string;
                /** @description An existing appointment identifier for the Service Job. */
                appointmentId: string;
            };
            cookie?: never;
        };
        /** @description Reschedule appointment operation input details. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["RescheduleAppointmentRequest"];
            };
        };
        responses: {
            /** @description Success response. */
            200: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SetAppointmentResponse"];
                };
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SetAppointmentResponse"];
                };
            };
            /** @description Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SetAppointmentResponse"];
                };
            };
            /** @description The resource specified does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SetAppointmentResponse"];
                };
            };
            /** @description The request size exceeded the maximum accepted size. */
            413: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SetAppointmentResponse"];
                };
            };
            /** @description The request payload is in an unsupported format. */
            415: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SetAppointmentResponse"];
                };
            };
            /** @description Unprocessable Entity. Unable to process the contained instructions. */
            422: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SetAppointmentResponse"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SetAppointmentResponse"];
                };
            };
            /** @description Encountered an unexpected condition which prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SetAppointmentResponse"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SetAppointmentResponse"];
                };
            };
        };
    };
    assignAppointmentResources: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description An Amazon-defined service job identifier. Get this value by calling the `getServiceJobs` operation of the Services API. */
                serviceJobId: string;
                /** @description An Amazon-defined identifier of active service job appointment. */
                appointmentId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AssignAppointmentResourcesRequest"];
            };
        };
        responses: {
            /** @description Success response. */
            200: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AssignAppointmentResourcesResponse"];
                };
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AssignAppointmentResourcesResponse"];
                };
            };
            /** @description Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AssignAppointmentResourcesResponse"];
                };
            };
            /** @description The resource specified does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AssignAppointmentResourcesResponse"];
                };
            };
            /** @description The request size exceeded the maximum accepted size. */
            413: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AssignAppointmentResourcesResponse"];
                };
            };
            /** @description The request payload is in an unsupported format. */
            415: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AssignAppointmentResourcesResponse"];
                };
            };
            /** @description Unprocessable Entity. Unable to process the contained instructions. */
            422: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AssignAppointmentResourcesResponse"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AssignAppointmentResourcesResponse"];
                };
            };
            /** @description An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AssignAppointmentResourcesResponse"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AssignAppointmentResourcesResponse"];
                };
            };
        };
    };
    setAppointmentFulfillmentData: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description An Amazon-defined service job identifier. Get this value by calling the `getServiceJobs` operation of the Services API. */
                serviceJobId: string;
                /** @description An Amazon-defined identifier of active service job appointment. */
                appointmentId: string;
            };
            cookie?: never;
        };
        /** @description Appointment fulfillment data collection details. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["SetAppointmentFulfillmentDataRequest"];
            };
        };
        responses: {
            /** @description Success response. */
            204: {
                headers: {
                    /** @description Unique request reference id. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description 403 can be caused for reasons like Access Denied, Unauthorized, Expired Token, Invalid Signature or Resource Not Found. */
            403: {
                headers: {
                    /** @description Unique request reference id. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description The resource specified does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference id. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description The request size exceeded the maximum accepted size. */
            413: {
                headers: {
                    /** @description Unique request reference id. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description The entity of the request is in a format not supported by the requested resource. */
            415: {
                headers: {
                    /** @description Unique request reference id. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description Unprocessable Entity. Unable to process the contained instructions. */
            422: {
                headers: {
                    /** @description Unique request reference id. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference id. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description Encountered an unexpected condition which prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference id. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference id. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
        };
    };
    getRangeSlotCapacity: {
        parameters: {
            query: {
                /** @description An identifier for the marketplace in which the resource operates. */
                marketplaceIds: string[];
                /** @description Next page token returned in the response of your previous request. */
                nextPageToken?: string;
            };
            header?: never;
            path: {
                /** @description Resource Identifier. */
                resourceId: string;
            };
            cookie?: never;
        };
        /** @description Request body. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["RangeSlotCapacityQuery"];
            };
        };
        responses: {
            /** @description Success response. */
            200: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RangeSlotCapacity"];
                };
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RangeSlotCapacityErrors"];
                };
            };
            /** @description The request's Authorization header is not formatted correctly or does not contain a valid token. */
            401: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RangeSlotCapacityErrors"];
                };
            };
            /** @description Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RangeSlotCapacityErrors"];
                };
            };
            /** @description The resource specified does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RangeSlotCapacityErrors"];
                };
            };
            /** @description The request size exceeded the maximum accepted size. */
            413: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RangeSlotCapacityErrors"];
                };
            };
            /** @description The request payload is in an unsupported format. */
            415: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RangeSlotCapacityErrors"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RangeSlotCapacityErrors"];
                };
            };
            /** @description An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RangeSlotCapacityErrors"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RangeSlotCapacityErrors"];
                };
            };
        };
    };
    getFixedSlotCapacity: {
        parameters: {
            query: {
                /** @description An identifier for the marketplace in which the resource operates. */
                marketplaceIds: string[];
                /** @description Next page token returned in the response of your previous request. */
                nextPageToken?: string;
            };
            header?: never;
            path: {
                /** @description Resource Identifier. */
                resourceId: string;
            };
            cookie?: never;
        };
        /** @description Request body. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["FixedSlotCapacityQuery"];
            };
        };
        responses: {
            /** @description Success response. */
            200: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FixedSlotCapacity"];
                };
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FixedSlotCapacityErrors"];
                };
            };
            /** @description The request's Authorization header is not formatted correctly or does not contain a valid token. */
            401: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FixedSlotCapacityErrors"];
                };
            };
            /** @description Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FixedSlotCapacityErrors"];
                };
            };
            /** @description The resource specified does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FixedSlotCapacityErrors"];
                };
            };
            /** @description The request size exceeded the maximum accepted size. */
            413: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FixedSlotCapacityErrors"];
                };
            };
            /** @description The request payload is in an unsupported format. */
            415: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FixedSlotCapacityErrors"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FixedSlotCapacityErrors"];
                };
            };
            /** @description An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FixedSlotCapacityErrors"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FixedSlotCapacityErrors"];
                };
            };
        };
    };
    updateSchedule: {
        parameters: {
            query: {
                /** @description An identifier for the marketplace in which the resource operates. */
                marketplaceIds: string[];
            };
            header?: never;
            path: {
                /** @description Resource (store) Identifier */
                resourceId: string;
            };
            cookie?: never;
        };
        /** @description Schedule details */
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateScheduleRequest"];
            };
        };
        responses: {
            /** @description Success response. */
            200: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateScheduleResponse"];
                };
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateScheduleResponse"];
                };
            };
            /** @description Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateScheduleResponse"];
                };
            };
            /** @description The resource specified does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateScheduleResponse"];
                };
            };
            /** @description The request size exceeded the maximum accepted size. */
            413: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateScheduleResponse"];
                };
            };
            /** @description The request payload is in an unsupported format. */
            415: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateScheduleResponse"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateScheduleResponse"];
                };
            };
            /** @description Encountered an unexpected condition which prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateScheduleResponse"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateScheduleResponse"];
                };
            };
        };
    };
    createReservation: {
        parameters: {
            query: {
                /** @description An identifier for the marketplace in which the resource operates. */
                marketplaceIds: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Reservation details */
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateReservationRequest"];
            };
        };
        responses: {
            /** @description Success response. */
            200: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateReservationResponse"];
                };
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateReservationResponse"];
                };
            };
            /** @description Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateReservationResponse"];
                };
            };
            /** @description The resource specified does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateReservationResponse"];
                };
            };
            /** @description The request size exceeded the maximum accepted size. */
            413: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateReservationResponse"];
                };
            };
            /** @description The request payload is in an unsupported format. */
            415: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateReservationResponse"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateReservationResponse"];
                };
            };
            /** @description Encountered an unexpected condition which prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateReservationResponse"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateReservationResponse"];
                };
            };
        };
    };
    updateReservation: {
        parameters: {
            query: {
                /** @description An identifier for the marketplace in which the resource operates. */
                marketplaceIds: string[];
            };
            header?: never;
            path: {
                /** @description Reservation Identifier */
                reservationId: string;
            };
            cookie?: never;
        };
        /** @description Reservation details */
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateReservationRequest"];
            };
        };
        responses: {
            /** @description Success response. */
            200: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateReservationResponse"];
                };
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateReservationResponse"];
                };
            };
            /** @description Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateReservationResponse"];
                };
            };
            /** @description The reservation specified does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateReservationResponse"];
                };
            };
            /** @description The request size exceeded the maximum accepted size. */
            413: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateReservationResponse"];
                };
            };
            /** @description The request payload is in an unsupported format. */
            415: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateReservationResponse"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateReservationResponse"];
                };
            };
            /** @description Encountered an unexpected condition which prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateReservationResponse"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateReservationResponse"];
                };
            };
        };
    };
    cancelReservation: {
        parameters: {
            query: {
                /** @description An identifier for the marketplace in which the resource operates. */
                marketplaceIds: string[];
            };
            header?: never;
            path: {
                /** @description Reservation Identifier */
                reservationId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success response. */
            204: {
                headers: {
                    /** @description Unique request reference id. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CancelReservationResponse"];
                };
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    /** @description Unique request reference id. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CancelReservationResponse"];
                };
            };
            /** @description 403 can be caused for reasons like Access Denied, Unauthorized, Expired Token, Invalid Signature or Resource Not Found. */
            403: {
                headers: {
                    /** @description Unique request reference id. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CancelReservationResponse"];
                };
            };
            /** @description The reservation specified does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference id. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CancelReservationResponse"];
                };
            };
            /** @description The request size exceeded the maximum accepted size. */
            413: {
                headers: {
                    /** @description Unique request reference id. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CancelReservationResponse"];
                };
            };
            /** @description The entity of the request is in a format not supported by the requested resource. */
            415: {
                headers: {
                    /** @description Unique request reference id. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CancelReservationResponse"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference id. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CancelReservationResponse"];
                };
            };
            /** @description Encountered an unexpected condition which prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference id. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CancelReservationResponse"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference id. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CancelReservationResponse"];
                };
            };
        };
    };
    getAppointmmentSlotsByJobId: {
        parameters: {
            query: {
                /** @description An identifier for the marketplace in which the resource operates. */
                marketplaceIds: string[];
                /** @description A time from which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If `startTime` is provided, `endTime` should also be provided. Default value is as per business configuration. */
                startTime?: string;
                /** @description A time up to which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If `endTime` is provided, `startTime` should also be provided. Default value is as per business configuration. Maximum range of appointment slots can be 90 days. */
                endTime?: string;
            };
            header?: never;
            path: {
                /** @description A service job identifier to retrive appointment slots for associated service. */
                serviceJobId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success response. */
            200: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAppointmentSlotsResponse"];
                };
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAppointmentSlotsResponse"];
                };
            };
            /** @description Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAppointmentSlotsResponse"];
                };
            };
            /** @description The resource specified does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAppointmentSlotsResponse"];
                };
            };
            /** @description The request payload is in an unsupported format. */
            415: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAppointmentSlotsResponse"];
                };
            };
            /** @description Unprocessable Entity. Unable to process the contained instructions. */
            422: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAppointmentSlotsResponse"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAppointmentSlotsResponse"];
                };
            };
            /** @description An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAppointmentSlotsResponse"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAppointmentSlotsResponse"];
                };
            };
        };
    };
    getAppointmentSlots: {
        parameters: {
            query: {
                /** @description ASIN associated with the service. */
                asin: string;
                /** @description Store identifier defining the region scope to retrive appointment slots. */
                storeId: string;
                /** @description An identifier for the marketplace for which appointment slots are queried */
                marketplaceIds: string[];
                /** @description A time from which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If `startTime` is provided, `endTime` should also be provided. Default value is as per business configuration. */
                startTime?: string;
                /** @description A time up to which the appointment slots will be retrieved. The specified time must be in ISO 8601 format. If `endTime` is provided, `startTime` should also be provided. Default value is as per business configuration. Maximum range of appointment slots can be 90 days. */
                endTime?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success response. */
            200: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAppointmentSlotsResponse"];
                };
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAppointmentSlotsResponse"];
                };
            };
            /** @description Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAppointmentSlotsResponse"];
                };
            };
            /** @description The resource specified does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAppointmentSlotsResponse"];
                };
            };
            /** @description The request payload is in an unsupported format. */
            415: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAppointmentSlotsResponse"];
                };
            };
            /** @description Unprocessable Entity. Unable to process the contained instructions. */
            422: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAppointmentSlotsResponse"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAppointmentSlotsResponse"];
                };
            };
            /** @description An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAppointmentSlotsResponse"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAppointmentSlotsResponse"];
                };
            };
        };
    };
    createServiceDocumentUploadDestination: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Upload document operation input details. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["ServiceUploadDocument"];
            };
        };
        responses: {
            /** @description Successfully created an upload destination for the given resource. */
            200: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-requestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateServiceDocumentUploadDestination"];
                };
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    /** @description Unique request reference id. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateServiceDocumentUploadDestination"];
                };
            };
            /** @description Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateServiceDocumentUploadDestination"];
                };
            };
            /** @description The resource specified does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference id. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateServiceDocumentUploadDestination"];
                };
            };
            /** @description The request size exceeded the maximum accepted size. */
            413: {
                headers: {
                    /** @description Unique request reference id. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateServiceDocumentUploadDestination"];
                };
            };
            /** @description The request's Content-Type header is invalid. */
            415: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-requestid"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateServiceDocumentUploadDestination"];
                };
            };
            /** @description Unprocessable Entity. Unable to process the contained instructions. */
            422: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateServiceDocumentUploadDestination"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference ID. */
                    "x-amzn-requestid"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateServiceDocumentUploadDestination"];
                };
            };
            /** @description An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateServiceDocumentUploadDestination"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference id. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     **Note:** For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateServiceDocumentUploadDestination"];
                };
            };
        };
    };
    createRestrictedDataToken: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The restricted data token request details. */
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateRestrictedDataTokenRequest"];
            };
        };
        responses: {
            /** @description Success. */
            200: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateRestrictedDataTokenResponse"];
                };
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description The request's Authorization header is not formatted correctly or does not contain a valid token. */
            401: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description The specified resource does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description The request payload is in an unsupported format. */
            415: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorList"];
                };
            };
        };
    };
}
