/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/finances/v0/financialEventGroups": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns financial event groups for a given date range. It may take up to 48 hours for orders to appear in your financial events.
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 0.5 | 30 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). */
        get: operations["listFinancialEventGroups"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/finances/v0/financialEventGroups/{eventGroupId}/financialEvents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns all financial events for the specified financial event group. It may take up to 48 hours for orders to appear in your financial events.
         *
         *     **Note:** This operation will only retrieve group's data for the past two years. If a request is submitted for data spanning more than two years, an empty response is returned.
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 0.5 | 30 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). */
        get: operations["listFinancialEventsByGroupId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/finances/v0/orders/{orderId}/financialEvents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns all financial events for the specified order. It may take up to 48 hours for orders to appear in your financial events.
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 0.5 | 30 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). */
        get: operations["listFinancialEventsByOrderId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/finances/v0/financialEvents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns financial events for the specified data range. It may take up to 48 hours for orders to appear in your financial events.
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 0.5 | 30 |
         *
         *     The `x-amzn-RateLimit-Limit` response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values than those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](https://developer-docs.amazon.com/sp-api/docs/usage-plans-and-rate-limits-in-the-sp-api). */
        get: operations["listFinancialEvents"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description An event related to an Adhoc Disbursement. */
        AdhocDisbursementEvent: {
            /** @description Indicates the type of transaction.
             *
             *     Example: "Disbursed to Amazon Gift Card balance" */
            TransactionType?: string;
            PostedDate?: components["schemas"]["Date"];
            /** @description The identifier for the transaction. */
            TransactionId?: string;
            TransactionAmount?: components["schemas"]["Currency"];
        };
        /** @description A list of `AdhocDisbursement` events. */
        AdhocDisbursementEventList: components["schemas"]["AdhocDisbursementEvent"][];
        /** @description An adjustment to the seller's account. */
        AdjustmentEvent: {
            /** @description The type of adjustment.
             *
             *     Possible values:
             *
             *     * FBAInventoryReimbursement - An FBA inventory reimbursement to a seller's account. This occurs if a seller's inventory is damaged.
             *
             *     * ReserveEvent - A reserve event that is generated at the time of a settlement period closing. This occurs when some money from a seller's account is held back.
             *
             *     * PostageBilling - The amount paid by a seller for shipping labels.
             *
             *     * PostageRefund - The reimbursement of shipping labels purchased for orders that were canceled or refunded.
             *
             *     * LostOrDamagedReimbursement - An Amazon Easy Ship reimbursement to a seller's account for a package that we lost or damaged.
             *
             *     * CanceledButPickedUpReimbursement - An Amazon Easy Ship reimbursement to a seller's account. This occurs when a package is picked up and the order is subsequently canceled. This value is used only in the India marketplace.
             *
             *     * ReimbursementClawback - An Amazon Easy Ship reimbursement clawback from a seller's account. This occurs when a prior reimbursement is reversed. This value is used only in the India marketplace.
             *
             *     * SellerRewards - An award credited to a seller's account for their participation in an offer in the Seller Rewards program. Applies only to the India marketplace. */
            AdjustmentType?: string;
            PostedDate?: components["schemas"]["Date"];
            AdjustmentAmount?: components["schemas"]["Currency"];
            AdjustmentItemList?: components["schemas"]["AdjustmentItemList"];
        };
        /** @description A list of adjustment event information for the seller's account. */
        AdjustmentEventList: components["schemas"]["AdjustmentEvent"][];
        /** @description An item in an adjustment to the seller's account. */
        AdjustmentItem: {
            /** @description Represents the number of units in the seller's inventory when the AdustmentType is FBAInventoryReimbursement. */
            Quantity?: string;
            PerUnitAmount?: components["schemas"]["Currency"];
            TotalAmount?: components["schemas"]["Currency"];
            /** @description The seller SKU of the item. The seller SKU is qualified by the seller's seller ID, which is included with every call to the Selling Partner API. */
            SellerSKU?: string;
            /** @description A unique identifier assigned to products stored in and fulfilled from a fulfillment center. */
            FnSKU?: string;
            /** @description A short description of the item. */
            ProductDescription?: string;
            /** @description The Amazon Standard Identification Number (ASIN) of the item. */
            ASIN?: string;
        };
        /** @description A list of information about items in an adjustment to the seller's account. */
        AdjustmentItemList: components["schemas"]["AdjustmentItem"][];
        /** @description An expense related to an affordability promotion. */
        AffordabilityExpenseEvent: {
            /** @description An Amazon-defined identifier for an order. */
            AmazonOrderId?: string;
            PostedDate?: components["schemas"]["Date"];
            /** @description An encrypted, Amazon-defined marketplace identifier. */
            MarketplaceId?: string;
            /** @description Indicates the type of transaction.
             *
             *     Possible values:
             *
             *     * Charge - For an affordability promotion expense.
             *
             *     * Refund - For an affordability promotion expense reversal. */
            TransactionType?: string;
            BaseExpense?: components["schemas"]["Currency"];
            TaxTypeCGST: components["schemas"]["Currency"];
            TaxTypeSGST: components["schemas"]["Currency"];
            TaxTypeIGST: components["schemas"]["Currency"];
            TotalExpense?: components["schemas"]["Currency"];
        };
        /** @description A list of expense information related to an affordability promotion. */
        AffordabilityExpenseEventList: components["schemas"]["AffordabilityExpenseEvent"][];
        BigDecimal: number;
        /** @description A charge on the seller's account.
         *
         *     Possible values:
         *
         *     * Principal - The selling price of the order item, equal to the selling price of the item multiplied by the quantity ordered.
         *
         *     * Tax - The tax collected by the seller on the Principal.
         *
         *     * MarketplaceFacilitatorTax-Principal - The tax withheld on the Principal.
         *
         *     * MarketplaceFacilitatorTax-Shipping - The tax withheld on the ShippingCharge.
         *
         *     * MarketplaceFacilitatorTax-Giftwrap - The tax withheld on the Giftwrap charge.
         *
         *     * MarketplaceFacilitatorTax-Other - The tax withheld on other miscellaneous charges.
         *
         *     * Discount - The promotional discount for an order item.
         *
         *     * TaxDiscount - The tax amount deducted for promotional rebates.
         *
         *     * CODItemCharge - The COD charge for an order item.
         *
         *     * CODItemTaxCharge - The tax collected by the seller on a CODItemCharge.
         *
         *     * CODOrderCharge - The COD charge for an order.
         *
         *     * CODOrderTaxCharge - The tax collected by the seller on a CODOrderCharge.
         *
         *     * CODShippingCharge - Shipping charges for a COD order.
         *
         *     * CODShippingTaxCharge - The tax collected by the seller on a CODShippingCharge.
         *
         *     * ShippingCharge - The shipping charge.
         *
         *     * ShippingTax - The tax collected by the seller on a ShippingCharge.
         *
         *     * Goodwill - The amount given to a buyer as a gesture of goodwill or to compensate for pain and suffering in the buying experience.
         *
         *     * Giftwrap - The gift wrap charge.
         *
         *     * GiftwrapTax - The tax collected by the seller on a Giftwrap charge.
         *
         *     * RestockingFee - The charge applied to the buyer when returning a product in certain categories.
         *
         *     * ReturnShipping - The amount given to the buyer to compensate for shipping the item back in the event we are at fault.
         *
         *     * PointsFee - The value of Amazon Points deducted from the refund if the buyer does not have enough Amazon Points to cover the deduction.
         *
         *     * GenericDeduction - A generic bad debt deduction.
         *
         *     * FreeReplacementReturnShipping - The compensation for return shipping when a buyer receives the wrong item, requests a free replacement, and returns the incorrect item.
         *
         *     * PaymentMethodFee - The fee collected for certain payment methods in certain marketplaces.
         *
         *     * ExportCharge - The export duty that is charged when an item is shipped to an international destination as part of the Amazon Global program.
         *
         *     * SAFE-TReimbursement - The SAFE-T claim amount for the item.
         *
         *     * TCS-CGST - Tax Collected at Source (TCS) for Central Goods and Services Tax (CGST).
         *
         *     * TCS-SGST - Tax Collected at Source for State Goods and Services Tax (SGST).
         *
         *     * TCS-IGST - Tax Collected at Source for Integrated Goods and Services Tax (IGST).
         *
         *     * TCS-UTGST - Tax Collected at Source for Union Territories Goods and Services Tax (UTGST). */
        ChargeComponent: {
            /** @description The type of charge. */
            ChargeType?: string;
            ChargeAmount?: components["schemas"]["Currency"];
        };
        /** @description A list of charge information on the seller's account. */
        ChargeComponentList: components["schemas"]["ChargeComponent"][];
        /** @description A payment instrument. */
        ChargeInstrument: {
            /** @description A short description of the charge instrument. */
            Description?: string;
            /** @description The account tail (trailing digits) of the charge instrument. */
            Tail?: string;
            Amount?: components["schemas"]["Currency"];
        };
        /** @description A list of payment instruments. */
        ChargeInstrumentList: components["schemas"]["ChargeInstrument"][];
        /** @description An event related to charge refund. */
        ChargeRefundEvent: {
            PostedDate?: components["schemas"]["Date"];
            /** @description The reason given for a charge refund.
             *
             *     Example: `SubscriptionFeeCorrection` */
            ReasonCode?: string;
            /** @description A description of the Reason Code.
             *
             *     Example: `SubscriptionFeeCorrection` */
            ReasonCodeDescription?: string;
            ChargeRefundTransactions?: components["schemas"]["ChargeRefundTransaction"];
        };
        /** @description A list of charge refund events. */
        ChargeRefundEventList: components["schemas"]["ChargeRefundEvent"][];
        /** @description The charge refund transaction. */
        ChargeRefundTransaction: {
            ChargeAmount?: components["schemas"]["Currency"];
            /** @description The type of charge. */
            ChargeType?: string;
        };
        /** @description An event related to coupon payments. */
        CouponPaymentEvent: {
            PostedDate?: components["schemas"]["Date"];
            /** @description A coupon identifier. */
            CouponId?: string;
            /** @description The description provided by the seller when they created the coupon. */
            SellerCouponDescription?: string;
            /**
             * Format: int64
             * @description The number of coupon clips or redemptions.
             */
            ClipOrRedemptionCount?: number;
            /** @description A payment event identifier. */
            PaymentEventId?: string;
            FeeComponent?: components["schemas"]["FeeComponent"];
            ChargeComponent?: components["schemas"]["ChargeComponent"];
            TotalAmount?: components["schemas"]["Currency"];
        };
        /** @description A list of coupon payment event information. */
        CouponPaymentEventList: components["schemas"]["CouponPaymentEvent"][];
        /** @description A currency type and amount. */
        Currency: {
            /** @description The three-digit currency code in ISO 4217 format. */
            CurrencyCode?: string;
            CurrencyAmount?: components["schemas"]["BigDecimal"];
        };
        /** Format: date-time */
        Date: string;
        /** @description A debt payment or debt adjustment. */
        DebtRecoveryEvent: {
            /** @description The debt recovery type.
             *
             *     Possible values:
             *
             *     * DebtPayment
             *
             *     * DebtPaymentFailure
             *
             *     *DebtAdjustment */
            DebtRecoveryType?: string;
            RecoveryAmount?: components["schemas"]["Currency"];
            OverPaymentCredit?: components["schemas"]["Currency"];
            DebtRecoveryItemList?: components["schemas"]["DebtRecoveryItemList"];
            ChargeInstrumentList?: components["schemas"]["ChargeInstrumentList"];
        };
        /** @description A list of debt recovery event information. */
        DebtRecoveryEventList: components["schemas"]["DebtRecoveryEvent"][];
        /** @description An item of a debt payment or debt adjustment. */
        DebtRecoveryItem: {
            RecoveryAmount?: components["schemas"]["Currency"];
            OriginalAmount?: components["schemas"]["Currency"];
            GroupBeginDate?: components["schemas"]["Date"];
            GroupEndDate?: components["schemas"]["Date"];
        };
        /** @description A list of debt recovery item information. */
        DebtRecoveryItemList: components["schemas"]["DebtRecoveryItem"][];
        /** @description A payment made directly to a seller. */
        DirectPayment: {
            /** @description The type of payment.
             *
             *     Possible values:
             *
             *     * StoredValueCardRevenue - The amount that is deducted from the seller's account because the seller received money through a stored value card.
             *
             *     * StoredValueCardRefund - The amount that Amazon returns to the seller if the order that is bought using a stored value card is refunded.
             *
             *     * PrivateLabelCreditCardRevenue - The amount that is deducted from the seller's account because the seller received money through a private label credit card offered by Amazon.
             *
             *     * PrivateLabelCreditCardRefund - The amount that Amazon returns to the seller if the order that is bought using a private label credit card offered by Amazon is refunded.
             *
             *     * CollectOnDeliveryRevenue - The COD amount that the seller collected directly from the buyer.
             *
             *     * CollectOnDeliveryRefund - The amount that Amazon refunds to the buyer if an order paid for by COD is refunded. */
            DirectPaymentType?: string;
            DirectPaymentAmount?: components["schemas"]["Currency"];
        };
        /** @description A list of direct payment information. */
        DirectPaymentList: components["schemas"]["DirectPayment"][];
        /** @description Failed ad hoc disbursement event list. */
        FailedAdhocDisbursementEventList: {
            /** @description The type of fund transfer.
             *
             *     Example "Refund" */
            FundsTransfersType?: string;
            /** @description The transfer identifier. */
            TransferId?: string;
            /** @description The disbursement identifier. */
            DisbursementId?: string;
            /** @description The type of payment for disbursement.
             *
             *     Example `CREDIT_CARD` */
            PaymentDisbursementType?: string;
            /** @description The status of the failed `AdhocDisbursement`.
             *
             *     Example `HARD_DECLINED` */
            Status?: string;
            TransferAmount?: components["schemas"]["Currency"];
            PostedDate?: components["schemas"]["Date"];
        };
        /** @description A payment event for Fulfillment by Amazon (FBA) inventory liquidation. This event is used only in the US marketplace. */
        FBALiquidationEvent: {
            PostedDate?: components["schemas"]["Date"];
            /** @description The identifier for the original removal order. */
            OriginalRemovalOrderId?: string;
            LiquidationProceedsAmount?: components["schemas"]["Currency"];
            LiquidationFeeAmount?: components["schemas"]["Currency"];
        };
        /** @description A list of FBA inventory liquidation payment events. */
        FBALiquidationEventList: components["schemas"]["FBALiquidationEvent"][];
        /** @description A fee associated with the event. */
        FeeComponent: {
            /** @description The type of fee. For more information about Selling on Amazon fees, see [Selling on Amazon Fee Schedule](https://sellercentral.amazon.com/gp/help/200336920) on Seller Central. For more information about Fulfillment by Amazon fees, see [FBA features, services and fees](https://sellercentral.amazon.com/gp/help/201074400) on Seller Central. */
            FeeType?: string;
            FeeAmount?: components["schemas"]["Currency"];
        };
        /** @description A list of fee component information. */
        FeeComponentList: components["schemas"]["FeeComponent"][];
        /** @description Information related to a financial event group. */
        FinancialEventGroup: {
            /** @description A unique identifier for the financial event group. */
            FinancialEventGroupId?: string;
            /** @description The processing status of the financial event group indicates whether the balance of the financial event group is settled.
             *
             *     Possible values:
             *
             *     * Open
             *
             *     * Closed */
            ProcessingStatus?: string;
            /** @description The status of the fund transfer. */
            FundTransferStatus?: string;
            OriginalTotal?: components["schemas"]["Currency"];
            ConvertedTotal?: components["schemas"]["Currency"];
            FundTransferDate?: components["schemas"]["Date"];
            /** @description The trace identifier used by sellers to look up transactions externally. */
            TraceId?: string;
            /** @description The account tail of the payment instrument. */
            AccountTail?: string;
            BeginningBalance?: components["schemas"]["Currency"];
            FinancialEventGroupStart?: components["schemas"]["Date"];
            FinancialEventGroupEnd?: components["schemas"]["Date"];
        };
        /** @description A list of financial event group information. */
        FinancialEventGroupList: components["schemas"]["FinancialEventGroup"][];
        /** @description Contains all information related to a financial event. */
        FinancialEvents: {
            ShipmentEventList?: components["schemas"]["ShipmentEventList"];
            ShipmentSettleEventList?: components["schemas"]["ShipmentSettleEventList"];
            RefundEventList?: components["schemas"]["ShipmentEventList"];
            GuaranteeClaimEventList?: components["schemas"]["ShipmentEventList"];
            ChargebackEventList?: components["schemas"]["ShipmentEventList"];
            PayWithAmazonEventList?: components["schemas"]["PayWithAmazonEventList"];
            ServiceProviderCreditEventList?: components["schemas"]["SolutionProviderCreditEventList"];
            RetrochargeEventList?: components["schemas"]["RetrochargeEventList"];
            RentalTransactionEventList?: components["schemas"]["RentalTransactionEventList"];
            ProductAdsPaymentEventList?: components["schemas"]["ProductAdsPaymentEventList"];
            ServiceFeeEventList?: components["schemas"]["ServiceFeeEventList"];
            SellerDealPaymentEventList?: components["schemas"]["SellerDealPaymentEventList"];
            DebtRecoveryEventList?: components["schemas"]["DebtRecoveryEventList"];
            LoanServicingEventList?: components["schemas"]["LoanServicingEventList"];
            AdjustmentEventList?: components["schemas"]["AdjustmentEventList"];
            SAFETReimbursementEventList?: components["schemas"]["SAFETReimbursementEventList"];
            SellerReviewEnrollmentPaymentEventList?: components["schemas"]["SellerReviewEnrollmentPaymentEventList"];
            FBALiquidationEventList?: components["schemas"]["FBALiquidationEventList"];
            CouponPaymentEventList?: components["schemas"]["CouponPaymentEventList"];
            ImagingServicesFeeEventList?: components["schemas"]["ImagingServicesFeeEventList"];
            NetworkComminglingTransactionEventList?: components["schemas"]["NetworkComminglingTransactionEventList"];
            AffordabilityExpenseEventList?: components["schemas"]["AffordabilityExpenseEventList"];
            AffordabilityExpenseReversalEventList?: components["schemas"]["AffordabilityExpenseEventList"];
            RemovalShipmentEventList?: components["schemas"]["RemovalShipmentEventList"];
            RemovalShipmentAdjustmentEventList?: components["schemas"]["RemovalShipmentAdjustmentEventList"];
            TrialShipmentEventList?: components["schemas"]["TrialShipmentEventList"];
            TDSReimbursementEventList?: components["schemas"]["TDSReimbursementEventList"];
            AdhocDisbursementEventList?: components["schemas"]["AdhocDisbursementEventList"];
            TaxWithholdingEventList?: components["schemas"]["TaxWithholdingEventList"];
            ChargeRefundEventList?: components["schemas"]["ChargeRefundEventList"];
            FailedAdhocDisbursementEventList?: components["schemas"]["FailedAdhocDisbursementEventList"];
            ValueAddedServiceChargeEventList?: components["schemas"]["ValueAddedServiceChargeEventList"];
            CapacityReservationBillingEventList?: components["schemas"]["CapacityReservationBillingEventList"];
        };
        /** @description A fee event related to Amazon Imaging services. */
        ImagingServicesFeeEvent: {
            /** @description The identifier for the imaging services request. */
            ImagingRequestBillingItemID?: string;
            /** @description The Amazon Standard Identification Number (ASIN) of the item for which the imaging service was requested. */
            ASIN?: string;
            PostedDate?: components["schemas"]["Date"];
            FeeList?: components["schemas"]["FeeComponentList"];
        };
        /** @description A list of fee events related to Amazon Imaging services. */
        ImagingServicesFeeEventList: components["schemas"]["ImagingServicesFeeEvent"][];
        /** @description The payload for the listFinancialEventGroups operation. */
        ListFinancialEventGroupsPayload: {
            /** @description When present and not empty, pass this string token in the next request to return the next response page. */
            NextToken?: string;
            FinancialEventGroupList?: components["schemas"]["FinancialEventGroupList"];
        };
        /** @description The response schema for the listFinancialEventGroups operation. */
        ListFinancialEventGroupsResponse: {
            payload?: components["schemas"]["ListFinancialEventGroupsPayload"];
            errors?: components["schemas"]["ErrorList"];
        };
        /** @description The payload for the listFinancialEvents operation. */
        ListFinancialEventsPayload: {
            /** @description When present and not empty, pass this string token in the next request to return the next response page. */
            NextToken?: string;
            FinancialEvents?: components["schemas"]["FinancialEvents"];
        };
        /** @description The response schema for the listFinancialEvents operation. */
        ListFinancialEventsResponse: {
            payload?: components["schemas"]["ListFinancialEventsPayload"];
            errors?: components["schemas"]["ErrorList"];
        };
        /** @description A loan advance, loan payment, or loan refund. */
        LoanServicingEvent: {
            LoanAmount?: components["schemas"]["Currency"];
            /** @description The type of event.
             *
             *     Possible values:
             *
             *     * LoanAdvance
             *
             *     * LoanPayment
             *
             *     * LoanRefund */
            SourceBusinessEventType?: string;
        };
        /** @description A list of loan servicing events. */
        LoanServicingEventList: components["schemas"]["LoanServicingEvent"][];
        /** @description A network commingling transaction event. */
        NetworkComminglingTransactionEvent: {
            /** @description The type of network item swap.
             *
             *     Possible values:
             *
             *     * NetCo - A Fulfillment by Amazon inventory pooling transaction. Available only in the India marketplace.
             *
             *     * ComminglingVAT - A commingling VAT transaction. Available only in the UK, Spain, France, Germany, and Italy marketplaces. */
            TransactionType?: string;
            PostedDate?: components["schemas"]["Date"];
            /** @description The identifier for the network item swap. */
            NetCoTransactionID?: string;
            /** @description The reason for the network item swap. */
            SwapReason?: string;
            /** @description The Amazon Standard Identification Number (ASIN) of the swapped item. */
            ASIN?: string;
            /** @description The marketplace in which the event took place. */
            MarketplaceId?: string;
            TaxExclusiveAmount?: components["schemas"]["Currency"];
            TaxAmount?: components["schemas"]["Currency"];
        };
        /** @description A list of network commingling transaction events. */
        NetworkComminglingTransactionEventList: components["schemas"]["NetworkComminglingTransactionEvent"][];
        /** @description An event related to the seller's Pay with Amazon account. */
        PayWithAmazonEvent: {
            /** @description An order identifier that is specified by the seller. */
            SellerOrderId?: string;
            TransactionPostedDate?: components["schemas"]["Date"];
            /** @description The type of business object. */
            BusinessObjectType?: string;
            /** @description The sales channel for the transaction. */
            SalesChannel?: string;
            Charge?: components["schemas"]["ChargeComponent"];
            FeeList?: components["schemas"]["FeeComponentList"];
            /** @description The type of payment.
             *
             *     Possible values:
             *
             *     * Sales */
            PaymentAmountType?: string;
            /** @description A short description of this payment event. */
            AmountDescription?: string;
            /** @description The fulfillment channel.
             *
             *     Possible values:
             *
             *     * AFN - Amazon Fulfillment Network (Fulfillment by Amazon)
             *
             *     * MFN - Merchant Fulfillment Network (self-fulfilled) */
            FulfillmentChannel?: string;
            /** @description The store name where the event occurred. */
            StoreName?: string;
        };
        /** @description A list of events related to the seller's Pay with Amazon account. */
        PayWithAmazonEventList: components["schemas"]["PayWithAmazonEvent"][];
        /** @description A Sponsored Products payment event. */
        ProductAdsPaymentEvent: {
            postedDate?: components["schemas"]["Date"];
            /** @description Indicates if the transaction is for a charge or a refund.
             *
             *     Possible values:
             *
             *     * charge - Charge
             *
             *     * refund - Refund */
            transactionType?: string;
            /** @description Identifier for the invoice that the transaction appears in. */
            invoiceId?: string;
            baseValue?: components["schemas"]["Currency"];
            taxValue?: components["schemas"]["Currency"];
            transactionValue?: components["schemas"]["Currency"];
        };
        /** @description A list of sponsored products payment events. */
        ProductAdsPaymentEventList: components["schemas"]["ProductAdsPaymentEvent"][];
        /** @description A promotion applied to an item. */
        Promotion: {
            /** @description The type of promotion. */
            PromotionType?: string;
            /** @description The seller-specified identifier for the promotion. */
            PromotionId?: string;
            PromotionAmount?: components["schemas"]["Currency"];
        };
        /** @description A list of promotions. */
        PromotionList: components["schemas"]["Promotion"][];
        /** @description A removal shipment event for a removal order. */
        RemovalShipmentEvent: {
            PostedDate?: components["schemas"]["Date"];
            /** @description The merchant removal orderId. */
            MerchantOrderId?: string;
            /** @description The identifier for the removal shipment order. */
            OrderId?: string;
            /** @description The type of removal order.
             *
             *     Possible values:
             *
             *     * WHOLESALE_LIQUIDATION */
            TransactionType?: string;
            RemovalShipmentItemList?: components["schemas"]["RemovalShipmentItemList"];
        };
        /** @description A list of removal shipment event information. */
        RemovalShipmentEventList: components["schemas"]["RemovalShipmentEvent"][];
        /** @description Item-level information for a removal shipment. */
        RemovalShipmentItem: {
            /** @description An identifier for an item in a removal shipment. */
            RemovalShipmentItemId?: string;
            /** @description The tax collection model applied to the item.
             *
             *     Possible values:
             *
             *     * MarketplaceFacilitator - Tax is withheld and remitted to the taxing authority by Amazon on behalf of the seller.
             *
             *     * Standard - Tax is paid to the seller and not remitted to the taxing authority by Amazon. */
            TaxCollectionModel?: string;
            /** @description The Amazon fulfillment network SKU for the item. */
            FulfillmentNetworkSKU?: string;
            /**
             * Format: int32
             * @description The quantity of the item.
             */
            Quantity?: number;
            Revenue?: components["schemas"]["Currency"];
            FeeAmount?: components["schemas"]["Currency"];
            TaxAmount?: components["schemas"]["Currency"];
            TaxWithheld?: components["schemas"]["Currency"];
        };
        /** @description A list of information about removal shipment items. */
        RemovalShipmentItemList: components["schemas"]["RemovalShipmentItem"][];
        /** @description A financial adjustment event for FBA liquidated inventory. A positive value indicates money owed to Amazon by the buyer (for example, when the charge was incorrectly calculated as less than it should be). A negative value indicates a full or partial refund owed to the buyer (for example, when the buyer receives damaged items or fewer items than ordered). */
        RemovalShipmentAdjustmentEvent: {
            PostedDate?: components["schemas"]["Date"];
            /** @description The unique identifier for the adjustment event. */
            AdjustmentEventId?: string;
            /** @description The merchant removal orderId. */
            MerchantOrderId?: string;
            /** @description The orderId for shipping inventory. */
            OrderId?: string;
            /** @description The type of removal order.
             *
             *     Possible values:
             *
             *     * WHOLESALE_LIQUIDATION. */
            TransactionType?: string;
            /** @description A comma-delimited list of Removal shipmentItemAdjustment details for FBA inventory. */
            RemovalShipmentItemAdjustmentList?: components["schemas"]["RemovalShipmentItemAdjustment"][];
        };
        /** @description A comma-delimited list of Removal shipmentAdjustment details for FBA inventory. */
        RemovalShipmentAdjustmentEventList: components["schemas"]["RemovalShipmentAdjustmentEvent"][];
        /** @description Item-level information for a removal shipment item adjustment. */
        RemovalShipmentItemAdjustment: {
            /** @description An identifier for an item in a removal shipment. */
            RemovalShipmentItemId?: string;
            /** @description The tax collection model applied to the item.
             *
             *     Possible values:
             *
             *     * MarketplaceFacilitator - Tax is withheld and remitted to the taxing authority by Amazon on behalf of the seller.
             *
             *     * Standard - Tax is paid to the seller and not remitted to the taxing authority by Amazon. */
            TaxCollectionModel?: string;
            /** @description The Amazon fulfillment network SKU for the item. */
            FulfillmentNetworkSKU?: string;
            /**
             * Format: int32
             * @description Adjusted quantity of removal shipmentItemAdjustment items.
             */
            AdjustedQuantity?: number;
            RevenueAdjustment?: components["schemas"]["Currency"];
            TaxAmountAdjustment?: components["schemas"]["Currency"];
            TaxWithheldAdjustment?: components["schemas"]["Currency"];
        };
        /** @description An event related to a rental transaction. */
        RentalTransactionEvent: {
            /** @description An Amazon-defined identifier for an order. */
            AmazonOrderId?: string;
            /** @description The type of rental event.
             *
             *     Possible values:
             *
             *     * RentalCustomerPayment-Buyout - Transaction type that represents when the customer wants to buy out a rented item.
             *
             *     * RentalCustomerPayment-Extension - Transaction type that represents when the customer wants to extend the rental period.
             *
             *     * RentalCustomerRefund-Buyout - Transaction type that represents when the customer requests a refund for the buyout of the rented item.
             *
             *     * RentalCustomerRefund-Extension - Transaction type that represents when the customer requests a refund over the extension on the rented item.
             *
             *     * RentalHandlingFee - Transaction type that represents the fee that Amazon charges sellers who rent through Amazon.
             *
             *     * RentalChargeFailureReimbursement - Transaction type that represents when Amazon sends money to the seller to compensate for a failed charge.
             *
             *     * RentalLostItemReimbursement - Transaction type that represents when Amazon sends money to the seller to compensate for a lost item. */
            RentalEventType?: string;
            /**
             * Format: int32
             * @description The number of days that the buyer extended an already rented item. This value is only returned for RentalCustomerPayment-Extension and RentalCustomerRefund-Extension events.
             */
            ExtensionLength?: number;
            PostedDate?: components["schemas"]["Date"];
            RentalChargeList?: components["schemas"]["ChargeComponentList"];
            RentalFeeList?: components["schemas"]["FeeComponentList"];
            /** @description The name of the marketplace. */
            MarketplaceName?: string;
            RentalInitialValue?: components["schemas"]["Currency"];
            RentalReimbursement?: components["schemas"]["Currency"];
            RentalTaxWithheldList?: components["schemas"]["TaxWithheldComponentList"];
        };
        /** @description A list of rental transaction event information. */
        RentalTransactionEventList: components["schemas"]["RentalTransactionEvent"][];
        /** @description A retrocharge or retrocharge reversal. */
        RetrochargeEvent: {
            /** @description The type of event.
             *
             *     Possible values:
             *
             *     * Retrocharge
             *
             *     * RetrochargeReversal */
            RetrochargeEventType?: string;
            /** @description An Amazon-defined identifier for an order. */
            AmazonOrderId?: string;
            PostedDate?: components["schemas"]["Date"];
            BaseTax?: components["schemas"]["Currency"];
            ShippingTax?: components["schemas"]["Currency"];
            /** @description The name of the marketplace where the retrocharge event occurred. */
            MarketplaceName?: string;
            RetrochargeTaxWithheldList?: components["schemas"]["TaxWithheldComponentList"];
        };
        /** @description A list of information about Retrocharge or RetrochargeReversal events. */
        RetrochargeEventList: components["schemas"]["RetrochargeEvent"][];
        /** @description A SAFE-T claim reimbursement on the seller's account. */
        SAFETReimbursementEvent: {
            PostedDate?: components["schemas"]["Date"];
            /** @description A SAFE-T claim identifier. */
            SAFETClaimId?: string;
            ReimbursedAmount?: components["schemas"]["Currency"];
            /** @description Indicates why the seller was reimbursed. */
            ReasonCode?: string;
            SAFETReimbursementItemList?: components["schemas"]["SAFETReimbursementItemList"];
        };
        /** @description A list of SAFETReimbursementEvents. */
        SAFETReimbursementEventList: components["schemas"]["SAFETReimbursementEvent"][];
        /** @description An item from a SAFE-T claim reimbursement. */
        SAFETReimbursementItem: {
            itemChargeList?: components["schemas"]["ChargeComponentList"];
            /** @description The description of the item as shown on the product detail page on the retail website. */
            productDescription?: string;
            /** @description The number of units of the item being reimbursed. */
            quantity?: string;
        };
        /** @description A list of SAFETReimbursementItems. */
        SAFETReimbursementItemList: components["schemas"]["SAFETReimbursementItem"][];
        /** @description An event linked to the payment of a fee related to the specified deal. */
        SellerDealPaymentEvent: {
            postedDate?: components["schemas"]["Date"];
            /** @description The unique identifier of the deal. */
            dealId?: string;
            /** @description The internal description of the deal. */
            dealDescription?: string;
            /** @description The type of event: SellerDealComplete. */
            eventType?: string;
            /** @description The type of fee: RunLightningDealFee. */
            feeType?: string;
            feeAmount?: components["schemas"]["Currency"];
            taxAmount?: components["schemas"]["Currency"];
            totalAmount?: components["schemas"]["Currency"];
        };
        /** @description A list of payment events for deal-related fees. */
        SellerDealPaymentEventList: components["schemas"]["SellerDealPaymentEvent"][];
        /** @description A fee payment event for the Early Reviewer Program. */
        SellerReviewEnrollmentPaymentEvent: {
            PostedDate?: components["schemas"]["Date"];
            /** @description An enrollment identifier. */
            EnrollmentId?: string;
            /** @description The Amazon Standard Identification Number (ASIN) of the item that was enrolled in the Early Reviewer Program. */
            ParentASIN?: string;
            FeeComponent?: components["schemas"]["FeeComponent"];
            ChargeComponent?: components["schemas"]["ChargeComponent"];
            TotalAmount?: components["schemas"]["Currency"];
        };
        /** @description A list of information about fee events for the Early Reviewer Program. */
        SellerReviewEnrollmentPaymentEventList: components["schemas"]["SellerReviewEnrollmentPaymentEvent"][];
        /** @description A service fee on the seller's account. */
        ServiceFeeEvent: {
            /** @description An Amazon-defined identifier for an order. */
            AmazonOrderId?: string;
            /** @description A short description of the service fee reason. */
            FeeReason?: string;
            FeeList?: components["schemas"]["FeeComponentList"];
            /** @description The seller SKU of the item. The seller SKU is qualified by the seller's seller ID, which is included with every call to the Selling Partner API. */
            SellerSKU?: string;
            /** @description A unique identifier assigned by Amazon to products stored in and fulfilled from an Amazon fulfillment center. */
            FnSKU?: string;
            /** @description A short description of the service fee event. */
            FeeDescription?: string;
            /** @description The Amazon Standard Identification Number (ASIN) of the item. */
            ASIN?: string;
        };
        /** @description A list of information about service fee events. */
        ServiceFeeEventList: components["schemas"]["ServiceFeeEvent"][];
        /** @description A shipment, refund, guarantee claim, or chargeback. */
        ShipmentEvent: {
            /** @description An Amazon-defined identifier for an order. */
            AmazonOrderId?: string;
            /** @description A seller-defined identifier for an order. */
            SellerOrderId?: string;
            /** @description The name of the marketplace where the event occurred. */
            MarketplaceName?: string;
            OrderChargeList?: components["schemas"]["ChargeComponentList"];
            OrderChargeAdjustmentList?: components["schemas"]["ChargeComponentList"];
            ShipmentFeeList?: components["schemas"]["FeeComponentList"];
            ShipmentFeeAdjustmentList?: components["schemas"]["FeeComponentList"];
            OrderFeeList?: components["schemas"]["FeeComponentList"];
            OrderFeeAdjustmentList?: components["schemas"]["FeeComponentList"];
            DirectPaymentList?: components["schemas"]["DirectPaymentList"];
            PostedDate?: components["schemas"]["Date"];
            ShipmentItemList?: components["schemas"]["ShipmentItemList"];
            ShipmentItemAdjustmentList?: components["schemas"]["ShipmentItemList"];
        };
        /** @description A list of shipment event information. */
        ShipmentEventList: components["schemas"]["ShipmentEvent"][];
        /** @description A list of `ShipmentEvent` items. */
        ShipmentSettleEventList: components["schemas"]["ShipmentEvent"][];
        /** @description An item of a shipment, refund, guarantee claim, or chargeback. */
        ShipmentItem: {
            /** @description The seller SKU of the item. The seller SKU is qualified by the seller's seller ID, which is included with every call to the Selling Partner API. */
            SellerSKU?: string;
            /** @description An Amazon-defined order item identifier. */
            OrderItemId?: string;
            /** @description An Amazon-defined order adjustment identifier defined for refunds, guarantee claims, and chargeback events. */
            OrderAdjustmentItemId?: string;
            /**
             * Format: int32
             * @description The number of items shipped.
             */
            QuantityShipped?: number;
            ItemChargeList?: components["schemas"]["ChargeComponentList"];
            ItemChargeAdjustmentList?: components["schemas"]["ChargeComponentList"];
            ItemFeeList?: components["schemas"]["FeeComponentList"];
            ItemFeeAdjustmentList?: components["schemas"]["FeeComponentList"];
            ItemTaxWithheldList?: components["schemas"]["TaxWithheldComponentList"];
            PromotionList?: components["schemas"]["PromotionList"];
            PromotionAdjustmentList?: components["schemas"]["PromotionList"];
            CostOfPointsGranted?: components["schemas"]["Currency"];
            CostOfPointsReturned?: components["schemas"]["Currency"];
        };
        /** @description A list of shipment items. */
        ShipmentItemList: components["schemas"]["ShipmentItem"][];
        /** @description A credit given to a solution provider. */
        SolutionProviderCreditEvent: {
            /** @description The transaction type. */
            ProviderTransactionType?: string;
            /** @description A seller-defined identifier for an order. */
            SellerOrderId?: string;
            /** @description The identifier of the marketplace where the order was placed. */
            MarketplaceId?: string;
            /** @description The two-letter country code of the country associated with the marketplace where the order was placed. */
            MarketplaceCountryCode?: string;
            /** @description The Amazon-defined identifier of the seller. */
            SellerId?: string;
            /** @description The store name where the payment event occurred. */
            SellerStoreName?: string;
            /** @description The Amazon-defined identifier of the solution provider. */
            ProviderId?: string;
            /** @description The store name where the payment event occurred. */
            ProviderStoreName?: string;
            TransactionAmount?: components["schemas"]["Currency"];
            TransactionCreationDate?: components["schemas"]["Date"];
        };
        /** @description A list of information about solution provider credits. */
        SolutionProviderCreditEventList: components["schemas"]["SolutionProviderCreditEvent"][];
        /** @description Period which taxwithholding on seller's account is calculated. */
        TaxWithholdingPeriod: {
            StartDate?: components["schemas"]["Date"];
            EndDate?: components["schemas"]["Date"];
        };
        /** @description A TaxWithholding event on seller's account. */
        TaxWithholdingEvent: {
            PostedDate?: components["schemas"]["Date"];
            BaseAmount?: components["schemas"]["Currency"];
            WithheldAmount?: components["schemas"]["Currency"];
            TaxWithholdingPeriod?: components["schemas"]["TaxWithholdingPeriod"];
        };
        /** @description A list of `TaxWithholding` events. */
        TaxWithholdingEventList: components["schemas"]["TaxWithholdingEvent"][];
        /** @description Information about the taxes withheld. */
        TaxWithheldComponent: {
            /** @description The tax collection model applied to the item.
             *
             *     Possible values:
             *
             *     * MarketplaceFacilitator - Tax is withheld and remitted to the taxing authority by Amazon on behalf of the seller.
             *
             *     * Standard - Tax is paid to the seller and not remitted to the taxing authority by Amazon. */
            TaxCollectionModel?: string;
            TaxesWithheld?: components["schemas"]["ChargeComponentList"];
        };
        /** @description A list of information about taxes withheld. */
        TaxWithheldComponentList: components["schemas"]["TaxWithheldComponent"][];
        /** @description An event related to a Tax-Deducted-at-Source (TDS) reimbursement. */
        TDSReimbursementEvent: {
            PostedDate?: components["schemas"]["Date"];
            /** @description The Tax-Deducted-at-Source (TDS) identifier. */
            TDSOrderId?: string;
            ReimbursedAmount?: components["schemas"]["Currency"];
        };
        /** @description A list of `TDSReimbursementEvent` items. */
        TDSReimbursementEventList: components["schemas"]["TDSReimbursementEvent"][];
        /** @description An event related to a trial shipment. */
        TrialShipmentEvent: {
            /** @description An Amazon-defined identifier for an order. */
            AmazonOrderId?: string;
            /** @description The identifier of the financial event group. */
            FinancialEventGroupId?: string;
            PostedDate?: components["schemas"]["Date"];
            /** @description The seller SKU of the item. The seller SKU is qualified by the seller's seller ID, which is included with every call to the Selling Partner API. */
            SKU?: string;
            FeeList?: components["schemas"]["FeeComponentList"];
        };
        /** @description A list of information about trial shipment financial events. */
        TrialShipmentEventList: components["schemas"]["TrialShipmentEvent"][];
        /** @description An event related to a value added service charge. */
        ValueAddedServiceChargeEventList: {
            /** @description Indicates the type of transaction.
             *
             *     Example: 'Other Support Service fees' */
            TransactionType?: string;
            PostedDate?: components["schemas"]["Date"];
            /** @description A short description of the service charge event. */
            Description?: string;
            TransactionAmount?: components["schemas"]["Currency"];
        };
        /** @description An event related to a capacity reservation billing charge. */
        CapacityReservationBillingEvent: {
            /** @description Indicates the type of transaction. For example, FBA Inventory Fee */
            TransactionType?: string;
            PostedDate?: components["schemas"]["Date"];
            /** @description A short description of the capacity reservation billing event. */
            Description?: string;
            TransactionAmount?: components["schemas"]["Currency"];
        };
        /** @description A list of `CapacityReservationBillingEvent` events. */
        CapacityReservationBillingEventList: components["schemas"]["CapacityReservationBillingEvent"][];
        /** @description A list of error responses returned when a request is unsuccessful. */
        ErrorList: components["schemas"]["Error"][];
        /** @description Error response returned when the request is unsuccessful. */
        Error: {
            /** @description An error code that identifies the type of error that occurred. */
            code: string;
            /** @description A message that describes the error condition in a human-readable form. */
            message: string;
            /** @description Additional details that can help the caller understand or fix the issue. */
            details?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    listFinancialEventGroups: {
        parameters: {
            query?: {
                /** @description The maximum number of results to return per page. If the response exceeds the maximum number of transactions or 10 MB, the API responds with 'InvalidInput'. */
                MaxResultsPerPage?: number;
                /** @description A date used for selecting financial event groups that opened before (but not at) a specified date and time, in ISO 8601 format. The date-time  must be later than FinancialEventGroupStartedAfter and no later than two minutes before the request was submitted. If FinancialEventGroupStartedAfter and FinancialEventGroupStartedBefore are more than 180 days apart, no financial event groups are returned. */
                FinancialEventGroupStartedBefore?: string;
                /** @description A date used for selecting financial event groups that opened after (or at) a specified date and time, in ISO 8601 format. The date-time must be no later than two minutes before the request was submitted. */
                FinancialEventGroupStartedAfter?: string;
                /** @description A string token returned in the response of your previous request. */
                NextToken?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListFinancialEventGroupsResponse"];
                };
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListFinancialEventGroupsResponse"];
                };
            };
            /** @description Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListFinancialEventGroupsResponse"];
                };
            };
            /** @description The resource specified does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListFinancialEventGroupsResponse"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListFinancialEventGroupsResponse"];
                };
            };
            /** @description An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListFinancialEventGroupsResponse"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListFinancialEventGroupsResponse"];
                };
            };
        };
    };
    listFinancialEventsByGroupId: {
        parameters: {
            query?: {
                /** @description The maximum number of results to return per page. If the response exceeds the maximum number of transactions or 10 MB, the API responds with 'InvalidInput'. */
                MaxResultsPerPage?: number;
                /** @description A date used for selecting financial events posted after (or at) a specified time. The date-time **must** be more than two minutes before the time of the request, in ISO 8601 date time format. */
                PostedAfter?: string;
                /** @description A date used for selecting financial events posted before (but not at) a specified time. The date-time must be later than `PostedAfter` and no later than two minutes before the request was submitted, in ISO 8601 date time format. If `PostedAfter` and `PostedBefore` are more than 180 days apart, no financial events are returned. You must specify the `PostedAfter` parameter if you specify the `PostedBefore` parameter. Default: Now minus two minutes. */
                PostedBefore?: string;
                /** @description A string token returned in the response of your previous request. */
                NextToken?: string;
            };
            header?: never;
            path: {
                /** @description The identifier of the financial event group to which the events belong. */
                eventGroupId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListFinancialEventsResponse"];
                };
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListFinancialEventsResponse"];
                };
            };
            /** @description Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListFinancialEventsResponse"];
                };
            };
            /** @description The resource specified does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListFinancialEventsResponse"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListFinancialEventsResponse"];
                };
            };
            /** @description An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListFinancialEventsResponse"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListFinancialEventsResponse"];
                };
            };
        };
    };
    listFinancialEventsByOrderId: {
        parameters: {
            query?: {
                /** @description The maximum number of results to return per page. If the response exceeds the maximum number of transactions or 10 MB, the API responds with 'InvalidInput'. */
                MaxResultsPerPage?: number;
                /** @description A string token returned in the response of your previous request. */
                NextToken?: string;
            };
            header?: never;
            path: {
                /** @description An Amazon-defined order identifier, in 3-7-7 format. */
                orderId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Financial Events successfully retrieved. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListFinancialEventsResponse"];
                };
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListFinancialEventsResponse"];
                };
            };
            /** @description Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListFinancialEventsResponse"];
                };
            };
            /** @description The resource specified does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListFinancialEventsResponse"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListFinancialEventsResponse"];
                };
            };
            /** @description An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListFinancialEventsResponse"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListFinancialEventsResponse"];
                };
            };
        };
    };
    listFinancialEvents: {
        parameters: {
            query?: {
                /** @description The maximum number of results to return per page. If the response exceeds the maximum number of transactions or 10 MB, the API responds with 'InvalidInput'. */
                MaxResultsPerPage?: number;
                /** @description A date used for selecting financial events posted after (or at) a specified time. The date-time must be no later than two minutes before the request was submitted, in ISO 8601 date time format. */
                PostedAfter?: string;
                /** @description A date used for selecting financial events posted before (but not at) a specified time. The date-time must be later than PostedAfter and no later than two minutes before the request was submitted, in ISO 8601 date time format. If PostedAfter and PostedBefore are more than 180 days apart, no financial events are returned. You must specify the PostedAfter parameter if you specify the PostedBefore parameter. Default: Now minus two minutes. */
                PostedBefore?: string;
                /** @description A string token returned in the response of your previous request. */
                NextToken?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListFinancialEventsResponse"];
                };
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListFinancialEventsResponse"];
                };
            };
            /** @description Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListFinancialEventsResponse"];
                };
            };
            /** @description The resource specified does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListFinancialEventsResponse"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListFinancialEventsResponse"];
                };
            };
            /** @description An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListFinancialEventsResponse"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference identifier. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListFinancialEventsResponse"];
                };
            };
        };
    };
}
