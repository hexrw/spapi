/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/authorization/v1/authorizationCode": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Returns the Login with Amazon (LWA) authorization code for an existing Amazon MWS authorization.
         * @description With the getAuthorizationCode operation, you can request a Login With Amazon (LWA) authorization code that will allow you to call a Selling Partner API on behalf of a seller who has already authorized you to call Amazon Marketplace Web Service (Amazon MWS). You specify a developer ID, an MWS auth token, and a seller ID. Taken together, these represent the Amazon MWS authorization that the seller previously granted you. The operation returns an LWA authorization code that can be exchanged for a refresh token and access token representing authorization to call the Selling Partner API on the seller's behalf. By using this API, sellers who have already authorized you for Amazon MWS do not need to re-authorize you for the Selling Partner API.
         *
         *     **Usage Plan:**
         *
         *     | Rate (requests per second) | Burst |
         *     | ---- | ---- |
         *     | 1 | 5 |
         *
         *     For more information, see "Usage Plans and Rate Limits" in the Selling Partner API documentation.
         */
        get: operations["getAuthorizationCode"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description The response schema for the GetAuthorizationCode operation. */
        GetAuthorizationCodeResponse: {
            payload?: components["schemas"]["AuthorizationCode"];
            errors?: components["schemas"]["ErrorList"];
        };
        /** @description A Login with Amazon (LWA) authorization code. */
        AuthorizationCode: {
            /** @description A Login with Amazon (LWA) authorization code that can be exchanged for a refresh token and access token that authorize you to make calls to a Selling Partner API. */
            authorizationCode?: string;
        };
        /** @description A list of error responses returned when a request is unsuccessful. */
        ErrorList: components["schemas"]["Error"][];
        /** @description Error response returned when the request is unsuccessful. */
        Error: {
            /** @description An error code that identifies the type of error that occurred. */
            code: string;
            /** @description A message that describes the error condition in a human-readable form. */
            message: string;
            /** @description Additional details that can help the caller understand or fix the issue. */
            details?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getAuthorizationCode: {
        parameters: {
            query: {
                /** @description The seller ID of the seller for whom you are requesting Selling Partner API authorization. This must be the seller ID of the seller who authorized your application on the Marketplace Appstore. */
                sellingPartnerId: string;
                /** @description Your developer ID. This must be one of the developer ID values that you provided when you registered your application in Developer Central. */
                developerId: string;
                /** @description The MWS Auth Token that was generated when the seller authorized your application on the Marketplace Appstore. */
                mwsAuthToken: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success. */
            200: {
                headers: {
                    /** @description Unique request reference ID. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAuthorizationCodeResponse"];
                    payload: unknown;
                };
            };
            /** @description Request has missing or invalid parameters and cannot be parsed. */
            400: {
                headers: {
                    /** @description Unique request reference ID. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAuthorizationCodeResponse"];
                    errors: unknown;
                };
            };
            /** @description Indicates that access to the resource is forbidden. Possible reasons include Access Denied, Unauthorized, Expired Token, or Invalid Signature. */
            403: {
                headers: {
                    /** @description Unique request reference ID. */
                    "x-amzn-RequestId"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAuthorizationCodeResponse"];
                };
            };
            /** @description The resource specified does not exist. */
            404: {
                headers: {
                    /** @description Unique request reference ID. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAuthorizationCodeResponse"];
                };
            };
            /** @description The request size exceeded the maximum accepted size. */
            413: {
                headers: {
                    /** @description Unique request reference ID. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAuthorizationCodeResponse"];
                };
            };
            /** @description The request payload is in an unsupported format. */
            415: {
                headers: {
                    /** @description Unique request reference ID. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAuthorizationCodeResponse"];
                };
            };
            /** @description The frequency of requests was greater than allowed. */
            429: {
                headers: {
                    /** @description Unique request reference ID. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAuthorizationCodeResponse"];
                };
            };
            /** @description An unexpected condition occurred that prevented the server from fulfilling the request. */
            500: {
                headers: {
                    /** @description Unique request reference ID. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAuthorizationCodeResponse"];
                };
            };
            /** @description Temporary overloading or maintenance of the server. */
            503: {
                headers: {
                    /** @description Unique request reference ID. */
                    "x-amzn-RequestId"?: string;
                    /** @description Your rate limit (requests per second) for this operation.
                     *     _Note:_ For this status code, the rate limit header is deprecated and no longer returned. */
                    "x-amzn-RateLimit-Limit"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAuthorizationCodeResponse"];
                };
            };
        };
    };
}
